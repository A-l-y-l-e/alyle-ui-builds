function same(o) {
    return o;
}
export class LySelectionModel {
    constructor(opts) {
        this._selectionMap = new Map();
        this._getKeyFn = same;
        if (!opts) {
            return;
        }
        const { multiple, getKey } = opts;
        if (getKey) {
            this._getKeyFn = getKey;
        }
        if (multiple === true) {
            this._multiple = true;
            const { selecteds } = opts;
            if (Array.isArray(selecteds) && selecteds.length) {
                this.select(...selecteds);
            }
        }
        else {
            const { selecteds } = opts;
            if (selecteds) {
                this._markSelected(selecteds);
            }
        }
    }
    /** Selected values. */
    get selected() {
        if (!this._selected) {
            this._selected = Array.from(this._selectionMap.values());
        }
        return this._selected;
    }
    /**
     * Toggles a value between selected and deselected.
     */
    toggle(value) {
        this.isSelected(value) ? this.deselect(value) : this.select(value);
    }
    /**
     * Selects one or several values.
     */
    select(...values) {
        values.forEach(value => this._markSelected(value));
        this._clearSelectedValues();
    }
    /**
     * Deselects a value or an array of values.
     */
    deselect(...values) {
        values.forEach(value => this._unmarkSelected(value));
        this._clearSelectedValues();
    }
    /**
     * Determines whether a value is selected.
     */
    isSelected(value) {
        const key = this._getKeyFn(value);
        return this._selectionMap.has(key);
    }
    /**
     * Determines whether the model does not have a value.
     */
    isEmpty() {
        return this._selectionMap.size === 0;
    }
    /**
     * Determines whether the model has a value.
     */
    hasValue() {
        return this._selectionMap.size !== 0;
    }
    /**
     * Gets whether multiple values can be selected.
     */
    isMultipleSelection() {
        return this._multiple;
    }
    /**
     * Clears all of the selected values.
     */
    clear() {
        this._unmarkAll();
        this._clearSelectedValues();
    }
    /** Selects a value. */
    _markSelected(value) {
        if (!this.isSelected(value)) {
            if (!this._multiple) {
                this._unmarkAll();
            }
            const key = this._getKeyFn(value);
            this._selectionMap.set(key, value);
        }
    }
    /** Deselects a value. */
    _unmarkSelected(value) {
        if (this.isSelected(value)) {
            const key = this._getKeyFn(value);
            this._selectionMap.delete(key);
        }
    }
    /** Clears out the selected values. */
    _unmarkAll() {
        if (!this.isEmpty()) {
            this._selectionMap.clear();
        }
    }
    /** Clear the selected values so they can be re-cached. */
    _clearSelectedValues() {
        this._selected = null;
    }
}
//# sourceMappingURL=data:application/json;base64,