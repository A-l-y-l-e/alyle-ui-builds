!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@alyle/ui")):"function"==typeof define&&define.amd?define("@alyle/ui/divider",["exports","@angular/core","@alyle/ui"],t):t(((e=e||self).ly=e.ly||{},e.ly.divider={}),e.ng.core,e.ly.core)}(this,function(e,t,n){"use strict";function i(e,t,n,i){var r,o=arguments.length,l=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,i);else for(var c=e.length-1;c>=0;c--)(r=e[c])&&(l=(o<3?r(l):o>3?r(t,n,l):r(t,n))||l);return o>3&&l&&Object.defineProperty(t,n,l),l}function r(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}var o=function(e){return{display:"block",backgroundColor:e.divider,height:"1px"}},l=o,c=function(){function e(e,t){this._el=e,this._theme=t}return Object.defineProperty(e.prototype,"inset",{get:function(){return this._inset},set:function(e){this._inset=e,this._theme.addStyle("lyDivider.inset",function(){return{marginBefore:"74px"}},this._el.nativeElement,this._insetClass)},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){var e=this._theme.addSimpleStyle("lyDivider",o);this._el.nativeElement.classList.add(e)},i([t.Input(),r("design:type",Boolean),r("design:paramtypes",[Boolean])],e.prototype,"inset",null),e=i([t.Directive({selector:"ly-divider"}),r("design:paramtypes",[t.ElementRef,n.LyTheme2])],e)}(),f=function(){function e(){}return e=i([t.NgModule({exports:[c],declarations:[c]})],e)}();e.LyDivider=c,e.LyDividerModule=f,e.Éµ0=l,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=alyle-ui-divider.umd.min.js.map