import * as tslib_1 from "tslib";
import { Directive, Input } from '@angular/core';
import { ThemeVariables, keyframesUniqueId, LyHostClass, StyleRenderer, toBoolean, Dir } from '@alyle/ui';
const STYLE_PRIORITY = -0.5;
export const STYLES = (theme) => {
    const id = keyframesUniqueId.next();
    const { primary, secondary, tertiary } = theme.background;
    const dir = theme.direction === Dir.ltr ? -1 : 1;
    const lum = primary.default.luminance();
    let one = (lum < .5
        ? tertiary
        : secondary);
    let two = (lum < .5
        ? secondary
        : tertiary);
    one = one.darken(1 * (lum < .5 ? -.5 : 0));
    two = two.darken(.25 * (lum < .5 ? -1 : 1));
    return {
        $name: LySkeleton.и,
        $priority: STYLE_PRIORITY,
        $global: (className) => `@keyframes ${id}{${className} 0%{background-position:${-dir * 200}% 50%;}${className} 100%{background-position:${dir * 200}% 50%;}}`,
        root: (className) => `${className}{content:'';background:${`linear-gradient(270deg, ${one}, ${two}, ${two}, ${one})`};background-size:400% 400%;animation:${id} 8s ease-in-out infinite;color:transparent;cursor:progress;user-select:none;}`
    };
};
let LySkeleton = class LySkeleton {
    constructor(styleRenderer, hostClass) {
        this.styleRenderer = styleRenderer;
        this.hostClass = hostClass;
        /** @docs-private */
        this.classes = this.styleRenderer.renderSheet(STYLES);
    }
    get skeleton() {
        return this._skeleton;
    }
    set skeleton(val) {
        const newVal = toBoolean(val);
        this._skeleton = newVal;
        this.hostClass.toggle(this.classes.root, newVal);
    }
};
/** @docs-private */
LySkeleton.и = 'LySkeleton';
LySkeleton.ctorParameters = () => [
    { type: StyleRenderer },
    { type: LyHostClass }
];
tslib_1.__decorate([
    Input('lySkeleton')
], LySkeleton.prototype, "skeleton", null);
LySkeleton = tslib_1.__decorate([
    Directive({
        selector: '[lySkeleton]',
        providers: [
            LyHostClass,
            StyleRenderer
        ],
        exportAs: 'lySkeleton'
    })
], LySkeleton);
export { LySkeleton };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tlbGV0b24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWx5bGUvdWkvc2tlbGV0b24vIiwic291cmNlcyI6WyJza2VsZXRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUNMLGNBQWMsRUFDZCxpQkFBaUIsRUFDakIsV0FBVyxFQUNYLGFBQWEsRUFDYixTQUFTLEVBQ1QsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXpCLE1BQU0sY0FBYyxHQUFHLENBQUMsR0FBRyxDQUFDO0FBQzVCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQXFCLEVBQUUsRUFBRTtJQUM5QyxNQUFNLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0lBQzFELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3hDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUU7UUFDakIsQ0FBQyxDQUFDLFFBQVE7UUFDVixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFO1FBQ2pCLENBQUMsQ0FBQyxTQUFTO1FBQ1gsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2QsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFNUMsT0FBTztRQUNMLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNuQixTQUFTLEVBQUUsY0FBYztRQUN6QixPQUFPLEVBQUUsQ0FBQyxTQUFpQixFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUUsSUFBSSxTQUFTLDJCQUEyQixDQUFDLEdBQUcsR0FBRyxHQUFHLFVBQVUsU0FBUyw2QkFBNkIsR0FBRyxHQUFHLEdBQUcsVUFBVTtRQUNySyxJQUFJLEVBQUUsQ0FBQyxTQUFpQixFQUFFLEVBQUUsQ0FBQyxHQUFHLFNBQVMsMEJBQ3JDLDJCQUNFLEdBQ0YsS0FDRSxHQUNGLEtBQ0UsR0FDRixLQUNFLEdBQ0YsR0FBRyx3Q0FBd0MsRUFBRSwrRUFBK0U7S0FDakksQ0FBQztBQUNKLENBQUMsQ0FBQztBQVVGLElBQWEsVUFBVSxHQUF2QixNQUFhLFVBQVU7SUFpQnJCLFlBQ1UsYUFBNEIsRUFDNUIsU0FBc0I7UUFEdEIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsY0FBUyxHQUFULFNBQVMsQ0FBYTtRQWhCaEMsb0JBQW9CO1FBQ1gsWUFBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBZ0J0RCxDQUFDO0lBYkwsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxJQUFJLFFBQVEsQ0FBQyxHQUFZO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBT0YsQ0FBQTtBQXBCQyxvQkFBb0I7QUFDSixZQUFDLEdBQUcsWUFBWSxDQUFDOztZQWdCUixhQUFhO1lBQ2pCLFdBQVc7O0FBWmhDO0lBREMsS0FBSyxDQUFDLFlBQVksQ0FBQzswQ0FHbkI7QUFUVSxVQUFVO0lBUnRCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxjQUFjO1FBQ3hCLFNBQVMsRUFBRTtZQUNULFdBQVc7WUFDWCxhQUFhO1NBQ2Q7UUFDRCxRQUFRLEVBQUUsWUFBWTtLQUN2QixDQUFDO0dBQ1csVUFBVSxDQXFCdEI7U0FyQlksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIFRoZW1lVmFyaWFibGVzLFxuICBrZXlmcmFtZXNVbmlxdWVJZCxcbiAgTHlIb3N0Q2xhc3MsXG4gIFN0eWxlUmVuZGVyZXIsXG4gIHRvQm9vbGVhbixcbiAgRGlyIH0gZnJvbSAnQGFseWxlL3VpJztcblxuY29uc3QgU1RZTEVfUFJJT1JJVFkgPSAtMC41O1xuZXhwb3J0IGNvbnN0IFNUWUxFUyA9ICh0aGVtZTogVGhlbWVWYXJpYWJsZXMpID0+IHtcbiAgY29uc3QgaWQgPSBrZXlmcmFtZXNVbmlxdWVJZC5uZXh0KCk7XG4gIGNvbnN0IHsgcHJpbWFyeSwgc2Vjb25kYXJ5LCB0ZXJ0aWFyeSB9ID0gdGhlbWUuYmFja2dyb3VuZDtcbiAgY29uc3QgZGlyID0gdGhlbWUuZGlyZWN0aW9uID09PSBEaXIubHRyID8gLTEgOiAxO1xuICBjb25zdCBsdW0gPSBwcmltYXJ5LmRlZmF1bHQubHVtaW5hbmNlKCk7XG4gIGxldCBvbmUgPSAobHVtIDwgLjVcbiAgICA/IHRlcnRpYXJ5XG4gICAgOiBzZWNvbmRhcnkpO1xuICBsZXQgdHdvID0gKGx1bSA8IC41XG4gICAgPyBzZWNvbmRhcnlcbiAgICA6IHRlcnRpYXJ5KTtcbiAgb25lID0gb25lLmRhcmtlbigxICogKGx1bSA8IC41ID8gLS41IDogMCkpO1xuICB0d28gPSB0d28uZGFya2VuKC4yNSAqIChsdW0gPCAuNSA/IC0xIDogMSkpO1xuXG4gIHJldHVybiB7XG4gICAgJG5hbWU6IEx5U2tlbGV0b24u0LgsXG4gICAgJHByaW9yaXR5OiBTVFlMRV9QUklPUklUWSxcbiAgICAkZ2xvYmFsOiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IGBAa2V5ZnJhbWVzICR7aWR9eyR7Y2xhc3NOYW1lfSAwJXtiYWNrZ3JvdW5kLXBvc2l0aW9uOiR7LWRpciAqIDIwMH0lIDUwJTt9JHtjbGFzc05hbWV9IDEwMCV7YmFja2dyb3VuZC1wb3NpdGlvbjoke2RpciAqIDIwMH0lIDUwJTt9fWAsXG4gICAgcm9vdDogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBgJHtjbGFzc05hbWV9e2NvbnRlbnQ6Jyc7YmFja2dyb3VuZDoke1xuICAgICAgICBgbGluZWFyLWdyYWRpZW50KDI3MGRlZywgJHtcbiAgICAgICAgICBvbmVcbiAgICAgICAgfSwgJHtcbiAgICAgICAgICB0d29cbiAgICAgICAgfSwgJHtcbiAgICAgICAgICB0d29cbiAgICAgICAgfSwgJHtcbiAgICAgICAgICBvbmVcbiAgICAgICAgfSlgfTtiYWNrZ3JvdW5kLXNpemU6NDAwJSA0MDAlO2FuaW1hdGlvbjoke2lkfSA4cyBlYXNlLWluLW91dCBpbmZpbml0ZTtjb2xvcjp0cmFuc3BhcmVudDtjdXJzb3I6cHJvZ3Jlc3M7dXNlci1zZWxlY3Q6bm9uZTt9YFxuICB9O1xufTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2x5U2tlbGV0b25dJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgTHlIb3N0Q2xhc3MsXG4gICAgU3R5bGVSZW5kZXJlclxuICBdLFxuICBleHBvcnRBczogJ2x5U2tlbGV0b24nXG59KVxuZXhwb3J0IGNsYXNzIEx5U2tlbGV0b24ge1xuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBzdGF0aWMgcmVhZG9ubHkg0LggPSAnTHlTa2VsZXRvbic7XG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHJlYWRvbmx5IGNsYXNzZXMgPSB0aGlzLnN0eWxlUmVuZGVyZXIucmVuZGVyU2hlZXQoU1RZTEVTKTtcblxuICBASW5wdXQoJ2x5U2tlbGV0b24nKVxuICBnZXQgc2tlbGV0b24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NrZWxldG9uO1xuICB9XG4gIHNldCBza2VsZXRvbih2YWw6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBuZXdWYWwgPSB0b0Jvb2xlYW4odmFsKTtcbiAgICB0aGlzLl9za2VsZXRvbiA9IG5ld1ZhbDtcbiAgICB0aGlzLmhvc3RDbGFzcy50b2dnbGUodGhpcy5jbGFzc2VzLnJvb3QsIG5ld1ZhbCk7XG4gIH1cbiAgcHJpdmF0ZSBfc2tlbGV0b246IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzdHlsZVJlbmRlcmVyOiBTdHlsZVJlbmRlcmVyLFxuICAgIHByaXZhdGUgaG9zdENsYXNzOiBMeUhvc3RDbGFzc1xuICApIHsgfVxufVxuIl19