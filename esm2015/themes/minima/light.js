import { shadowBuilder, StyleCollection, mergeThemes } from '@alyle/ui';
import { Color } from '@alyle/ui/color';
import { MinimaBase } from './base';
const contrast = new Color(0xffffff);
const shadow = new Color(0x333333);
export class MinimaLight extends MinimaBase {
    constructor() {
        super(...arguments);
        this.name = 'minima-light';
        this.primary = {
            default: new Color(0x6200EE),
            contrast
        };
        this.accent = {
            default: new Color(0xFF2997),
            contrast,
        };
        this.warn = {
            default: new Color(0xf5414e),
            contrast
        };
        this.action = {
            default: new Color(0, 0, 0, .6),
            contrast: new Color(0xffffff)
        };
        this.background = {
            default: new Color(0xfafafa),
            primary: {
                default: new Color(0xffffff),
                shadow
            },
            secondary: new Color(0xfafafa),
            tertiary: new Color(0xefefef),
        };
        this.hover = new Color(0, 0, 0, 0.04);
        this.paper = {
            default: new Color(0xffffff),
            shadow
        };
        this.disabled = {
            default: new Color(0, 0, 0, 0.27),
            contrast: new Color(0, 0, 0, 0.41)
        };
        this.text = {
            default: new Color(0, 0, 0, 0.87),
            primary: new Color(0, 0, 0, 0.87),
            secondary: new Color(0, 0, 0, 0.54),
            disabled: new Color(0, 0, 0, 0.26),
            hint: new Color(0, 0, 0, 0.38),
            dark: new Color(0, 0, 0, 0.87),
            light: new Color(0xffffff)
        };
        this.divider = new Color(0, 0, 0, 0.12);
        this.colorShadow = new Color(0x333333);
        this.shadow = new Color(0x333333);
        this.drawer = {
            backdrop: new Color(0, 0, 0, .6)
        };
        this.bar = new Color(0xf5f5f5);
        this.field = mergeThemes(this.field, {
            root: ({ container, fieldset, labelContainer, placeholder, label }) => (className) => `${className} ${container}:after,${className} ${fieldset},${className} ${labelContainer}{border-color:${new Color(0, 0, 0, 0.23)};}${className} ${label},${className} ${placeholder}{color:${new Color(0, 0, 0, 0.6)};}`,
            appearance: {
                filled: ({ container }) => (className) => `${className} ${container}{background-color:${new Color(0, 0, 0, 0.04)};}`
            }
        });
        this.snackBar = {
            root: new StyleCollection((className) => `${className}{background:${new Color(0x323232)};color:${new Color(0xffffff)};box-shadow:${shadowBuilder(4, new Color(0x323232))};}`)
        };
        this.tooltip = {
            root: new StyleCollection(() => (className) => `${className}{background:${new Color(50, 50, 50, 0.85)};color:${new Color(0xffffff)};}`)
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWx5bGUvdWkvdGhlbWVzL21pbmltYS8iLCJzb3VyY2VzIjpbImxpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxhQUFhLEVBQ2IsZUFBZSxFQUNmLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUtwQyxNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNuQyxNQUFNLE9BQU8sV0FBWSxTQUFRLFVBQVU7SUFBM0M7O1FBQ0UsU0FBSSxHQUFHLGNBQWMsQ0FBQztRQUN0QixZQUFPLEdBQUc7WUFDUixPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQzVCLFFBQVE7U0FDVCxDQUFDO1FBQ0YsV0FBTSxHQUFHO1lBQ1AsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUM1QixRQUFRO1NBQ1QsQ0FBQztRQUNGLFNBQUksR0FBRztZQUNMLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUM7WUFDNUIsUUFBUTtTQUNULENBQUM7UUFDRixXQUFNLEdBQUc7WUFDUCxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQy9CLFFBQVEsRUFBRSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUM7U0FDOUIsQ0FBQztRQUNGLGVBQVUsR0FBRztZQUNYLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUM7WUFDNUIsT0FBTyxFQUFFO2dCQUNQLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxR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LENBQUMsSUFBSTthQUM3SDtTQUNGLENBQUMsQ0FBQztRQUNILGFBQVEsR0FBb0I7WUFDMUIsSUFBSSxFQUFFLElBQUksZUFBZSxDQUFDLENBQUMsU0FBaUIsRUFBRSxFQUFFLENBQUMsR0FBRyxTQUFTLGVBQWUsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsYUFBYSxDQUFDLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDdEwsQ0FBQztRQUNGLFlBQU8sR0FBbUI7WUFDeEIsSUFBSSxFQUFFLElBQUksZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsU0FBaUIsRUFBRSxFQUFFLENBQUMsR0FBRyxTQUFTLGVBQWUsSUFBSSxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztTQUNoSixDQUFDO0lBQ0osQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVGhlbWVDb25maWcsXG4gIHNoYWRvd0J1aWxkZXIsXG4gIFN0eWxlQ29sbGVjdGlvbixcbiAgbWVyZ2VUaGVtZXMgfSBmcm9tICdAYWx5bGUvdWknO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICdAYWx5bGUvdWkvY29sb3InO1xuaW1wb3J0IHsgTWluaW1hQmFzZSB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBMeUZpZWxkVGhlbWUgfSBmcm9tICdAYWx5bGUvdWkvZmllbGQnO1xuaW1wb3J0IHsgTHlUb29sdGlwVGhlbWUgfSBmcm9tICdAYWx5bGUvdWkvdG9vbHRpcCc7XG5pbXBvcnQgeyBMeVNuYWNrQmFyVGhlbWUgfSBmcm9tICdAYWx5bGUvdWkvc25hY2stYmFyJztcblxuY29uc3QgY29udHJhc3QgPSBuZXcgQ29sb3IoMHhmZmZmZmYpO1xuY29uc3Qgc2hhZG93ID0gbmV3IENvbG9yKDB4MzMzMzMzKTtcbmV4cG9ydCBjbGFzcyBNaW5pbWFMaWdodCBleHRlbmRzIE1pbmltYUJhc2UgaW1wbGVtZW50cyBUaGVtZUNvbmZpZyB7XG4gIG5hbWUgPSAnbWluaW1hLWxpZ2h0JztcbiAgcHJpbWFyeSA9IHtcbiAgICBkZWZhdWx0OiBuZXcgQ29sb3IoMHg2MjAwRUUpLFxuICAgIGNvbnRyYXN0XG4gIH07XG4gIGFjY2VudCA9IHtcbiAgICBkZWZhdWx0OiBuZXcgQ29sb3IoMHhGRjI5OTcpLFxuICAgIGNvbnRyYXN0LFxuICB9O1xuICB3YXJuID0ge1xuICAgIGRlZmF1bHQ6IG5ldyBDb2xvcigweGY1NDE0ZSksXG4gICAgY29udHJhc3RcbiAgfTtcbiAgYWN0aW9uID0ge1xuICAgIGRlZmF1bHQ6IG5ldyBDb2xvcigwLCAwLCAwLCAuNiksXG4gICAgY29udHJhc3Q6IG5ldyBDb2xvcigweGZmZmZmZilcbiAgfTtcbiAgYmFja2dyb3VuZCA9IHtcbiAgICBkZWZhdWx0OiBuZXcgQ29sb3IoMHhmYWZhZmEpLCAvLyBzZWNvbmRhcnlcbiAgICBwcmltYXJ5OiB7XG4gICAgICBkZWZhdWx0OiBuZXcgQ29sb3IoMHhmZmZmZmYpLFxuICAgICAgc2hhZG93XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IG5ldyBDb2xvcigweGZhZmFmYSksXG4gICAgdGVydGlhcnk6IG5ldyBDb2xvcigweGVmZWZlZiksXG4gIH07XG4gIGhvdmVyID0gbmV3IENvbG9yKDAsIDAsIDAsIDAuMDQpO1xuICBwYXBlciA9IHtcbiAgICBkZWZhdWx0OiBuZXcgQ29sb3IoMHhmZmZmZmYpLFxuICAgIHNoYWRvd1xuICB9O1xuICBkaXNhYmxlZCA9IHtcbiAgICBkZWZhdWx0OiBuZXcgQ29sb3IoMCwgMCwgMCwgMC4yNyksXG4gICAgY29udHJhc3Q6IG5ldyBDb2xvcigwLCAwLCAwLCAwLjQxKVxuICB9O1xuICB0ZXh0ID0ge1xuICAgIGRlZmF1bHQ6IG5ldyBDb2xvcigwLCAwLCAwLCAwLjg3KSxcbiAgICBwcmltYXJ5OiBuZXcgQ29sb3IoMCwgMCwgMCwgMC44NyksXG4gICAgc2Vjb25kYXJ5OiBuZXcgQ29sb3IoMCwgMCwgMCwgMC41NCksXG4gICAgZGlzYWJsZWQ6IG5ldyBDb2xvcigwLCAwLCAwLCAwLjI2KSxcbiAgICBoaW50OiBuZXcgQ29sb3IoMCwgMCwgMCwgMC4zOCksXG4gICAgZGFyazogbmV3IENvbG9yKDAsIDAsIDAsIDAuODcpLFxuICAgIGxpZ2h0OiBuZXcgQ29sb3IoMHhmZmZmZmYpXG4gIH07XG4gIGRpdmlkZXIgPSBuZXcgQ29sb3IoMCwgMCwgMCwgMC4xMik7XG4gIGNvbG9yU2hhZG93ID0gbmV3IENvbG9yKDB4MzMzMzMzKTtcbiAgc2hhZG93ID0gbmV3IENvbG9yKDB4MzMzMzMzKTtcbiAgZHJhd2VyID0ge1xuICAgIGJhY2tkcm9wOiBuZXcgQ29sb3IoMCwgMCwgMCwgLjYpXG4gIH07XG4gIGJhciA9IG5ldyBDb2xvcigweGY1ZjVmNSk7XG4gIGZpZWxkOiBMeUZpZWxkVGhlbWUgPSBtZXJnZVRoZW1lczxMeUZpZWxkVGhlbWUsIEx5RmllbGRUaGVtZT4odGhpcy5maWVsZCwge1xuICAgIHJvb3Q6ICh7XG4gICAgICBjb250YWluZXIsXG4gICAgICBmaWVsZHNldCxcbiAgICAgIGxhYmVsQ29udGFpbmVyLFxuICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICBsYWJlbH0pID0+IChjbGFzc05hbWU6IHN0cmluZykgPT4gYCR7Y2xhc3NOYW1lfSAke2NvbnRhaW5lcn06YWZ0ZXIsJHtjbGFzc05hbWV9ICR7ZmllbGRzZXR9LCR7Y2xhc3NOYW1lfSAke2xhYmVsQ29udGFpbmVyfXtib3JkZXItY29sb3I6JHtuZXcgQ29sb3IoMCwgMCwgMCwgMC4yMyl9O30ke2NsYXNzTmFtZX0gJHtsYWJlbH0sJHtjbGFzc05hbWV9ICR7cGxhY2Vob2xkZXJ9e2NvbG9yOiR7bmV3IENvbG9yKDAsIDAsIDAsIDAuNil9O31gLFxuICAgIGFwcGVhcmFuY2U6IHtcbiAgICAgIGZpbGxlZDogKHsgY29udGFpbmVyIH0pID0+IChjbGFzc05hbWU6IHN0cmluZykgPT4gYCR7Y2xhc3NOYW1lfSAke2NvbnRhaW5lcn17YmFja2dyb3VuZC1jb2xvcjoke25ldyBDb2xvcigwLCAwLCAwLCAwLjA0KX07fWBcbiAgICB9XG4gIH0pO1xuICBzbmFja0JhcjogTHlTbmFja0JhclRoZW1lID0ge1xuICAgIHJvb3Q6IG5ldyBTdHlsZUNvbGxlY3Rpb24oKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBgJHtjbGFzc05hbWV9e2JhY2tncm91bmQ6JHtuZXcgQ29sb3IoMHgzMjMyMzIpfTtjb2xvcjoke25ldyBDb2xvcigweGZmZmZmZil9O2JveC1zaGFkb3c6JHtzaGFkb3dCdWlsZGVyKDQsIG5ldyBDb2xvcigweDMyMzIzMikpfTt9YClcbiAgfTtcbiAgdG9vbHRpcDogTHlUb29sdGlwVGhlbWUgPSB7XG4gICAgcm9vdDogbmV3IFN0eWxlQ29sbGVjdGlvbigoKSA9PiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IGAke2NsYXNzTmFtZX17YmFja2dyb3VuZDoke25ldyBDb2xvcig1MCwgNTAsIDUwLCAwLjg1KX07Y29sb3I6JHtuZXcgQ29sb3IoMHhmZmZmZmYpfTt9YClcbiAgfTtcbn1cbiJdfQ==