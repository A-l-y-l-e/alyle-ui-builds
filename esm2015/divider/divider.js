var LyDivider_1;
import * as tslib_1 from "tslib";
import { Directive, Input } from '@angular/core';
import { ThemeVariables, StyleRenderer, LyHostClass, toBoolean } from '@alyle/ui';
const STYLES = (theme) => (className) => `${className}{display:block;background-color:${theme.divider};height:1px;}`;
const ɵ0 = STYLES;
let LyDivider = LyDivider_1 = class LyDivider {
    constructor(_styleRenderer, _hostClass) {
        this._styleRenderer = _styleRenderer;
        this._hostClass = _hostClass;
    }
    /** Add indentation (72px) */
    set inset(val) {
        const newVal = this._inset = toBoolean(val);
        if (newVal) {
            this[0x1] = this._styleRenderer.add(`${LyDivider_1.и}--inset`, () => (className) => `${className}{margin-before:74px;}`, this[0x1]);
        }
        else {
            this._hostClass.remove(this[0x1]);
        }
    }
    get inset() {
        return this._inset;
    }
    ngOnInit() {
        this._styleRenderer.add(STYLES);
    }
};
LyDivider.и = 'LyDivider';
LyDivider.ctorParameters = () => [
    { type: StyleRenderer },
    { type: LyHostClass }
];
tslib_1.__decorate([
    Input()
], LyDivider.prototype, "inset", null);
LyDivider = LyDivider_1 = tslib_1.__decorate([
    Directive({
        selector: 'ly-divider',
        providers: [
            LyHostClass,
            StyleRenderer
        ]
    })
], LyDivider);
export { LyDivider };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGl2aWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbHlsZS91aS9kaXZpZGVyLyIsInNvdXJjZXMiOlsiZGl2aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFDTCxjQUFjLEVBQ2QsYUFBYSxFQUNiLFdBQVcsRUFDWCxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFL0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFxQixFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQWlCLEVBQUUsRUFBRSxDQUFDLEdBQUcsU0FBUyxtQ0FBbUMsS0FBSyxDQUFDLE9BQU8sZUFBZSxDQUFDOztBQVM3SSxJQUFhLFNBQVMsaUJBQXRCLE1BQWEsU0FBUztJQXVCcEIsWUFDVSxjQUE2QixFQUM3QixVQUF1QjtRQUR2QixtQkFBYyxHQUFkLGNBQWMsQ0FBZTtRQUM3QixlQUFVLEdBQVYsVUFBVSxDQUFhO0lBQzdCLENBQUM7SUF0QkwsNkJBQTZCO0lBRTdCLElBQUksS0FBSyxDQUFDLEdBQVk7UUFDcEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUMsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQ2pDLEdBQUcsV0FBUyxDQUFDLENBQUMsU0FBUyxFQUN2QixHQUFHLEVBQUUsQ0FBQyxDQUFDLFNBQWlCLEVBQUUsRUFBRSxDQUFDLEdBQUcsU0FBUyx1QkFBdUIsRUFDaEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUNWLENBQUM7U0FDSDthQUFNO1lBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDO0lBQ0QsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFRRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNGLENBQUE7QUE5QmlCLFdBQUMsR0FBRyxXQUFXLENBQUM7O1lBdUJOLGFBQWE7WUFDakIsV0FBVzs7QUFuQmpDO0lBREMsS0FBSyxFQUFFO3NDQVlQO0FBakJVLFNBQVM7SUFQckIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFlBQVk7UUFDdEIsU0FBUyxFQUFFO1lBQ1QsV0FBVztZQUNYLGFBQWE7U0FDZDtLQUNGLENBQUM7R0FDVyxTQUFTLENBK0JyQjtTQS9CWSxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBUaGVtZVZhcmlhYmxlcyxcbiAgU3R5bGVSZW5kZXJlcixcbiAgTHlIb3N0Q2xhc3MsXG4gIHRvQm9vbGVhbiB9IGZyb20gJ0BhbHlsZS91aSc7XG5cbmNvbnN0IFNUWUxFUyA9ICh0aGVtZTogVGhlbWVWYXJpYWJsZXMpID0+IChjbGFzc05hbWU6IHN0cmluZykgPT4gYCR7Y2xhc3NOYW1lfXtkaXNwbGF5OmJsb2NrO2JhY2tncm91bmQtY29sb3I6JHt0aGVtZS5kaXZpZGVyfTtoZWlnaHQ6MXB4O31gO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdseS1kaXZpZGVyJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgTHlIb3N0Q2xhc3MsXG4gICAgU3R5bGVSZW5kZXJlclxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEx5RGl2aWRlciBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHN0YXRpYyByZWFkb25seSDQuCA9ICdMeURpdmlkZXInO1xuICBwcml2YXRlIF9pbnNldDogYm9vbGVhbjtcblxuICAvKiogQWRkIGluZGVudGF0aW9uICg3MnB4KSAqL1xuICBASW5wdXQoKVxuICBzZXQgaW5zZXQodmFsOiBib29sZWFuKSB7XG4gICAgY29uc3QgbmV3VmFsID0gdGhpcy5faW5zZXQgPSB0b0Jvb2xlYW4odmFsKTtcbiAgICBpZiAobmV3VmFsKSB7XG4gICAgICB0aGlzWzB4MV0gPSB0aGlzLl9zdHlsZVJlbmRlcmVyLmFkZChcbiAgICAgICAgYCR7THlEaXZpZGVyLtC4fS0taW5zZXRgLFxuICAgICAgICAoKSA9PiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IGAke2NsYXNzTmFtZX17bWFyZ2luLWJlZm9yZTo3NHB4O31gLFxuICAgICAgICB0aGlzWzB4MV1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hvc3RDbGFzcy5yZW1vdmUodGhpc1sweDFdKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGluc2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9pbnNldDtcbiAgfVxuICBbMHgxXTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3N0eWxlUmVuZGVyZXI6IFN0eWxlUmVuZGVyZXIsXG4gICAgcHJpdmF0ZSBfaG9zdENsYXNzOiBMeUhvc3RDbGFzc1xuICApIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuX3N0eWxlUmVuZGVyZXIuYWRkKFNUWUxFUyk7XG4gIH1cbn1cbiJdfQ==