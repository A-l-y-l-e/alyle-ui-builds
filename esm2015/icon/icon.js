import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { FontClassOptions, LyIconService, SvgIcon } from './icon.service';
import { LyTheme2, mixinBg, mixinColor, mixinElevation, mixinOutlined, mixinRaised, mixinShadowColor, mixinStyleUpdater, Platform, ThemeVariables, keyframesUniqueId, LyHostClass } from '@alyle/ui';
import { take } from 'rxjs/operators';
const STYLE_PRIORITY = -2;
const STYLES = (theme) => {
    const loading = keyframesUniqueId.next();
    const { primary, secondary, tertiary } = theme.background;
    const lum = primary.default.luminance();
    let one = (lum < .5
        ? tertiary
        : secondary);
    let two = (lum < .5
        ? secondary
        : tertiary);
    one = one.darken(.25 * (lum < .5 ? -1 : 1.1));
    two = two.darken(.25 * (lum < .5 ? -1 : 1.1));
    return {
        $priority: STYLE_PRIORITY,
        $global: (className) => `@keyframes ${loading}{${className} 0%{background-position:200% 50%;}${className} 100%{background-position:-200% 50%;}}`,
        loading: (className) => `${className}{background:${`linear-gradient(270deg, ${one}, ${two}, ${two}, ${one})`};background-size:400% 400%;animation:${loading} 8s ease-in-out infinite;}`,
        defaultIcon: (className) => `${className}{border-radius:50px;}`
    };
};
const ɵ0 = STYLES;
/** @docs-private */
export class LyIconBase {
    constructor(_theme) {
        this._theme = _theme;
    }
}
/** @docs-private */
export const LyIconMixinBase = mixinStyleUpdater(mixinBg(mixinColor(mixinRaised(mixinOutlined(mixinElevation(mixinShadowColor(LyIconBase)))))));
let LyIcon = class LyIcon extends LyIconMixinBase {
    constructor(iconService, _el, _renderer, theme, _hostClass) {
        super(theme);
        this.iconService = iconService;
        this._el = _el;
        this._renderer = _renderer;
        this._hostClass = _hostClass;
        this.classes = this._theme.addStyleSheet(STYLES);
        this.setAutoContrast();
    }
    get icon() {
        return this._icon;
    }
    set icon(val) {
        this._icon = val;
        this._addDefaultIcon();
        if (Platform.isBrowser) {
            this._prepareSvgIcon(this.iconService.getSvg(val));
        }
    }
    get fontSet() {
        return this._fontSet;
    }
    set fontSet(key) {
        this._fontSet = key;
    }
    get fontIcon() {
        return this._fontIcon;
    }
    set fontIcon(key) {
        this._fontIcon = key;
    }
    /** @docs-private */
    get hostElement() {
        return this._el.nativeElement;
    }
    ngOnChanges() {
        if (this.fontSet || this.fontIcon) {
            this._updateFontClass();
        }
        this.updateStyle(this._el);
    }
    _isDefault() {
        return !(this.icon || this.fontSet);
    }
    _prepareSvgIcon(svgIcon) {
        if (svgIcon.svg) {
            this._appendChild(svgIcon.svg.cloneNode(true));
        }
        else {
            svgIcon.obs
                .pipe(take(1))
                .subscribe((svgElement) => {
                this._appendChild(svgElement.cloneNode(true));
            });
        }
    }
    _appendChild(svg) {
        this._cleanIcon();
        this._iconElement = svg;
        this._renderer.addClass(svg, this.iconService.classes.svg);
        this._renderer.appendChild(this._el.nativeElement, svg);
    }
    _addDefaultIcon() {
        this._hostClass.add(this.classes.defaultIcon);
        this._hostClass.add(this.classes.loading);
    }
    // private _appendDefaultSvgIcon() {
    //   const svgIcon = this.iconService._textToSvg(this.iconService.defaultSvgIcon) as SVGAElement;
    //   svgIcon.classList.add(this.classes.loading);
    //   this._appendChild(svgIcon);
    // }
    _updateClass() {
        if (this._isDefault() && this.iconService.defaultClass) {
            this._renderer.addClass(this._el.nativeElement, this.iconService.defaultClass);
        }
    }
    ngOnInit() {
        this._updateClass();
        this._theme.addStyle('lyIconRoot', (theme) => (`font-size:${theme.icon.fontSize};` +
            `width:1em;` +
            `position:relative;` +
            `height:1em;` +
            `display:inline-flex;` +
            `-webkit-box-sizing: content-box;` +
            `-moz-box-sizing: content-box;` +
            `box-sizing: content-box;`), this._el.nativeElement, undefined, STYLE_PRIORITY);
    }
    ngOnDestroy() {
        this._cleanIcon();
    }
    /**
     * run only browser
     * remove current icon
     */
    _cleanIcon() {
        const icon = this._iconElement;
        this._hostClass.remove(this.classes.defaultIcon);
        this._hostClass.remove(this.classes.loading);
        if (icon) {
            this._renderer.removeChild(this._el.nativeElement, icon);
            this._iconElement = undefined;
        }
    }
    _updateFontClass() {
        const currentClass = this._currentClass;
        const fontSetKey = this.fontSet;
        const icon = this.fontIcon;
        const el = this._el.nativeElement;
        const iconClass = this.iconService.getFontClass(fontSetKey);
        if (currentClass) {
            this._renderer.removeClass(el, currentClass);
        }
        if (this._previousFontSet) {
            if (this._previousFontSet.class) {
                this._renderer.removeClass(el, this._previousFontSet.class);
            }
        }
        if (iconClass) {
            this._previousFontSet = iconClass;
        }
        else {
            throw new Error(`Icon with key${fontSetKey} not found`);
        }
        this._currentClass = `${iconClass.prefix}${icon}`;
        this._renderer.addClass(el, this._currentClass);
    }
};
LyIcon.ctorParameters = () => [
    { type: LyIconService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: LyTheme2 },
    { type: LyHostClass }
];
tslib_1.__decorate([
    Input()
], LyIcon.prototype, "icon", null);
tslib_1.__decorate([
    Input()
], LyIcon.prototype, "fontSet", null);
tslib_1.__decorate([
    Input()
], LyIcon.prototype, "fontIcon", null);
LyIcon = tslib_1.__decorate([
    Directive({
        selector: 'ly-icon',
        inputs: [
            'bg',
            'color',
            'raised',
            'outlined',
            'elevation',
            'shadowColor',
        ],
        exportAs: 'lyIcon',
        providers: [
            LyHostClass
        ]
    })
], LyIcon);
export { LyIcon };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,