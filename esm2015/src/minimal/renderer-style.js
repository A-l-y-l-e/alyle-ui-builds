import * as tslib_1 from "tslib";
import { Injectable, ElementRef, Renderer2, Optional } from '@angular/core';
import { LyTheme2, ThemeRef } from '../theme/theme2.service';
import { TypeStyle } from '../theme/style';
const __CLASS_NAME__ = '__CLASS_NAME__';
let StyleRenderer = class StyleRenderer {
    constructor(_theme, _el, _renderer) {
        this._theme = _theme;
        this._renderer = _renderer;
        this._set = new Set();
        if (_el) {
            this._nEl = _el.nativeElement;
            this._set = new Set();
        }
    }
    /**
     * Build multiple styles and render them in the DOM.
     */
    renderSheet(styles) {
        return this._theme._createStyleContent2(styles, null, null, TypeStyle.Multiple);
    }
    /**
     * Render style and apply class name to host Component or Directive,
     * require provide `StyleRenderer` in your Component.
     * e.g.
     * @Component({
     *   ...
     *   providers: [ StyleRenderer ]
     * })
     */
    add(id, style, priority, oldClass) {
        const args = arguments;
        /** Class name or keyframe name */
        let className;
        let len = args.length;
        // clean
        if (len === 4 && args[3] == null) {
            len -= 1;
        }
        if (len === 3 && args[2] == null) {
            len -= 1;
        }
        if (len === 1) {
            className = this._theme._createStyleContent2(id, null, null, TypeStyle.LylStyle);
        }
        else if (len === 2) {
            if (typeof id === 'string') {
                className = this._theme._createStyleContent2(style, id, null, TypeStyle.LylStyle);
            }
            else if (typeof style === 'number') {
                className = this._theme._createStyleContent2(id, null, style, TypeStyle.LylStyle);
            }
            else {
                className = this._theme._createStyleContent2(id, null, null, TypeStyle.LylStyle);
                oldClass = style;
            }
        }
        else if (len === 3) {
            if (typeof id === 'string') {
                if (typeof priority === 'number') {
                    // (id, style, priority)
                    className = this._theme._createStyleContent2(style, id, priority, TypeStyle.LylStyle);
                }
                else {
                    // (id, style, oldClass)
                    className = this._theme._createStyleContent2(style, id, null, TypeStyle.LylStyle);
                    oldClass = priority;
                }
            }
            else {
                // (style, priority, oldClass)
                className = this._theme._createStyleContent2(id, null, style, TypeStyle.LylStyle);
                oldClass = priority;
            }
        }
        else if (len === 4) {
            className = this._theme._createStyleContent2(style, id, priority, TypeStyle.LylStyle);
        }
        if (this._nEl) {
            return this.updateClass(className, oldClass);
        }
        throw new Error(`StyleRenderer is required on the Component!\n`
            + `Add provider for StyleRenderer in Component or Directive:\n\n`
            + `e.g:\n\n`
            + `@Component({\n`
            + `  providers: [ StyleRenderer ]\n`
            + `})\n`);
    }
    /**
     * Only render style and return class name.
     */
    render(styleOrId, priorityOrStyle, priority) {
        if (typeof styleOrId === 'string') {
            return this._theme._createStyleContent2(priorityOrStyle, styleOrId, priority, TypeStyle.LylStyle);
        }
        return this._theme._createStyleContent2(styleOrId, null, priority, TypeStyle.LylStyle);
    }
    addClass(className) {
        if (!this._set.has(className)) {
            this._set.add(className);
            this._renderer.addClass(this._nEl, className);
        }
    }
    removeClass(className) {
        if (className && this._set.has(className)) {
            this._set.delete(className);
            this._renderer.removeClass(this._nEl, className);
        }
    }
    toggleClass(className, enabled) {
        if (enabled) {
            this.addClass(className);
        }
        else {
            this.removeClass(className);
        }
    }
    updateClass(newClassName, oldClassName) {
        this.removeClass(oldClassName);
        this.addClass(newClassName);
        return newClassName;
    }
};
StyleRenderer.ctorParameters = () => [
    { type: LyTheme2 },
    { type: ElementRef, decorators: [{ type: Optional }] },
    { type: Renderer2, decorators: [{ type: Optional }] }
];
StyleRenderer = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(1, Optional()),
    tslib_1.__param(2, Optional())
], StyleRenderer);
export { StyleRenderer };
export function Style(style, priority) {
    return function (target, propertyKey, descriptor) {
        const index = `${__CLASS_NAME__}${propertyKey}`;
        if (descriptor) {
            const set = descriptor.set;
            descriptor.set = function (val) {
                const that = this;
                if (val == null) {
                    that.sRenderer.removeClass(that[index]);
                }
                else {
                    that[index] = that.sRenderer.add(`${getComponentName(that)}--${propertyKey}-${val}`, style(val, that), priority || that.$priority || that.constructor.$priority || 0, that[index]);
                }
                set.call(that, val);
            };
        }
        else {
            Object.defineProperty(target, propertyKey, {
                configurable: true,
                enumerable: true,
                set(val) {
                    const that = this;
                    if (val == null) {
                        that.sRenderer.removeClass(that[index]);
                    }
                    else {
                        that[`_${propertyKey}`] = val;
                        that[index] = that.sRenderer.add(`${getComponentName(that)}--${propertyKey}-${val}`, style(val, that), priority || that.$priority || that.constructor.$priority || 0, that[index]);
                    }
                },
                get() {
                    return this[`_${propertyKey}`];
                }
            });
        }
    };
}
function getComponentName(comp) {
    return comp.constructor.Ð¸ || comp.constructor.name || 'unnamed';
}
//# sourceMappingURL=data:application/json;base64,