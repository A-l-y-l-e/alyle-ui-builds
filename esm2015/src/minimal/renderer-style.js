import * as tslib_1 from "tslib";
import { Injectable, ElementRef, Optional } from '@angular/core';
import { LyTheme2, ThemeRef } from '../theme/theme2.service';
import { LyHostClass } from './host-class';
import { TypeStyle } from '../theme/style';
let StyleRenderer = class StyleRenderer {
    constructor(_el, _theme, _hostClass) {
        this._theme = _theme;
        this._hostClass = _hostClass;
    }
    /**
     * Build multiple styles and render them in the DOM
     */
    addSheet(styles) {
        return this._theme._createStyleContent2(styles, null, null, TypeStyle.Multiple);
    }
    add(id, style, priority, oldClass) {
        const args = arguments;
        /** Class name or keyframe name */
        let className;
        let len = args.length;
        // clean
        if (len === 4 && args[3] == null) {
            len -= 1;
        }
        if (len === 3 && args[2] == null) {
            len -= 1;
        }
        if (len === 1) {
            className = this._theme._createStyleContent2(id, null, null, TypeStyle.LylStyle);
        }
        else if (len === 2) {
            if (typeof id === 'string') {
                className = this._theme._createStyleContent2(style, id, null, TypeStyle.LylStyle);
            }
            else if (typeof style === 'number') {
                className = this._theme._createStyleContent2(id, null, style, TypeStyle.LylStyle);
            }
            else {
                className = this._theme._createStyleContent2(id, null, null, TypeStyle.LylStyle);
                oldClass = style;
            }
        }
        else if (len === 3) {
            if (typeof id === 'string') {
                if (typeof priority === 'number') {
                    // (id, style, priority)
                    className = this._theme._createStyleContent2(style, id, priority, TypeStyle.LylStyle);
                }
                else {
                    // (id, style, oldClass)
                    className = this._theme._createStyleContent2(style, id, null, TypeStyle.LylStyle);
                    oldClass = priority;
                }
            }
            else {
                // (style, priority, oldClass)
                className = this._theme._createStyleContent2(id, null, style, TypeStyle.LylStyle);
                oldClass = priority;
            }
        }
        else if (len === 4) {
            className = this._theme._createStyleContent2(style, id, priority, TypeStyle.LylStyle);
        }
        if (this._hostClass) {
            return this._hostClass.update(className, oldClass);
        }
        throw new Error(`LyHostClass is required `
            + `to update classes.\n\n`
            + `Add LyHostClass to Component or Directive:\n\n`
            + `e.g:\n\n`
            + `@Component({\n`
            + `  providers: [ LyHostClass ]\n`
            + `})\n`);
    }
};
StyleRenderer.ctorParameters = () => [
    { type: ElementRef },
    { type: LyTheme2 },
    { type: LyHostClass, decorators: [{ type: Optional }] }
];
StyleRenderer = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(2, Optional())
], StyleRenderer);
export { StyleRenderer };
//# sourceMappingURL=data:application/json;base64,