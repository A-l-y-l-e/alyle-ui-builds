var LyStyle_1;
import * as tslib_1 from "tslib";
import { Directive, Input, SimpleChange } from '@angular/core';
import { StyleCollection } from '../parse';
import { eachMedia } from '../style-utils';
import { LyHostClass } from '../minimal/host-class';
import { StyleRenderer } from '../minimal/renderer-style';
const STYLE_PRIORITY = -0.5;
let LyStyle = LyStyle_1 = class LyStyle {
    constructor(_sr, _hClass) {
        this._sr = _sr;
        this._hClass = _hClass;
    }
    get lyStyle() {
        return this._lyStyle;
    }
    set lyStyle(val) {
        if (typeof val === 'function') {
            this._sr.add(val);
        }
        else {
            this._updateStyle(0xa, 'style', val, () => eachMedia(val, (v, media) => ((className) => `@media ${media || 'all'}{${className}{${v};}}`), new StyleCollection()));
        }
    }
    _updateStyle(index, styleId, simpleChange, style) {
        if (simpleChange) {
            const currentValue = simpleChange instanceof SimpleChange
                ? simpleChange.currentValue
                : simpleChange;
            if (currentValue != null) {
                this[index] = this._sr.add(`${LyStyle_1.и}--${styleId}-${currentValue}`, style, STYLE_PRIORITY, this[index]);
            }
            else {
                this._hClass.remove(this[index]);
            }
        }
    }
    ngOnChanges({ p, pf, pe, pt, pb, px, py, m, mf, me, mt, mb, mx, my, display, width, maxWidth }) {
        if (p) {
            const { currentValue } = p;
            this._updateStyle(0x1, 'p', p, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{padding:${to8Px(val)};}}`), new StyleCollection()));
        }
        if (pf) {
            const { currentValue } = pf;
            this._updateStyle(0x2, 'pf', pf, ({ after }) => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{padding-${after}:${to8Px(val)};}}`), new StyleCollection()));
        }
        if (pe) {
            const { currentValue } = pe;
            this._updateStyle(0x3, 'pe', pe, ({ before }) => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{padding-${before}:${to8Px(val)};}}`), new StyleCollection()));
        }
        if (pt) {
            const { currentValue } = pt;
            this._updateStyle(0x4, 'pt', pt, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{padding-top:${to8Px(val)};}}`), new StyleCollection()));
        }
        if (pb) {
            const { currentValue } = pb;
            this._updateStyle(0x5, 'pb', pb, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{padding-bottom:${to8Px(val)};}}`), new StyleCollection()));
        }
        if (px) {
            const { currentValue } = px;
            this._updateStyle(0x6, 'px', px, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{padding:0 ${typeof val === 'number'
                ? val * 8 + 'px'
                : val};}}`), new StyleCollection()));
        }
        if (py) {
            const { currentValue } = py;
            this._updateStyle(0x7, 'py', py, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{padding:${typeof val === 'number'
                ? val * 8 + 'px'
                : val} 0;}}`), new StyleCollection()));
        }
        if (m) {
            const { currentValue } = m;
            this._updateStyle(0x8, 'm', m, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{margin:${to8Px(val)};}}`), new StyleCollection()));
        }
        if (mf) {
            const { currentValue } = mf;
            this._updateStyle(0x9, 'mf', mf, ({ after }) => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{margin-${after}:${to8Px(val)};}}`), new StyleCollection()));
        }
        if (me) {
            const { currentValue } = me;
            this._updateStyle(0x10, 'me', me, ({ before }) => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{margin-${before}:${to8Px(val)};}}`), new StyleCollection()));
        }
        if (mt) {
            const { currentValue } = mt;
            this._updateStyle(0x11, 'mt', mt, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{margin-top:${to8Px(val)};}}`), new StyleCollection()));
        }
        if (mb) {
            const { currentValue } = mb;
            this._updateStyle(0x12, 'mb', mb, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{margin-bottom:${to8Px(val)};}}`), new StyleCollection()));
        }
        if (mx) {
            const { currentValue } = mx;
            this._updateStyle(0x13, 'mx', mx, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{margin:0 ${to8Px(val)};}}`), new StyleCollection()));
        }
        if (my) {
            const { currentValue } = my;
            this._updateStyle(0x14, 'my', my, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{margin:${to8Px(val)} 0;}}`), new StyleCollection()));
        }
        if (display) {
            const { currentValue } = display;
            this._updateStyle(0x15, 'display', display, () => eachMedia(currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{display:${val};}}`), new StyleCollection()));
        }
        this._updateStyle(0x16, 'width', width, () => eachMedia(width.currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{width:${transform(val)};}}`), new StyleCollection()));
        this._updateStyle(0x17, 'maxWidth', maxWidth, () => eachMedia(maxWidth.currentValue, (val, media) => ((className) => `@media ${media || 'all'}{${className}{max-width:${transform(val)};}}`), new StyleCollection()));
    }
};
/** @docs-private */
LyStyle.и = 'LyStyle';
LyStyle.ctorParameters = () => [
    { type: StyleRenderer },
    { type: LyHostClass }
];
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "p", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "pf", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "pe", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "pt", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "pb", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "px", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "py", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "m", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "mf", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "me", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "mt", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "mb", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "mx", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "my", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "display", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "width", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "maxWidth", void 0);
tslib_1.__decorate([
    Input()
], LyStyle.prototype, "lyStyle", null);
LyStyle = LyStyle_1 = tslib_1.__decorate([
    Directive({
        selector: `[lyStyle],
              [p], [pf], [pe], [pt], [pb], [px], [py],
              [m], [mf], [me], [mt], [mb], [mx], [my],
              [display],
              [maxWidth],
              [width]`,
        providers: [
            LyHostClass,
            StyleRenderer
        ]
    })
], LyStyle);
export { LyStyle };
/**
 * Convert to px if the value is a number, otherwise leave it as is
 * @docs-private
 */
function to8Px(val) {
    return typeof val === 'number'
        ? `${val * 8}px`
        : val;
}
function transform(value) {
    return value <= 1
        ? `${value * 100}%`
        : value;
}
//# sourceMappingURL=data:application/json;base64,