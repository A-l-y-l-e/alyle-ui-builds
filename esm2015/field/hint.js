import * as tslib_1 from "tslib";
import { Directive, Renderer2, ElementRef, Input, Inject } from '@angular/core';
import { LyTheme2 } from '@alyle/ui';
import { LY_FIELD_STYLES_TOKEN } from './field-styles-token';
/** LyHint */
const STYLE_PRIORITY = -2;
/** Hint text to be shown underneath the field. */
let LyHint = class LyHint {
    constructor(_renderer, _el, _theme, styles) {
        this._renderer = _renderer;
        this._el = _el;
        this._theme = _theme;
        this.classes = this._theme.addStyleSheet(styles, STYLE_PRIORITY);
        _renderer.addClass(_el.nativeElement, this.classes.hint);
    }
    set align(val) {
        if (val) {
            if (val === 'after') {
                this._renderer.addClass(this._el.nativeElement, this.classes.hintAfter);
                this._alignClass = this.classes.hintAfter;
            }
            else {
                this._renderer.addClass(this._el.nativeElement, this.classes.hintBefore);
                this._alignClass = this.classes.hintBefore;
            }
        }
        else if (this._alignClass) {
            this._renderer.removeClass(this._el.nativeElement, this._alignClass);
            this._alignClass = undefined;
        }
        this._align = val;
    }
    get align() {
        return this._align;
    }
};
LyHint.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: LyTheme2 },
    { type: undefined, decorators: [{ type: Inject, args: [LY_FIELD_STYLES_TOKEN,] }] }
];
tslib_1.__decorate([
    Input()
], LyHint.prototype, "align", null);
LyHint = tslib_1.__decorate([
    Directive({
        selector: 'ly-field > ly-hint'
    }),
    tslib_1.__param(3, Inject(LY_FIELD_STYLES_TOKEN))
], LyHint);
export { LyHint };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbHlsZS91aS9maWVsZC8iLCJzb3VyY2VzIjpbImhpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFJN0QsYUFBYTtBQUNiLE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRTFCLGtEQUFrRDtBQUlsRCxJQUFhLE1BQU0sR0FBbkIsTUFBYSxNQUFNO0lBeUJqQixZQUNVLFNBQW9CLEVBQ3BCLEdBQWUsRUFDZixNQUFnQixFQUNPLE1BQVc7UUFIbEMsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ2YsV0FBTSxHQUFOLE1BQU0sQ0FBVTtRQUd0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNqRSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBMUJELElBQUksS0FBSyxDQUFDLEdBQWdCO1FBQ3hCLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxHQUFHLEtBQUssT0FBTyxFQUFFO2dCQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN4RSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQzNDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ3pFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7YUFDNUM7U0FDRjthQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7U0FDOUI7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Q0FVRixDQUFBOztZQVJzQixTQUFTO1lBQ2YsVUFBVTtZQUNQLFFBQVE7NENBQ3ZCLE1BQU0sU0FBQyxxQkFBcUI7O0FBdEIvQjtJQURDLEtBQUssRUFBRTttQ0FlUDtBQXJCVSxNQUFNO0lBSGxCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxvQkFBb0I7S0FDL0IsQ0FBQztJQThCRyxtQkFBQSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQTtHQTdCckIsTUFBTSxDQWtDbEI7U0FsQ1ksTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBJbnB1dCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMeVRoZW1lMiB9IGZyb20gJ0BhbHlsZS91aSc7XG5pbXBvcnQgeyBMWV9GSUVMRF9TVFlMRVNfVE9LRU4gfSBmcm9tICcuL2ZpZWxkLXN0eWxlcy10b2tlbic7XG5cbmV4cG9ydCB0eXBlIEx5SGludEFsaWduID0gJ2JlZm9yZScgfCAnYWZ0ZXInO1xuXG4vKiogTHlIaW50ICovXG5jb25zdCBTVFlMRV9QUklPUklUWSA9IC0yO1xuXG4vKiogSGludCB0ZXh0IHRvIGJlIHNob3duIHVuZGVybmVhdGggdGhlIGZpZWxkLiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnbHktZmllbGQgPiBseS1oaW50J1xufSlcbmV4cG9ydCBjbGFzcyBMeUhpbnQge1xuICByZWFkb25seSBjbGFzc2VzOiB7XG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nXG4gIH07XG4gIHByaXZhdGUgX2FsaWduOiBMeUhpbnRBbGlnbjtcbiAgcHJpdmF0ZSBfYWxpZ25DbGFzcz86IHN0cmluZztcbiAgQElucHV0KClcbiAgc2V0IGFsaWduKHZhbDogTHlIaW50QWxpZ24pIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICBpZiAodmFsID09PSAnYWZ0ZXInKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY2xhc3Nlcy5oaW50QWZ0ZXIpO1xuICAgICAgICB0aGlzLl9hbGlnbkNsYXNzID0gdGhpcy5jbGFzc2VzLmhpbnRBZnRlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY2xhc3Nlcy5oaW50QmVmb3JlKTtcbiAgICAgICAgdGhpcy5fYWxpZ25DbGFzcyA9IHRoaXMuY2xhc3Nlcy5oaW50QmVmb3JlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYWxpZ25DbGFzcykge1xuICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5fZWwubmF0aXZlRWxlbWVudCwgdGhpcy5fYWxpZ25DbGFzcyk7XG4gICAgICB0aGlzLl9hbGlnbkNsYXNzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aGlzLl9hbGlnbiA9IHZhbDtcbiAgfVxuICBnZXQgYWxpZ24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FsaWduO1xuICB9XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBfdGhlbWU6IEx5VGhlbWUyLFxuICAgIEBJbmplY3QoTFlfRklFTERfU1RZTEVTX1RPS0VOKSBzdHlsZXM6IGFueVxuICAgICkge1xuICAgICAgdGhpcy5jbGFzc2VzID0gdGhpcy5fdGhlbWUuYWRkU3R5bGVTaGVldChzdHlsZXMsIFNUWUxFX1BSSU9SSVRZKTtcbiAgICAgIF9yZW5kZXJlci5hZGRDbGFzcyhfZWwubmF0aXZlRWxlbWVudCwgdGhpcy5jbGFzc2VzLmhpbnQpO1xuICB9XG59XG4iXX0=