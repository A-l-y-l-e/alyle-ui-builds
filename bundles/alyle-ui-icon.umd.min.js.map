{"version":3,"sources":["ng://@alyle/ui/icon/icon.service.ts","ng://@alyle/ui/icon/icon.ts","ng://@alyle/ui/icon/icon.module.ts"],"names":["styles","svg","width","height","fill","LyIconService","http","document","theme","this","Map","addStyleSheet","prototype","setSvg","key","url","_this","svgMap","has","set","obs","get","responseType","pipe","share","map","svgText","textToSvg","str","div","createElement","innerHTML","querySelector","getSvg","Injectable","args","providedIn","HttpClient","Optional","type","Inject","DOCUMENT","LyTheme2","Icon","iconService","elementRef","renderer","Object","defineProperty","_src","val","Platform","isBrowser","_prepareSvgIcon","_appendDefaultSvgIcon","_icon","_isDefault","src","icon","svgIcon","take","subscribe","svgElement","_cleanIcon","_appendChild","addClass","classes","appendChild","nativeElement","_updateClass","_defaultClass","ngOnInit","addStyle","fontSize","undefined","removeChild","Directive","selector","ElementRef","Renderer2","Input","LyIconModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, Optional, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\nimport { LyTheme2 } from '@alyle/ui';\n\nconst STYLE_PRIORITY = -2;\n\nconst styles = {\n  svg: {\n    width: 'inherit',\n    height: 'inherit',\n    fill: 'currentColor',\n    }\n};\n\nexport interface SvgIcon {\n  obs: Observable<SVGElement>;\n  loaded?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LyIconService {\n  private svgMap = new Map<string, SvgIcon>();\n  classes = this.theme.addStyleSheet(styles, 'lyIcon', STYLE_PRIORITY);\n  constructor(\n    private http: HttpClient,\n    @Optional() @Inject(DOCUMENT) private document: any,\n    private theme: LyTheme2\n  ) { }\n\n  setSvg(key: string, url: string) {\n    if (!this.svgMap.has(key)) {\n      url = `${url}.svg`;\n      this.svgMap.set(key,\n        {\n          obs: this.http.get(url, { responseType: 'text' })\n          .pipe(\n            share(),\n            map(svgText => this.textToSvg(svgText)),\n          )\n        }\n      );\n    }\n  }\n\n  textToSvg(str: string): SVGElement {\n    const div = this.document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n    return svg;\n  }\n\n  getSvg(key: string): SvgIcon {\n    return this.svgMap.get(key);\n  }\n}\n\n","import { Directive, Input, Renderer2, ElementRef, OnInit } from '@angular/core';\nimport { LyIconService, SvgIcon } from './icon.service';\nimport { take } from 'rxjs/operators';\nimport { Platform, LyTheme2 } from '@alyle/ui';\n\nconst STYLE_PRIORITY = -2;\n\n@Directive({\n  selector: 'ly-icon'\n})\nexport class Icon implements OnInit {\n  private _defaultClass = 'material-icons';\n  private _src: string;\n  private _icon: string;\n  @Input()\n  set src(val: string) {\n    this._src = val;\n    if (Platform.isBrowser) {\n      if (val) {\n        const key = `_url:${val}`;\n        this.iconService.setSvg(key, val);\n        this._prepareSvgIcon(this.iconService.getSvg(key));\n      }\n    } else {\n      this._appendDefaultSvgIcon();\n    }\n  }\n  get src() {\n    return this._src;\n  }\n\n  @Input() set icon(val: string) {\n    this._icon = val;\n    if (Platform.isBrowser) {\n      this._prepareSvgIcon(this.iconService.getSvg(val));\n    } else {\n      this._appendDefaultSvgIcon();\n    }\n  }\n  get icon() {\n    return this._icon;\n  }\n\n  constructor(\n    private iconService: LyIconService,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private theme: LyTheme2\n  ) { }\n\n  private _isDefault() {\n    return !(this.src || this.icon);\n  }\n\n  private _prepareSvgIcon(svgIcon: SvgIcon) {\n    svgIcon.obs\n      .pipe(\n        take(1)\n      )\n      .subscribe((svgElement) => {\n        this._cleanIcon();\n        this._appendChild(svgElement);\n      });\n  }\n\n  private _appendChild(svg: SVGElement) {\n    this.renderer.addClass(svg, this.iconService.classes.svg);\n    this.renderer.appendChild(this.elementRef.nativeElement, svg);\n  }\n\n  private _appendDefaultSvgIcon() {\n    this._appendChild(this.iconService.textToSvg('<svg viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"10\"></circle></svg>'));\n  }\n\n  private _updateClass() {\n    if (this._isDefault()) {\n      this.renderer.addClass(this.elementRef.nativeElement, this._defaultClass);\n    }\n  }\n\n  ngOnInit() {\n    this._updateClass();\n    this.theme.addStyle('lyIconRoot', theme => (\n      `font-size:${theme.icon.fontSize};` +\n      `width:1em;` +\n      `height:1em;` +\n      `display:inline-flex;`\n    ), this.elementRef.nativeElement, undefined, STYLE_PRIORITY);\n  }\n\n  /**\n   * run only browser\n   * remove current icon\n   */\n  private _cleanIcon() {\n    const icon = this.elementRef.nativeElement.querySelector('svg');\n    if (icon) {\n      this.renderer.removeChild(this.elementRef, icon);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Icon } from './icon';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [Icon],\n  exports: [Icon]\n})\nexport class LyIconModule { }\n"]}