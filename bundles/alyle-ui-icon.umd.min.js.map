{"version":3,"sources":["ng://@alyle/ui/icon/icon.service.ts","ng://@alyle/ui/icon/icon.ts","ng://@alyle/ui/icon/icon.module.ts"],"names":["styles","svg","width","height","fill","LyIconService","http","document","theme","this","Map","classes","addStyleSheet","defaultSvgIcon","_textToSvg","prototype","setSvg","key","url","_this","svgMap","has","svgIcon_1","obs","get","responseType","pipe","share","map","svgText","_cacheSvgIcon","set","str","div","createElement","innerHTML","querySelector","getSvg","Injectable","args","providedIn","HttpClient","Optional","type","Inject","DOCUMENT","LyTheme2","Icon","iconService","elementRef","renderer","Object","defineProperty","_src","val","Platform","isBrowser","_prepareSvgIcon","_appendDefaultSvgIcon","_icon","_isDefault","src","icon","svgIcon","_cleanIcon","_appendChild","cloneNode","take","subscribe","svgElement","addClass","appendChild","nativeElement","_updateClass","_defaultClass","ngOnInit","addStyle","fontSize","undefined","removeChild","Directive","selector","ElementRef","Renderer2","Input","LyIconModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, Optional, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\nimport { LyTheme2 } from '@alyle/ui';\n\nconst STYLE_PRIORITY = -2;\n\nconst styles = {\n  svg: {\n    width: 'inherit',\n    height: 'inherit',\n    fill: 'currentColor',\n  }\n};\n\nexport interface SvgIcon {\n  obs: Observable<SVGElement>;\n  svg?: SVGElement;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LyIconService {\n  private svgMap = new Map<string, SvgIcon>();\n  classes = this.theme.addStyleSheet(styles, STYLE_PRIORITY);\n  readonly defaultSvgIcon: SVGElement;\n  constructor(\n    private http: HttpClient,\n    @Optional() @Inject(DOCUMENT) private document: any,\n    private theme: LyTheme2\n  ) {\n    this.defaultSvgIcon = this._textToSvg('<svg viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"10\"></circle></svg>');\n  }\n\n  setSvg(key: string, url: string) {\n    if (!this.svgMap.has(key)) {\n      url = `${url}.svg`;\n      const svgIcon: SvgIcon = {\n        obs: this.http.get(url, { responseType: 'text' })\n        .pipe(\n          share(),\n          map(svgText => {\n            if (svgIcon.svg) {\n              return svgIcon.svg;\n            }\n            const svg = this._textToSvg(svgText);\n            this._cacheSvgIcon(svg, key);\n            return svg;\n          }),\n        )\n      };\n      this.svgMap.set(key, svgIcon);\n    }\n  }\n\n  private _textToSvg(str: string): SVGElement {\n    const div = this.document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n    return svg;\n  }\n\n  private _cacheSvgIcon(svg: SVGElement, key: string) {\n    const svgIconInfo = this.svgMap.get(key);\n    if (!svgIconInfo.svg) {\n      this.svgMap.get(key).svg = svg;\n    }\n  }\n\n  getSvg(key: string): SvgIcon {\n    return this.svgMap.get(key);\n  }\n}\n\n","import { Directive, Input, Renderer2, ElementRef, OnInit } from '@angular/core';\nimport { LyIconService, SvgIcon } from './icon.service';\nimport { take } from 'rxjs/operators';\nimport { Platform, LyTheme2 } from '@alyle/ui';\n\nconst STYLE_PRIORITY = -2;\n\n@Directive({\n  selector: 'ly-icon'\n})\nexport class Icon implements OnInit {\n  private _defaultClass = 'material-icons';\n  private _src: string;\n  private _icon: string;\n  @Input()\n  set src(val: string) {\n    this._src = val;\n    if (Platform.isBrowser) {\n      if (val) {\n        const key = `_url:${val}`;\n        this.iconService.setSvg(key, val);\n        this._prepareSvgIcon(this.iconService.getSvg(key));\n      }\n    } else {\n      this._appendDefaultSvgIcon();\n    }\n  }\n  get src() {\n    return this._src;\n  }\n\n  @Input() set icon(val: string) {\n    this._icon = val;\n    if (Platform.isBrowser) {\n      this._prepareSvgIcon(this.iconService.getSvg(val));\n    } else {\n      this._appendDefaultSvgIcon();\n    }\n  }\n  get icon() {\n    return this._icon;\n  }\n\n  constructor(\n    private iconService: LyIconService,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private theme: LyTheme2\n  ) { }\n\n  private _isDefault() {\n    return !(this.src || this.icon);\n  }\n\n  private _prepareSvgIcon(svgIcon: SvgIcon) {\n    if (svgIcon.svg) {\n      this._cleanIcon();\n      this._appendChild(svgIcon.svg.cloneNode(true) as SVGElement);\n    } else {\n      svgIcon.obs\n        .pipe(\n          take(1)\n        )\n        .subscribe((svgElement) => {\n          this._cleanIcon();\n          this._appendChild(svgElement.cloneNode(true) as SVGElement);\n        });\n    }\n  }\n\n  private _appendChild(svg: SVGElement) {\n    this.renderer.addClass(svg, this.iconService.classes.svg);\n    this.renderer.appendChild(this.elementRef.nativeElement, svg);\n  }\n\n  private _appendDefaultSvgIcon() {\n    this._appendChild(this.iconService.defaultSvgIcon);\n  }\n\n  private _updateClass() {\n    if (this._isDefault()) {\n      this.renderer.addClass(this.elementRef.nativeElement, this._defaultClass);\n    }\n  }\n\n  ngOnInit() {\n    this._updateClass();\n    this.theme.addStyle('lyIconRoot', theme => (\n      `font-size:${theme.icon.fontSize};` +\n      `width:1em;` +\n      `height:1em;` +\n      `display:inline-flex;`\n    ), this.elementRef.nativeElement, undefined, STYLE_PRIORITY);\n  }\n\n  /**\n   * run only browser\n   * remove current icon\n   */\n  private _cleanIcon() {\n    const icon = this.elementRef.nativeElement.querySelector('svg');\n    if (icon) {\n      this.renderer.removeChild(this.elementRef, icon);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Icon } from './icon';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [Icon],\n  exports: [Icon]\n})\nexport class LyIconModule { }\n"]}