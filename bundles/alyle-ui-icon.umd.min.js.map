{"version":3,"sources":["ng://@alyle/ui/icon/icon.service.ts","ng://@alyle/ui/icon/icon.ts","ng://@alyle/ui/icon/icon.module.ts"],"names":["LyIconService","http","document","coreTheme","this","Map","svg","setUpStyle","","prototype","setSvg","key","url","_this","svgMap","has","set","obs","get","responseType","pipe","share","map","svgText","textToSvg","str","div","createElement","innerHTML","querySelector","getSvg","Injectable","args","providedIn","HttpClient","Optional","type","Inject","DOCUMENT","CoreTheme","Icon","iconService","elementRef","renderer","theme","Object","defineProperty","root","config","fontSize","_src","val","Platform","isBrowser","_prepareSvgIcon","_appendDefaultSvgIcon","_icon","_isDefault","src","icon","svgIcon","take","subscribe","svgElement","_cleanIcon","_appendChild","addClass","classes","appendChild","nativeElement","_updateClass","_defaultClass","ngOnInit","ngOnChanges","changes","removeChild","Directive","selector","ElementRef","Renderer2","LyTheme2","Input","LyIconModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"uiBAAA,IAAAA,EAAA,WA4BE,SAAAA,EACUC,EAC8BC,EAC9BC,GAFAC,KAAAH,KAAAA,EAC8BG,KAAAF,SAAAA,EAC9BE,KAAAD,UAAAA,cAfO,IAAIE,iBACX,CACRC,IAAKF,KAAKD,UAAUI,WAClB,OAAQ,CACNC,GAAI,WAAM,MAAA,6DAchBR,EAAAS,UAAAC,OAAA,SAAOC,EAAaC,GAApB,IAAAC,EAAAT,KACOA,KAAKU,OAAOC,IAAIJ,KACnBC,GAAY,OACZR,KAAKU,OAAOE,IAAIL,EACd,CACEM,IAAKb,KAAKH,KAAKiB,IAAIN,EAAK,CAAEO,aAAc,SACvCC,KACCC,EAAAA,QACAC,EAAAA,IAAI,SAAAC,GAAW,OAAAV,EAAKW,UAAUD,UAOxCvB,EAAAS,UAAAe,UAAA,SAAUC,GACR,IAAMC,EAAMtB,KAAKF,SAASyB,cAAc,OAGxC,OAFAD,EAAIE,UAAYH,EACJC,EAAIG,cAAc,QAIhC7B,EAAAS,UAAAqB,OAAA,SAAOnB,GACL,OAAOP,KAAKU,OAAOI,IAAIP,wBA7C1BoB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAZLC,EAAAA,8CA6BJC,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAML,KAAA,CAACM,EAAAA,mBAzBfC,EAAAA,uLALT,GCAAC,EAAA,WAuDE,SAAAA,EACUC,EACAC,EACAC,EACAC,GAHAxC,KAAAqC,YAAAA,EACArC,KAAAsC,WAAAA,EACAtC,KAAAuC,SAAAA,EACAvC,KAAAwC,MAAAA,qBAlDc,wBAGxBC,OAAAC,eAAIN,EAAA/B,UAAA,UAAO,KAAX,WAAA,IAAAI,EAAAT,KACE,MAAO,CACL2C,KAAM3C,KAAKwC,MAAMrC,WACf,OAAQ,CACNC,GAAI,WAAM,MACR,aAAaK,EAAK+B,MAAMI,OAAM,KAAMC,SAAQ,kFAStDJ,OAAAC,eACIN,EAAA/B,UAAA,MAAG,KAYP,WACE,OAAOL,KAAK8C,UAdd,SACQC,GAEN,GADA/C,KAAK8C,KAAOC,EACRC,EAAAA,SAASC,WACX,GAAIF,EAAK,CACP,IAAMxC,EAAM,QAAQwC,EACpB/C,KAAKqC,YAAY/B,OAAOC,EAAKwC,GAC7B/C,KAAKkD,gBAAgBlD,KAAKqC,YAAYX,OAAOnB,UAG/CP,KAAKmD,yDAOTV,OAAAC,eAAaN,EAAA/B,UAAA,OAAI,KAQjB,WACE,OAAOL,KAAKoD,WATd,SAAkBL,GAChB/C,KAAKoD,MAAQL,EACTC,EAAAA,SAASC,UACXjD,KAAKkD,gBAAgBlD,KAAKqC,YAAYX,OAAOqB,IAE7C/C,KAAKmD,yDAcDf,EAAA/B,UAAAgD,sBACN,QAASrD,KAAKsD,KAAOtD,KAAKuD,OAGpBnB,EAAA/B,UAAA6C,yBAAgBM,cACtBA,EAAQ3C,IACLG,KACCyC,EAAAA,KAAK,IAENC,UAAU,SAACC,GACVlD,EAAKmD,aACLnD,EAAKoD,aAAaF,MAIhBvB,EAAA/B,UAAAwD,sBAAa3D,GACnBF,KAAKuC,SAASuB,SAAS5D,EAAKF,KAAKqC,YAAY0B,QAAQ7D,KACrDF,KAAKuC,SAASyB,YAAYhE,KAAKsC,WAAW2B,cAAe/D,IAGnDkC,EAAA/B,UAAA8C,iCACNnD,KAAK6D,aAAa7D,KAAKqC,YAAYjB,UAAU,6EAGvCgB,EAAA/B,UAAA6D,wBACFlE,KAAKqD,cACPrD,KAAKuC,SAASuB,SAAS9D,KAAKsC,WAAW2B,cAAejE,KAAKmE,gBAI/D/B,EAAA/B,UAAA+D,SAAA,WACEpE,KAAKuC,SAASuB,SAAS9D,KAAKsC,WAAW2B,cAAejE,KAAK+D,QAAQpB,MACnE3C,KAAKkE,gBAGP9B,EAAA/B,UAAAgE,YAAA,SAAYC,GACVtE,KAAKkE,gBAOC9B,EAAA/B,UAAAuD,sBACN,IAAML,EAAOvD,KAAKsC,WAAW2B,cAAcxC,cAAc,OACrD8B,GACFvD,KAAKuC,SAASgC,YAAYvE,KAAKsC,WAAYiB,wBAvGhDiB,EAAAA,UAAS5C,KAAA,CAAC,CACT6C,SAAU,uDALH7E,SAD6B8E,EAAAA,kBAAXC,EAAAA,iBAGRC,EAAAA,yCAuBhBC,EAAAA,oBAiBAA,EAAAA,WA3CH,GCAAC,EAAA,oDAICC,EAAAA,SAAQnD,KAAA,CAAC,CACRoD,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAAC9C,GACf+C,QAAS,CAAC/C,SATZ","sourcesContent":["import { Injectable, Optional, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\nimport { CoreTheme } from '@alyle/ui';\n\nexport interface SvgIcon {\n  obs: Observable<SVGElement>;\n  loaded?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LyIconService {\n  private svgMap = new Map<string, SvgIcon>();\n  classes = {\n    svg: this.coreTheme.setUpStyle(\n      '_svg', {\n        '': () => (\n          `width:inherit;` +\n          `height:inherit;` +\n          `fill:currentColor;`\n        )\n      }\n    )\n  };\n  constructor(\n    private http: HttpClient,\n    @Optional() @Inject(DOCUMENT) private document: any,\n    private coreTheme: CoreTheme\n  ) { }\n\n  setSvg(key: string, url: string) {\n    if (!this.svgMap.has(key)) {\n      url = `${url}.svg`;\n      this.svgMap.set(key,\n        {\n          obs: this.http.get(url, { responseType: 'text' })\n          .pipe(\n            share(),\n            map(svgText => this.textToSvg(svgText)),\n          )\n        }\n      );\n    }\n  }\n\n  textToSvg(str: string): SVGElement {\n    const div = this.document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n    return svg;\n  }\n\n  getSvg(key: string): SvgIcon {\n    return this.svgMap.get(key);\n  }\n}\n\n","import { Directive, Input, Renderer2, ElementRef, OnChanges, SimpleChanges, OnInit } from '@angular/core';\nimport { LyIconService, SvgIcon } from './icon.service';\nimport { take } from 'rxjs/operators';\nimport { Platform, LyTheme2 } from '@alyle/ui';\n\n@Directive({\n  selector: 'ly-icon'\n})\nexport class Icon implements OnChanges, OnInit {\n  private _defaultClass = 'material-icons';\n  private _src: string;\n  private _icon: string;\n  get classes() {\n    return {\n      root: this.theme.setUpStyle(\n        'root', {\n          '': () => (\n            `font-size:${this.theme.config.icon.fontSize};` +\n            `width:1em;` +\n            `height:1em;` +\n            `display:inline-flex;`\n          )\n        }\n      )\n    };\n  }\n  @Input()\n  set src(val: string) {\n    this._src = val;\n    if (Platform.isBrowser) {\n      if (val) {\n        const key = `_url:${val}`;\n        this.iconService.setSvg(key, val);\n        this._prepareSvgIcon(this.iconService.getSvg(key));\n      }\n    } else {\n      this._appendDefaultSvgIcon();\n    }\n  }\n  get src() {\n    return this._src;\n  }\n\n  @Input() set icon(val: string) {\n    this._icon = val;\n    if (Platform.isBrowser) {\n      this._prepareSvgIcon(this.iconService.getSvg(val));\n    } else {\n      this._appendDefaultSvgIcon();\n    }\n  }\n  get icon() {\n    return this._icon;\n  }\n\n  constructor(\n    private iconService: LyIconService,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private theme: LyTheme2\n  ) { }\n\n  private _isDefault() {\n    return !(this.src || this.icon);\n  }\n\n  private _prepareSvgIcon(svgIcon: SvgIcon) {\n    svgIcon.obs\n      .pipe(\n        take(1)\n      )\n      .subscribe((svgElement) => {\n        this._cleanIcon();\n        this._appendChild(svgElement);\n      });\n  }\n\n  private _appendChild(svg: SVGElement) {\n    this.renderer.addClass(svg, this.iconService.classes.svg);\n    this.renderer.appendChild(this.elementRef.nativeElement, svg);\n  }\n\n  private _appendDefaultSvgIcon() {\n    this._appendChild(this.iconService.textToSvg('<svg viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"10\"></circle></svg>'));\n  }\n\n  private _updateClass() {\n    if (this._isDefault()) {\n      this.renderer.addClass(this.elementRef.nativeElement, this._defaultClass);\n    }\n  }\n\n  ngOnInit() {\n    this.renderer.addClass(this.elementRef.nativeElement, this.classes.root);\n    this._updateClass();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._updateClass();\n  }\n\n  /**\n   * run only browser\n   * remove current icon\n   */\n  private _cleanIcon() {\n    const icon = this.elementRef.nativeElement.querySelector('svg');\n    if (icon) {\n      this.renderer.removeChild(this.elementRef, icon);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Icon } from './icon';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [Icon],\n  exports: [Icon]\n})\nexport class LyIconModule { }\n"]}