{"version":3,"sources":["ng://@alyle/ui/grid/grid.ts","ng://@alyle/ui/grid/grid.module.ts"],"names":["COL_VALUES","styles","root","width","display","flexWrap","boxSizing","LyGrid","mediaQueries","theme","elementRef","this","addStyleSheet","nativeElement","classList","add","classes","Object","defineProperty","prototype","_spacing","val","_this","spacing","_spacingClass","addStyle","spacingStyles_1","eachMedia","value","media","len","padding","_negativeMarginClass","negativeMarginStyles_1","negativeMarginstyles","margin","Directive","args","selector","Optional","type","Inject","LY_MEDIA_QUERIES","LyTheme2","ElementRef","Input","LyGridCol","gridContainer","el","Error","_col","col","_colClass","getColStyle","colStyles_1","newColStyles","ngOnInit","_updateSpacing","spacingClass","maxWidth","getColVal","flexBasis","flexGrow","LyGridModule","NgModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, Optional, Inject, OnInit } from '@angular/core';\nimport { LyTheme2, eachMedia } from '@alyle/ui';\nimport { LY_MEDIA_QUERIES } from '@alyle/ui/responsive';\n\nconst COL_VALUES = { };\n\nconst styles = ({\n  root: {\n    width: '100%',\n    display: 'flex',\n    flexWrap: 'wrap',\n    boxSizing: 'border-box'\n  }\n});\n\n/**\n * example:\n * <ly-grid container [spacing]=\"'16 8@XSmall'\">\n *   <ly-grid item [col]=\"'6 12@XSmall'\">\n *     <div>6 12@XSmall</div>\n *   </ly-grid>\n *   <ly-grid item [col]=\"'6 12@XSmall'\">\n *     <div>6 12@XSmall</div>\n *   </ly-grid>\n * </ly-grid>\n */\n@Directive({\n  selector: 'ly-grid[container]'\n})\nexport class LyGrid {\n  /**\n   * Styles\n   * @ignore\n   */\n  classes = this.theme.addStyleSheet(styles, 'lyGrid');\n  private _spacing: string | number;\n  private _spacingClass: string;\n  private _negativeMarginClass: string;\n\n  /**\n   * Defines the space between the component with the `item` attribute.\n   */\n  @Input()\n  get spacing(): string | number {\n    return this._spacing;\n  }\n  set spacing(val: string | number) {\n    if (val !== this.spacing) {\n      this._spacing = val;\n      this._spacingClass = this.theme.addStyle(`lyGrid-spacing:${val}`, () => {\n        if (typeof val === 'number') {\n          return `padding:${val / 2}px;`;\n        } else {\n          const spacingStyles: {\n            padding?: string\n          } = {};\n          eachMedia(val, (value, media, len) => {\n            const padding = `${(+value) / 2}px`;\n            if (len) {\n              spacingStyles[`@media ${this.mediaQueries[media]}`] = {\n                padding\n              };\n            } else {\n              spacingStyles.padding = padding;\n            }\n          });\n          return spacingStyles as any;\n        }\n      });\n      this._negativeMarginClass = this.theme.addStyle(`lyGrid-negative-margin:${val}`, () => {\n        if (typeof val === 'number') {\n          return `margin:${val / -2}px;width: calc(100% + ${val}px);`;\n        } else {\n          let negativeMarginStyles: {\n            margin?: string\n            width?: string\n          };\n          eachMedia(val, (value, media, len) => {\n            const negativeMarginstyles = {\n              margin: `${(-value) / 2}px`,\n              width: `calc(100% + ${value}px)`\n            };\n            if (len) {\n              if (!negativeMarginStyles) {\n                negativeMarginStyles = {};\n              }\n              negativeMarginStyles[`@media ${this.mediaQueries[media]}`] = negativeMarginstyles;\n            } else {\n              negativeMarginStyles = negativeMarginstyles;\n            }\n          });\n          return negativeMarginStyles as any;\n        }\n      }, this.elementRef.nativeElement, this._negativeMarginClass);\n    }\n  }\n\n  get spacingClass() {\n    return this._spacingClass;\n  }\n\n  constructor(\n    @Optional() @Inject(LY_MEDIA_QUERIES) private mediaQueries: any,\n    private theme: LyTheme2,\n    private elementRef: ElementRef,\n  ) {\n    this.elementRef.nativeElement.classList.add(this.classes.root);\n  }\n}\n\n@Directive({\n  selector: 'ly-grid[item]'\n})\nexport class LyGridCol implements OnInit {\n  private _col: string | number;\n  private _colClass: string;\n\n  @Input()\n  get col(): string | number {\n    return this._col;\n  }\n  set col(val: string | number) {\n    if (val !== this.col) {\n      this._colClass = this.theme.addStyle(`lyGrid-negative-margin:${val}`, () => {\n        if (typeof val === 'number') {\n          return getColStyle(val);\n        } else {\n          let colStyles: {\n            maxWidth?: string | number\n            flexBasis?: string | number\n            flexGrow?: number\n          };\n          eachMedia(val, (value, media, len) => {\n            const newColStyles = getColStyle(+value);\n            if (len) {\n              if (!colStyles) {\n                colStyles = {};\n              }\n              colStyles[`@media ${this.mediaQueries[media]}`] = newColStyles;\n            } else {\n              colStyles = newColStyles;\n            }\n          });\n          return colStyles as any;\n        }\n      }, this.el.nativeElement, this._colClass);\n    }\n  }\n\n  constructor(\n    @Optional() @Inject(LY_MEDIA_QUERIES) private mediaQueries: any,\n    private gridContainer: LyGrid,\n    private el: ElementRef,\n    private theme: LyTheme2\n  ) {\n    if (!gridContainer) {\n      throw new Error(`Rquire`);\n    }\n  }\n\n  ngOnInit() {\n    this._updateSpacing();\n  }\n\n  private _updateSpacing() {\n    if (this.gridContainer.spacingClass) {\n      this.el.nativeElement.classList.add(this.gridContainer.spacingClass);\n    }\n  }\n\n}\n\nfunction getColStyle(val: number) {\n  return {\n    maxWidth: val ? getColVal(val) : '100%',\n    flexBasis: val ? getColVal(val) : 0,\n    flexGrow: val ? 0 : 1\n  };\n}\n\nfunction getColVal(val: string | number): string {\n  return val in COL_VALUES\n              ? COL_VALUES[val]\n              : COL_VALUES[val] = `${+val * 100 / 12}%`;\n}\n","import { NgModule } from '@angular/core';\nimport { LyGrid, LyGridCol } from './grid';\n\n@NgModule({\n  exports: [LyGrid, LyGridCol],\n  declarations: [LyGrid, LyGridCol]\n})\nexport class LyGridModule { }\n"]}