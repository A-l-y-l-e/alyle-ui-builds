{"version":3,"sources":["ng://@alyle/ui/grid/grid.ts","ng://@alyle/ui/grid/grid.module.ts"],"names":["STYLE_PRIORITY","COL_VALUES","ALIGN_ALIAS","rowReverse","columnReverse","wrapReverse","start","end","between","around","evenly","styles","root","width","display","flexWrap","boxSizing","LyGrid","theme","el","this","classes","addStyleSheet","nativeElement","classList","add","Object","defineProperty","prototype","_spacingX","val","spacingX","_createSpacingClass","_spacingY","spacingY","_spacing","spacing","xy","x","y","newSpacingClass","addStyle","spacingStyles","eachMedia","value","media","valuePadding","padding","getBreakpoint","undefined","_spacingClass","_spacingXClass","_spacingYClass","_negativeMarginClass","negativeMarginStyles","len","valueMargin","negativeMarginstyles","margin","_justify","justify","_justifyClass","justifyStyles","isMedia","newJustifyStyles","justifyContent","_direction","direction","_directionClass","directionStyles","newDirectionStyles","flexDirection","_alignItems","_alignItemsClass","alignItemsStyles","newAlignItemsStyles","alignItems","Directive","args","selector","LyTheme2","ElementRef","Input","LyGridItem","gridContainer","Error","_col","col","_colClass","getColStyle","newColStyles","colStyles_1","_order","order","_orderClass","orderStyles","newOrderStyles","ngOnInit","_updateSpacing","maxWidth","getColVal","flexBasis","flexGrow","LyGridModule","NgModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, OnInit } from '@angular/core';\nimport { LyTheme2, eachMedia, ThemeVariables } from '@alyle/ui';\n\nconst STYLE_PRIORITY = -1;\n\n/** @docs-private */\nconst COL_VALUES = { };\n\nconst ALIGN_ALIAS = {\n  rowReverse: 'row-reverse',\n  columnReverse: 'column-reverse',\n  wrapReverse: 'wrap-reverse',\n  start: 'flex-start',\n  end: 'flex-end',\n  between: 'space-between',\n  around: 'space-around',\n  evenly: 'space-evenly',\n};\n\nexport type AlignItems = 'start' | 'center' | 'end' | 'stretch' | 'baseline';\n\nconst styles = ({\n  root: {\n    width: '100%',\n    display: 'flex',\n    flexWrap: 'wrap',\n    boxSizing: 'border-box'\n  }\n});\n\nexport type Justify = 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';\nexport type Direction = 'row' | 'rowReverse' | 'column' | 'columnReverse';\n\n/**\n * Grid container\n * example:\n * <ly-grid container [spacing]=\"'16 8@XSmall'\">\n *   <ly-grid item [col]=\"'6 12@XSmall'\">\n *     <div>6 12@XSmall</div>\n *   </ly-grid>\n *   <ly-grid item [col]=\"'6 12@XSmall'\">\n *     <div>6 12@XSmall</div>\n *   </ly-grid>\n * </ly-grid>\n */\n@Directive({\n  selector: 'ly-grid[container]'\n})\nexport class LyGrid {\n  /**\n   * Styles\n   * @docs-private\n   */\n  readonly classes = this.theme.addStyleSheet(styles, STYLE_PRIORITY);\n\n  private _spacing: string | number;\n  _spacingClass: string;\n\n  private _spacingX: string | number;\n  _spacingXClass: string;\n\n  private _spacingY: string | number;\n  _spacingYClass: string;\n\n\n  private _negativeMarginClass: string;\n\n  private _justify: Justify;\n  private _justifyClass: string;\n\n  private _direction: Direction;\n  private _directionClass: string;\n\n  private _alignItems: AlignItems;\n  private _alignItemsClass: string;\n\n  @Input()\n  get spacingX(): string | number {\n    return this._spacingX;\n  }\n  set spacingX(val: string | number) {\n    if (val !== this.spacingX) {\n      this._spacingX = val;\n      this._createSpacingClass(null, val);\n    }\n  }\n\n  @Input()\n  get spacingY(): string | number {\n    return this._spacingY;\n  }\n  set spacingY(val: string | number) {\n    if (val !== this.spacingY) {\n      this._spacingY = val;\n      this._createSpacingClass(null, null, val);\n    }\n  }\n\n  /**\n   * Defines the space between the component with the `item` attribute.\n   * Support breakpoints\n   */\n  @Input()\n  get spacing(): string | number {\n    return this._spacing;\n  }\n  set spacing(val: string | number) {\n    if (val !== this.spacing) {\n      this._spacing = val;\n      this._createSpacingClass(val);\n    }\n  }\n\n  /**\n   * Only one param must be defined\n   */\n  private _createSpacingClass(xy?: string | number, x?: string | number, y?: string | number) {\n    const newSpacingClass = this.theme.addStyle(`lyGrid-spacing:${xy}Â·${x}Â·${y}`, (theme: ThemeVariables) => {\n      const val = xy || x || y;\n      const spacingStyles: {\n        padding?: string\n      } = {};\n      eachMedia(val, (value, media) => {\n        const valuePadding = `${(+value) / 2}px`;\n        const padding = xy != null\n          ? valuePadding\n          : x != null\n            ? `0 ${valuePadding}`\n            : `${valuePadding} 0`;\n        if (media) {\n          spacingStyles[theme.getBreakpoint(media)] = {\n            padding\n          };\n        } else {\n          spacingStyles.padding = padding;\n        }\n      });\n      return spacingStyles;\n    }, undefined, undefined, STYLE_PRIORITY);\n\n    if (xy) {\n      this._spacingClass = newSpacingClass;\n    } else {\n      if (x) {\n        this._spacingXClass = newSpacingClass;\n      }\n      if (y) {\n        this._spacingYClass = newSpacingClass;\n      }\n    }\n\n    this._negativeMarginClass = this.theme.addStyle(`lyGrid-negative-margin:${xy}Â·${x}Â·${y}`, (theme: ThemeVariables) => {\n      const val = xy || x || y;\n      let negativeMarginStyles: {\n        margin?: string\n        width?: string\n      };\n      eachMedia(val, (value, media, len) => {\n        const valueMargin = `${(-value) / 2}px`;\n        const margin = xy != null\n          ? valueMargin\n          : x != null\n            ? `0 ${valueMargin}`\n            : `${valueMargin} 0`;\n        const negativeMarginstyles: {\n          margin: string\n          width?: string\n        } = { margin };\n\n        if (xy != null || x != null) {\n          negativeMarginstyles.width = `calc(100% + ${value}px)`;\n        }\n        if (len) {\n          if (!negativeMarginStyles) {\n            negativeMarginStyles = {};\n          }\n          negativeMarginStyles[theme.getBreakpoint(media)] = negativeMarginstyles;\n        } else {\n          negativeMarginStyles = negativeMarginstyles;\n        }\n      });\n      return negativeMarginStyles;\n    }, this.el.nativeElement, this._negativeMarginClass, STYLE_PRIORITY);\n  }\n\n  /**\n   * Defines the justify-content style property.\n   * Support breakpoints\n   */\n  @Input()\n  get justify(): Justify {\n    return this._justify;\n  }\n  set justify(val: Justify) {\n    if (val !== this.justify) {\n      this._justify = val;\n      this._justifyClass = this.theme.addStyle(`lyGrid-justify:${val}`, (theme: ThemeVariables) => {\n        let justifyStyles: {\n          justifyContent?: string\n        };\n        eachMedia(val, (value, media, isMedia) => {\n          const newJustifyStyles = {\n            justifyContent: value in ALIGN_ALIAS\n            ? ALIGN_ALIAS[value]\n            : value\n          };\n          if (isMedia) {\n            if (!justifyStyles) {\n              justifyStyles = {};\n            }\n            justifyStyles[theme.getBreakpoint(media)] = newJustifyStyles;\n          } else {\n            justifyStyles = newJustifyStyles;\n          }\n        });\n        return justifyStyles;\n      }, this.el.nativeElement, this._justifyClass, STYLE_PRIORITY);\n    }\n  }\n\n  /**\n   * Defines the justify-content style property.\n   * Support breakpoints\n   */\n  @Input()\n  get direction(): Direction {\n    return this._direction;\n  }\n  set direction(val: Direction) {\n    if (val !== this.direction) {\n      this._direction = val;\n      this._directionClass = this.theme.addStyle(`lyGrid-direction:${val}`, (theme: ThemeVariables) => {\n        let directionStyles: {\n          flexDirection?: string\n        };\n        eachMedia(val, (value, media, isMedia) => {\n          const newDirectionStyles = {\n            flexDirection: value in ALIGN_ALIAS\n            ? ALIGN_ALIAS[value]\n            : value\n          };\n          if (isMedia) {\n            if (!directionStyles) {\n              directionStyles = {};\n            }\n            directionStyles[theme.getBreakpoint(media)] = newDirectionStyles;\n          } else {\n            directionStyles = newDirectionStyles;\n          }\n        });\n        return directionStyles;\n      }, this.el.nativeElement, this._directionClass, STYLE_PRIORITY);\n    }\n  }\n\n  /**\n   * Defines the `align-items` style property.\n   * Support breakpoints\n   */\n  @Input()\n  set alignItems(val: AlignItems) {\n    this._alignItems = val;\n    this._alignItemsClass = this.theme.addStyle(`lyGrid.align:${val}`, (theme: ThemeVariables) => {\n      let alignItemsStyles: {\n        alignItems?: string,\n        [media: string]: {\n          alignItems?: string\n        } | string\n      };\n      eachMedia(val, (value, media, isMedia) => {\n        const newAlignItemsStyles = {\n          alignItems: value in ALIGN_ALIAS\n          ? ALIGN_ALIAS[value]\n          : value\n        };\n        if (isMedia) {\n          if (!alignItemsStyles) {\n            alignItemsStyles = {};\n          }\n          alignItemsStyles[theme.getBreakpoint(media)] = newAlignItemsStyles;\n        } else {\n          alignItemsStyles = newAlignItemsStyles;\n        }\n      });\n      return alignItemsStyles;\n    }, this.el.nativeElement, this._alignItemsClass, STYLE_PRIORITY);\n  }\n  get alignItems() {\n    return this._alignItems;\n  }\n\n  constructor(\n    private theme: LyTheme2,\n    private el: ElementRef,\n  ) {\n    this.el.nativeElement.classList.add(this.classes.root);\n  }\n}\n\n@Directive({\n  selector: 'ly-grid[item]'\n})\nexport class LyGridItem implements OnInit {\n  private _col: string | number;\n  private _colClass: string;\n\n  private _order: string | number;\n  private _orderClass: string;\n\n  /**\n   * Defines the number of grids\n   * Support breakpoints\n   */\n  @Input()\n  get col(): string | number {\n    return this._col;\n  }\n  set col(val: string | number) {\n    if (val !== this.col) {\n      this._col = val;\n      this._colClass = this.theme.addStyle(`lyGrid-col:${val}`, (theme: ThemeVariables) => {\n        if (typeof val === 'number') {\n          return getColStyle(val);\n        } else {\n          let colStyles: {\n            maxWidth?: string | number\n            flexBasis?: string | number\n            flexGrow?: number\n          };\n          eachMedia(val, (value, media, len) => {\n            const newColStyles = getColStyle(+value);\n            if (len) {\n              if (!colStyles) {\n                colStyles = {};\n              }\n              colStyles[theme.getBreakpoint(media)] = newColStyles;\n            } else {\n              colStyles = newColStyles;\n            }\n          });\n          return colStyles;\n        }\n      }, this.el.nativeElement, this._colClass, STYLE_PRIORITY);\n    }\n  }\n\n\n\n  /**\n   * Defines the order style property.\n   * Support breakpoints\n   */\n  @Input()\n  get order(): string | number {\n    return this._order;\n  }\n  set order(val: string | number) {\n    if (val !== this.order) {\n      this._order = val;\n      this._orderClass = this.theme.addStyle(`lyGrid-order:${val}`, (theme: ThemeVariables) => {\n        let orderStyles: {\n          order?: string\n        };\n        eachMedia(`${val}`, (value, media, isMedia) => {\n          const newOrderStyles = {\n            order: value\n          };\n          if (isMedia) {\n            if (!orderStyles) {\n              orderStyles = {};\n            }\n            orderStyles[theme.getBreakpoint(media)] = newOrderStyles;\n          } else {\n            orderStyles = newOrderStyles;\n          }\n        });\n        return orderStyles;\n      }, this.el.nativeElement, this._orderClass, STYLE_PRIORITY);\n    }\n  }\n\n  constructor(\n    private gridContainer: LyGrid,\n    private el: ElementRef,\n    private theme: LyTheme2\n  ) {\n    if (!gridContainer) {\n      throw new Error(`Require parent <ly-grid container>`);\n    }\n  }\n\n  ngOnInit() {\n    this._updateSpacing();\n  }\n\n  private _updateSpacing() {\n    if (this.gridContainer._spacingClass) {\n      this.el.nativeElement.classList.add(this.gridContainer._spacingClass);\n    } else {\n      if (this.gridContainer._spacingXClass) {\n        this.el.nativeElement.classList.add(this.gridContainer._spacingXClass);\n      }\n      if (this.gridContainer._spacingYClass) {\n        this.el.nativeElement.classList.add(this.gridContainer._spacingYClass);\n      }\n    }\n  }\n\n}\n\nfunction getColStyle(val: number) {\n  return {\n    maxWidth: val ? getColVal(val) : '100%',\n    flexBasis: val ? getColVal(val) : 0,\n    flexGrow: val ? 0 : 1\n  };\n}\n\nfunction getColVal(val: string | number): string {\n  return val in COL_VALUES\n              ? COL_VALUES[val]\n              : COL_VALUES[val] = `${+val * 100 / 12}%`;\n}\n","import { NgModule } from '@angular/core';\nimport { LyGrid, LyGridItem } from './grid';\n\n@NgModule({\n  exports: [LyGrid, LyGridItem],\n  declarations: [LyGrid, LyGridItem]\n})\nexport class LyGridModule { }\n"]}