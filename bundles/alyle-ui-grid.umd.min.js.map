{"version":3,"sources":["ng://@alyle/ui/grid/grid.ts","ng://@alyle/ui/grid/grid.module.ts"],"names":["STYLE_PRIORITY","COL_VALUES","ALIGN_ALIAS","rowReverse","columnReverse","wrapReverse","start","end","between","around","evenly","styles","root","width","display","flexWrap","boxSizing","LyGrid","theme","el","this","classes","addStyleSheet","nativeElement","classList","add","Object","defineProperty","prototype","_spacing","val","spacing","_spacingClass","addStyle","spacingStyles_1","eachMedia","value","media","len","padding","getBreakpoint","undefined","_negativeMarginClass","negativeMarginstyles","margin","negativeMarginStyles_1","_justify","justify","_justifyClass","justifyStyles","isMedia","newJustifyStyles","justifyContent","_direction","direction","_directionClass","directionStyles","newDirectionStyles","flexDirection","_alignItems","_alignItemsClass","alignItemsStyles","newAlignItemsStyles","alignItems","Directive","args","selector","LyTheme2","ElementRef","Input","LyGridItem","gridContainer","Error","_col","col","_colClass","getColStyle","newColStyles","colStyles_1","_order","order","_orderClass","orderStyles","newOrderStyles","ngOnInit","_updateSpacing","spacingClass","maxWidth","getColVal","flexBasis","flexGrow","LyGridModule","NgModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, OnInit } from '@angular/core';\nimport { LyTheme2, eachMedia, ThemeVariables } from '@alyle/ui';\n\nconst STYLE_PRIORITY = -1;\n\n/** @docs-private */\nconst COL_VALUES = { };\n\nconst ALIGN_ALIAS = {\n  rowReverse: 'row-reverse',\n  columnReverse: 'column-reverse',\n  wrapReverse: 'wrap-reverse',\n  start: 'flex-start',\n  end: 'flex-end',\n  between: 'space-between',\n  around: 'space-around',\n  evenly: 'space-evenly',\n};\n\nexport type AlignItems = 'start' | 'center' | 'end' | 'stretch' | 'baseline';\n\nconst styles = ({\n  root: {\n    width: '100%',\n    display: 'flex',\n    flexWrap: 'wrap',\n    boxSizing: 'border-box'\n  }\n});\n\nexport type Justify = 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';\nexport type Direction = 'row' | 'rowReverse' | 'column' | 'columnReverse';\n\n/**\n * Grid container\n * example:\n * <ly-grid container [spacing]=\"'16 8@XSmall'\">\n *   <ly-grid item [col]=\"'6 12@XSmall'\">\n *     <div>6 12@XSmall</div>\n *   </ly-grid>\n *   <ly-grid item [col]=\"'6 12@XSmall'\">\n *     <div>6 12@XSmall</div>\n *   </ly-grid>\n * </ly-grid>\n */\n@Directive({\n  selector: 'ly-grid[container]'\n})\nexport class LyGrid {\n  /**\n   * Styles\n   * @docs-private\n   */\n  classes = this.theme.addStyleSheet(styles, STYLE_PRIORITY);\n\n  private _spacing: string | number;\n  private _spacingClass: string;\n\n  private _negativeMarginClass: string;\n\n  private _justify: Justify;\n  private _justifyClass: string;\n\n  private _direction: Direction;\n  private _directionClass: string;\n\n  private _alignItems: AlignItems;\n  private _alignItemsClass: string;\n\n  /**\n   * Defines the space between the component with the `item` attribute.\n   * Support breakpoints\n   */\n  @Input()\n  get spacing(): string | number {\n    return this._spacing;\n  }\n  set spacing(val: string | number) {\n    if (val !== this.spacing) {\n      this._spacing = val;\n      this._spacingClass = this.theme.addStyle(`lyGrid-spacing:${val}`, (theme: ThemeVariables) => {\n        if (typeof val === 'number') {\n          return `padding:${val / 2}px;` as any;\n        } else {\n          const spacingStyles: {\n            padding?: string\n          } = {};\n          eachMedia(val, (value, media, len) => {\n            const padding = `${(+value) / 2}px`;\n            if (len) {\n              spacingStyles[theme.getBreakpoint(media)] = {\n                padding\n              };\n            } else {\n              spacingStyles.padding = padding;\n            }\n          });\n          return spacingStyles;\n        }\n      }, undefined, undefined, STYLE_PRIORITY);\n      this._negativeMarginClass = this.theme.addStyle(`lyGrid-negative-margin:${val}`, (theme: ThemeVariables) => {\n        if (typeof val === 'number') {\n          return `margin:${val / -2}px;width: calc(100% + ${val}px);` as any;\n        } else {\n          let negativeMarginStyles: {\n            margin?: string\n            width?: string\n          };\n          eachMedia(val, (value, media, len) => {\n            const negativeMarginstyles = {\n              margin: `${(-value) / 2}px`,\n              width: `calc(100% + ${value}px)`\n            };\n            if (len) {\n              if (!negativeMarginStyles) {\n                negativeMarginStyles = {};\n              }\n              negativeMarginStyles[theme.getBreakpoint(media)] = negativeMarginstyles;\n            } else {\n              negativeMarginStyles = negativeMarginstyles;\n            }\n          });\n          return negativeMarginStyles;\n        }\n      }, this.el.nativeElement, this._negativeMarginClass, STYLE_PRIORITY);\n    }\n  }\n\n  /** @docs-private */\n  get spacingClass() {\n    return this._spacingClass;\n  }\n\n  /**\n   * Defines the justify-content style property.\n   * Support breakpoints\n   */\n  @Input()\n  get justify(): Justify {\n    return this._justify;\n  }\n  set justify(val: Justify) {\n    if (val !== this.justify) {\n      this._justify = val;\n      this._justifyClass = this.theme.addStyle(`lyGrid-justify:${val}`, (theme: ThemeVariables) => {\n        let justifyStyles: {\n          justifyContent?: string\n        };\n        eachMedia(val, (value, media, isMedia) => {\n          const newJustifyStyles = {\n            justifyContent: value in ALIGN_ALIAS\n            ? ALIGN_ALIAS[value]\n            : value\n          };\n          if (isMedia) {\n            if (!justifyStyles) {\n              justifyStyles = {};\n            }\n            justifyStyles[theme.getBreakpoint(media)] = newJustifyStyles;\n          } else {\n            justifyStyles = newJustifyStyles;\n          }\n        });\n        return justifyStyles;\n      }, this.el.nativeElement, this._justifyClass, STYLE_PRIORITY);\n    }\n  }\n\n  /**\n   * Defines the justify-content style property.\n   * Support breakpoints\n   */\n  @Input()\n  get direction(): Direction {\n    return this._direction;\n  }\n  set direction(val: Direction) {\n    if (val !== this.direction) {\n      this._direction = val;\n      this._directionClass = this.theme.addStyle(`lyGrid-direction:${val}`, (theme: ThemeVariables) => {\n        let directionStyles: {\n          flexDirection?: string\n        };\n        eachMedia(val, (value, media, isMedia) => {\n          const newDirectionStyles = {\n            flexDirection: value in ALIGN_ALIAS\n            ? ALIGN_ALIAS[value]\n            : value\n          };\n          if (isMedia) {\n            if (!directionStyles) {\n              directionStyles = {};\n            }\n            directionStyles[theme.getBreakpoint(media)] = newDirectionStyles;\n          } else {\n            directionStyles = newDirectionStyles;\n          }\n        });\n        return directionStyles;\n      }, this.el.nativeElement, this._directionClass, STYLE_PRIORITY);\n    }\n  }\n\n  /**\n   * Defines the `align-items` style property.\n   * Support breakpoints\n   */\n  @Input()\n  set alignItems(val: AlignItems) {\n    this._alignItems = val;\n    this._alignItemsClass = this.theme.addStyle(`lyGrid-direction:${val}`, (theme: ThemeVariables) => {\n      let alignItemsStyles: {\n        alignItems?: string,\n        [media: string]: {\n          alignItems?: string\n        } | string\n      };\n      eachMedia(val, (value, media, isMedia) => {\n        const newAlignItemsStyles = {\n          alignItems: value in ALIGN_ALIAS\n          ? ALIGN_ALIAS[value]\n          : value\n        };\n        if (isMedia) {\n          if (!alignItemsStyles) {\n            alignItemsStyles = {};\n          }\n          alignItemsStyles[theme.getBreakpoint(media)] = newAlignItemsStyles;\n        } else {\n          alignItemsStyles = newAlignItemsStyles;\n        }\n      });\n      return alignItemsStyles;\n    }, this.el.nativeElement, this._alignItemsClass, STYLE_PRIORITY);\n  }\n  get alignItems() {\n    return this._alignItems;\n  }\n\n  constructor(\n    private theme: LyTheme2,\n    private el: ElementRef,\n  ) {\n    this.el.nativeElement.classList.add(this.classes.root);\n  }\n}\n\n@Directive({\n  selector: 'ly-grid[item]'\n})\nexport class LyGridItem implements OnInit {\n  private _col: string | number;\n  private _colClass: string;\n\n  private _order: string | number;\n  private _orderClass: string;\n\n  /**\n   * Defines the number of grids\n   * Support breakpoints\n   */\n  @Input()\n  get col(): string | number {\n    return this._col;\n  }\n  set col(val: string | number) {\n    if (val !== this.col) {\n      this._col = val;\n      this._colClass = this.theme.addStyle(`lyGrid-col:${val}`, (theme: ThemeVariables) => {\n        if (typeof val === 'number') {\n          return getColStyle(val);\n        } else {\n          let colStyles: {\n            maxWidth?: string | number\n            flexBasis?: string | number\n            flexGrow?: number\n          };\n          eachMedia(val, (value, media, len) => {\n            const newColStyles = getColStyle(+value);\n            if (len) {\n              if (!colStyles) {\n                colStyles = {};\n              }\n              colStyles[theme.getBreakpoint(media)] = newColStyles;\n            } else {\n              colStyles = newColStyles;\n            }\n          });\n          return colStyles;\n        }\n      }, this.el.nativeElement, this._colClass, STYLE_PRIORITY);\n    }\n  }\n\n\n\n  /**\n   * Defines the order style property.\n   * Support breakpoints\n   */\n  @Input()\n  get order(): string | number {\n    return this._order;\n  }\n  set order(val: string | number) {\n    if (val !== this.order) {\n      this._order = val;\n      this._orderClass = this.theme.addStyle(`lyGrid-order:${val}`, (theme: ThemeVariables) => {\n        let orderStyles: {\n          order?: string\n        };\n        eachMedia(`${val}`, (value, media, isMedia) => {\n          const newOrderStyles = {\n            order: value\n          };\n          if (isMedia) {\n            if (!orderStyles) {\n              orderStyles = {};\n            }\n            orderStyles[theme.getBreakpoint(media)] = newOrderStyles;\n          } else {\n            orderStyles = newOrderStyles;\n          }\n        });\n        return orderStyles;\n      }, this.el.nativeElement, this._orderClass, STYLE_PRIORITY);\n    }\n  }\n\n  constructor(\n    private gridContainer: LyGrid,\n    private el: ElementRef,\n    private theme: LyTheme2\n  ) {\n    if (!gridContainer) {\n      throw new Error(`Require parent grid`);\n    }\n  }\n\n  ngOnInit() {\n    this._updateSpacing();\n  }\n\n  private _updateSpacing() {\n    if (this.gridContainer.spacingClass) {\n      this.el.nativeElement.classList.add(this.gridContainer.spacingClass);\n    }\n  }\n\n}\n\nfunction getColStyle(val: number) {\n  return {\n    maxWidth: val ? getColVal(val) : '100%',\n    flexBasis: val ? getColVal(val) : 0,\n    flexGrow: val ? 0 : 1\n  };\n}\n\nfunction getColVal(val: string | number): string {\n  return val in COL_VALUES\n              ? COL_VALUES[val]\n              : COL_VALUES[val] = `${+val * 100 / 12}%`;\n}\n","import { NgModule } from '@angular/core';\nimport { LyGrid, LyGridItem } from './grid';\n\n@NgModule({\n  exports: [LyGrid, LyGridItem],\n  declarations: [LyGrid, LyGridItem]\n})\nexport class LyGridModule { }\n"]}