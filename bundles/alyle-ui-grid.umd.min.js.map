{"version":3,"sources":["ng://@alyle/ui/grid/grid.ts","ng://@alyle/ui/grid/grid.module.ts"],"names":["COL_VALUES","ALIGN_ALIAS","rowReverse","columnReverse","wrapReverse","start","end","between","around","evenly","styles","root","width","display","flexWrap","boxSizing","LyGrid","theme","el","this","addStyleSheet","nativeElement","classList","add","classes","Object","defineProperty","prototype","_spacing","val","spacing","_spacingClass","addStyle","spacingStyles_1","eachMedia","value","media","len","padding","getBreakpoint","_negativeMarginClass","negativeMarginStyles_1","negativeMarginstyles","margin","_justify","justify","_justifyClass","justifyStyles","isMedia","newJustifyStyles","justifyContent","_direction","direction","_directionClass","directionStyles","newDirectionStyles","flexDirection","Directive","args","selector","LyTheme2","ElementRef","Input","LyGridItem","gridContainer","Error","_col","col","_colClass","getColStyle","colStyles_1","newColStyles","_order","order","_orderClass","orderStyles","newOrderStyles","ngOnInit","_updateSpacing","spacingClass","maxWidth","getColVal","flexBasis","flexGrow","LyGridModule","NgModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, Optional, Inject, OnInit } from '@angular/core';\nimport { LyTheme2, eachMedia, ThemeVariables } from '@alyle/ui';\n\nconst COL_VALUES = { };\n\nconst ALIGN_ALIAS = {\n  rowReverse: 'row-reverse',\n  columnReverse: 'column-reverse',\n  wrapReverse: 'wrap-reverse',\n  start: 'flex-start',\n  end: 'flex-end',\n  between: 'space-between',\n  around: 'space-around',\n  evenly: 'space-evenly',\n};\n\nconst styles = ({\n  root: {\n    width: '100%',\n    display: 'flex',\n    flexWrap: 'wrap',\n    boxSizing: 'border-box'\n  }\n});\n\ntype Justify = 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';\ntype Direction = 'row' | 'row-reverse' | 'column' | 'column-reverse';\n\n/**\n * Grid container\n * example:\n * <ly-grid container [spacing]=\"'16 8@XSmall'\">\n *   <ly-grid item [col]=\"'6 12@XSmall'\">\n *     <div>6 12@XSmall</div>\n *   </ly-grid>\n *   <ly-grid item [col]=\"'6 12@XSmall'\">\n *     <div>6 12@XSmall</div>\n *   </ly-grid>\n * </ly-grid>\n */\n@Directive({\n  selector: 'ly-grid[container]'\n})\nexport class LyGrid {\n  /**\n   * Styles\n   * @ignore\n   */\n  classes = this.theme.addStyleSheet(styles, 'lyGrid');\n\n  private _spacing: string | number;\n  private _spacingClass: string;\n\n  private _negativeMarginClass: string;\n\n  private _justify: Justify;\n  private _justifyClass: string;\n\n  private _direction: Direction;\n  private _directionClass: string;\n\n  /**\n   * Defines the space between the component with the `item` attribute.\n   */\n  @Input()\n  get spacing(): string | number {\n    return this._spacing;\n  }\n  set spacing(val: string | number) {\n    if (val !== this.spacing) {\n      this._spacing = val;\n      this._spacingClass = this.theme.addStyle(`lyGrid-spacing:${val}`, (theme: ThemeVariables) => {\n        if (typeof val === 'number') {\n          return `padding:${val / 2}px;`;\n        } else {\n          const spacingStyles: {\n            padding?: string\n          } = {};\n          eachMedia(val, (value, media, len) => {\n            const padding = `${(+value) / 2}px`;\n            if (len) {\n              // spacingStyles[`@media ${this.mediaQueries[media]}`] = {\n              spacingStyles[theme.getBreakpoint(media)] = {\n                padding\n              };\n            } else {\n              spacingStyles.padding = padding;\n            }\n          });\n          return spacingStyles as any;\n        }\n      });\n      this._negativeMarginClass = this.theme.addStyle(`lyGrid-negative-margin:${val}`, (theme: ThemeVariables) => {\n        if (typeof val === 'number') {\n          return `margin:${val / -2}px;width: calc(100% + ${val}px);`;\n        } else {\n          let negativeMarginStyles: {\n            margin?: string\n            width?: string\n          };\n          eachMedia(val, (value, media, len) => {\n            const negativeMarginstyles = {\n              margin: `${(-value) / 2}px`,\n              width: `calc(100% + ${value}px)`\n            };\n            if (len) {\n              if (!negativeMarginStyles) {\n                negativeMarginStyles = {};\n              }\n              // negativeMarginStyles[`@media ${this.mediaQueries[media]}`] = negativeMarginstyles;\n              negativeMarginStyles[theme.getBreakpoint(media)] = negativeMarginstyles;\n            } else {\n              negativeMarginStyles = negativeMarginstyles;\n            }\n          });\n          return negativeMarginStyles as any;\n        }\n      }, this.el.nativeElement, this._negativeMarginClass);\n    }\n  }\n\n  get spacingClass() {\n    return this._spacingClass;\n  }\n\n  /** Defines the justify-content style property. */\n  @Input()\n  get justify(): Justify {\n    return this._justify;\n  }\n  set justify(val: Justify) {\n    if (val !== this.justify) {\n      this._justify = val;\n      this._justifyClass = this.theme.addStyle(`lyGrid-justify:${val}`, (theme: ThemeVariables) => {\n        let justifyStyles: {\n          justifyContent?: string\n        };\n        eachMedia(val, (value, media, isMedia) => {\n          const newJustifyStyles = {\n            justifyContent: value in ALIGN_ALIAS\n            ? ALIGN_ALIAS[value]\n            : value\n          };\n          if (isMedia) {\n            if (!justifyStyles) {\n              justifyStyles = {};\n            }\n            // justifyStyles[`@media ${this.mediaQueries[media]}`] = newJustifyStyles;\n            justifyStyles[theme.getBreakpoint(media)] = newJustifyStyles;\n          } else {\n            justifyStyles = newJustifyStyles;\n          }\n        });\n        return justifyStyles as any;\n      }, this.el.nativeElement, this._justifyClass);\n    }\n  }\n\n  /** Defines the justify-content style property. */\n  @Input()\n  get direction(): Direction {\n    return this._direction;\n  }\n  set direction(val: Direction) {\n    if (val !== this.direction) {\n      this._direction = val;\n      this._directionClass = this.theme.addStyle(`lyGrid-direction:${val}`, (theme: ThemeVariables) => {\n        let directionStyles: {\n          flexDirection?: string\n        };\n        eachMedia(val, (value, media, isMedia) => {\n          const newDirectionStyles = {\n            flexDirection: value in ALIGN_ALIAS\n            ? ALIGN_ALIAS[value]\n            : value\n          };\n          if (isMedia) {\n            if (!directionStyles) {\n              directionStyles = {};\n            }\n            // directionStyles[`@media ${this.mediaQueries[media]}`] = newDirectionStyles;\n            directionStyles[theme.getBreakpoint(media)] = newDirectionStyles;\n          } else {\n            directionStyles = newDirectionStyles;\n          }\n        });\n        return directionStyles as any;\n      }, this.el.nativeElement, this._directionClass);\n    }\n  }\n\n  constructor(\n    private theme: LyTheme2,\n    private el: ElementRef,\n  ) {\n    this.el.nativeElement.classList.add(this.classes.root);\n  }\n}\n\n@Directive({\n  selector: 'ly-grid[item]'\n})\nexport class LyGridItem implements OnInit {\n  private _col: string | number;\n  private _colClass: string;\n\n  private _order: string | number;\n  private _orderClass: string;\n\n  /** Defines the number of grids */\n  @Input()\n  get col(): string | number {\n    return this._col;\n  }\n  set col(val: string | number) {\n    if (val !== this.col) {\n      this._col = val;\n      this._colClass = this.theme.addStyle(`lyGrid-col:${val}`, (theme: ThemeVariables) => {\n        if (typeof val === 'number') {\n          return getColStyle(val);\n        } else {\n          let colStyles: {\n            maxWidth?: string | number\n            flexBasis?: string | number\n            flexGrow?: number\n          };\n          eachMedia(val, (value, media, len) => {\n            const newColStyles = getColStyle(+value);\n            if (len) {\n              if (!colStyles) {\n                colStyles = {};\n              }\n              // colStyles[`@media ${this.mediaQueries[media]}`] = newColStyles;\n              colStyles[theme.getBreakpoint(media)] = newColStyles;\n            } else {\n              colStyles = newColStyles;\n            }\n          });\n          return colStyles as any;\n        }\n      }, this.el.nativeElement, this._colClass);\n    }\n  }\n\n\n\n  /** Defines the order style property. */\n  @Input()\n  get order(): string | number {\n    return this._order;\n  }\n  set order(val: string | number) {\n    if (val !== this.order) {\n      this._order = val;\n      this._orderClass = this.theme.addStyle(`lyGrid-order:${val}`, (theme: ThemeVariables) => {\n        let orderStyles: {\n          order?: string\n        };\n        eachMedia(`${val}`, (value, media, isMedia) => {\n          const newOrderStyles = {\n            order: value\n          };\n          if (isMedia) {\n            if (!orderStyles) {\n              orderStyles = {};\n            }\n            // orderStyles[`@media ${this.mediaQueries[media]}`] = newOrderStyles;\n            orderStyles[theme.getBreakpoint(media)] = newOrderStyles;\n          } else {\n            orderStyles = newOrderStyles;\n          }\n        });\n        return orderStyles as any;\n      }, this.el.nativeElement, this._orderClass);\n    }\n  }\n\n  constructor(\n    private gridContainer: LyGrid,\n    private el: ElementRef,\n    private theme: LyTheme2\n  ) {\n    if (!gridContainer) {\n      throw new Error(`Require parent grid`);\n    }\n  }\n\n  ngOnInit() {\n    this._updateSpacing();\n  }\n\n  private _updateSpacing() {\n    if (this.gridContainer.spacingClass) {\n      this.el.nativeElement.classList.add(this.gridContainer.spacingClass);\n    }\n  }\n\n}\n\nfunction getColStyle(val: number) {\n  return {\n    maxWidth: val ? getColVal(val) : '100%',\n    flexBasis: val ? getColVal(val) : 0,\n    flexGrow: val ? 0 : 1\n  };\n}\n\nfunction getColVal(val: string | number): string {\n  return val in COL_VALUES\n              ? COL_VALUES[val]\n              : COL_VALUES[val] = `${+val * 100 / 12}%`;\n}\n","import { NgModule } from '@angular/core';\nimport { LyGrid, LyGridItem } from './grid';\n\n@NgModule({\n  exports: [LyGrid, LyGridItem],\n  declarations: [LyGrid, LyGridItem]\n})\nexport class LyGridModule { }\n"]}