{"version":3,"sources":["ng://@alyle/ui/grid/grid.ts","ng://@alyle/ui/grid/grid.module.ts"],"names":["COL_VALUES","ALIGN_ALIAS","rowReverse","columnReverse","wrapReverse","start","end","between","around","evenly","styles","root","width","display","flexWrap","boxSizing","LyGrid","mediaQueries","theme","el","this","addStyleSheet","nativeElement","classList","add","classes","Object","defineProperty","prototype","_spacing","val","_this","spacing","_spacingClass","addStyle","spacingStyles_1","eachMedia","value","media","len","padding","_negativeMarginClass","negativeMarginStyles_1","negativeMarginstyles","margin","_justify","justify","_justifyClass","justifyStyles","isMedia","newJustifyStyles","justifyContent","_direction","direction","_directionClass","directionStyles","newDirectionStyles","flexDirection","Directive","args","selector","Optional","type","Inject","LY_MEDIA_QUERIES","LyTheme2","ElementRef","Input","LyGridItem","gridContainer","Error","_col","col","_colClass","getColStyle","colStyles_1","newColStyles","_order","order","_orderClass","orderStyles","newOrderStyles","ngOnInit","_updateSpacing","spacingClass","maxWidth","getColVal","flexBasis","flexGrow","LyGridModule","NgModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, Optional, Inject, OnInit } from '@angular/core';\nimport { LyTheme2, eachMedia } from '@alyle/ui';\nimport { LY_MEDIA_QUERIES } from '@alyle/ui/responsive';\n\nconst COL_VALUES = { };\n\nconst ALIGN_ALIAS = {\n  rowReverse: 'row-reverse',\n  columnReverse: 'column-reverse',\n  wrapReverse: 'wrap-reverse',\n  start: 'flex-start',\n  end: 'flex-end',\n  between: 'space-between',\n  around: 'space-around',\n  evenly: 'space-evenly',\n};\n\nconst styles = ({\n  root: {\n    width: '100%',\n    display: 'flex',\n    flexWrap: 'wrap',\n    boxSizing: 'border-box'\n  }\n});\n\ntype Justify = 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';\ntype Direction = 'row' | 'row-reverse' | 'column' | 'column-reverse';\n\n/**\n * Grid container\n * example:\n * <ly-grid container [spacing]=\"'16 8@XSmall'\">\n *   <ly-grid item [col]=\"'6 12@XSmall'\">\n *     <div>6 12@XSmall</div>\n *   </ly-grid>\n *   <ly-grid item [col]=\"'6 12@XSmall'\">\n *     <div>6 12@XSmall</div>\n *   </ly-grid>\n * </ly-grid>\n */\n@Directive({\n  selector: 'ly-grid[container]'\n})\nexport class LyGrid {\n  /**\n   * Styles\n   * @ignore\n   */\n  classes = this.theme.addStyleSheet(styles, 'lyGrid');\n\n  private _spacing: string | number;\n  private _spacingClass: string;\n\n  private _negativeMarginClass: string;\n\n  private _justify: Justify;\n  private _justifyClass: string;\n\n  private _direction: Direction;\n  private _directionClass: string;\n\n  /**\n   * Defines the space between the component with the `item` attribute.\n   */\n  @Input()\n  get spacing(): string | number {\n    return this._spacing;\n  }\n  set spacing(val: string | number) {\n    if (val !== this.spacing) {\n      this._spacing = val;\n      this._spacingClass = this.theme.addStyle(`lyGrid-spacing:${val}`, () => {\n        if (typeof val === 'number') {\n          return `padding:${val / 2}px;`;\n        } else {\n          const spacingStyles: {\n            padding?: string\n          } = {};\n          eachMedia(val, (value, media, len) => {\n            const padding = `${(+value) / 2}px`;\n            if (len) {\n              spacingStyles[`@media ${this.mediaQueries[media]}`] = {\n                padding\n              };\n            } else {\n              spacingStyles.padding = padding;\n            }\n          });\n          return spacingStyles as any;\n        }\n      });\n      this._negativeMarginClass = this.theme.addStyle(`lyGrid-negative-margin:${val}`, () => {\n        if (typeof val === 'number') {\n          return `margin:${val / -2}px;width: calc(100% + ${val}px);`;\n        } else {\n          let negativeMarginStyles: {\n            margin?: string\n            width?: string\n          };\n          eachMedia(val, (value, media, len) => {\n            const negativeMarginstyles = {\n              margin: `${(-value) / 2}px`,\n              width: `calc(100% + ${value}px)`\n            };\n            if (len) {\n              if (!negativeMarginStyles) {\n                negativeMarginStyles = {};\n              }\n              negativeMarginStyles[`@media ${this.mediaQueries[media]}`] = negativeMarginstyles;\n            } else {\n              negativeMarginStyles = negativeMarginstyles;\n            }\n          });\n          return negativeMarginStyles as any;\n        }\n      }, this.el.nativeElement, this._negativeMarginClass);\n    }\n  }\n\n  get spacingClass() {\n    return this._spacingClass;\n  }\n\n  /** Defines the justify-content style property. */\n  @Input()\n  get justify(): Justify {\n    return this._justify;\n  }\n  set justify(val: Justify) {\n    if (val !== this.justify) {\n      this._justify = val;\n      this._justifyClass = this.theme.addStyle(`lyGrid-justify:${val}`, () => {\n        let justifyStyles: {\n          justifyContent?: string\n        };\n        eachMedia(val, (value, media, isMedia) => {\n          const newJustifyStyles = {\n            justifyContent: value in ALIGN_ALIAS\n            ? ALIGN_ALIAS[value]\n            : value\n          };\n          if (isMedia) {\n            if (!justifyStyles) {\n              justifyStyles = {};\n            }\n            justifyStyles[`@media ${this.mediaQueries[media]}`] = newJustifyStyles;\n          } else {\n            justifyStyles = newJustifyStyles;\n          }\n        });\n        return justifyStyles as any;\n      }, this.el.nativeElement, this._justifyClass);\n    }\n  }\n\n  /** Defines the justify-content style property. */\n  @Input()\n  get direction(): Direction {\n    return this._direction;\n  }\n  set direction(val: Direction) {\n    if (val !== this.direction) {\n      this._direction = val;\n      this._directionClass = this.theme.addStyle(`lyGrid-direction:${val}`, () => {\n        let directionStyles: {\n          flexDirection?: string\n        };\n        eachMedia(val, (value, media, isMedia) => {\n          const newDirectionStyles = {\n            flexDirection: value in ALIGN_ALIAS\n            ? ALIGN_ALIAS[value]\n            : value\n          };\n          if (isMedia) {\n            if (!directionStyles) {\n              directionStyles = {};\n            }\n            directionStyles[`@media ${this.mediaQueries[media]}`] = newDirectionStyles;\n          } else {\n            directionStyles = newDirectionStyles;\n          }\n        });\n        return directionStyles as any;\n      }, this.el.nativeElement, this._directionClass);\n    }\n  }\n\n  constructor(\n    @Optional() @Inject(LY_MEDIA_QUERIES) private mediaQueries: any,\n    private theme: LyTheme2,\n    private el: ElementRef,\n  ) {\n    this.el.nativeElement.classList.add(this.classes.root);\n  }\n}\n\n@Directive({\n  selector: 'ly-grid[item]'\n})\nexport class LyGridItem implements OnInit {\n  private _col: string | number;\n  private _colClass: string;\n\n  private _order: string | number;\n  private _orderClass: string;\n\n  /** Defines the number of grids */\n  @Input()\n  get col(): string | number {\n    return this._col;\n  }\n  set col(val: string | number) {\n    if (val !== this.col) {\n      this._col = val;\n      this._colClass = this.theme.addStyle(`lyGrid-col:${val}`, () => {\n        if (typeof val === 'number') {\n          return getColStyle(val);\n        } else {\n          let colStyles: {\n            maxWidth?: string | number\n            flexBasis?: string | number\n            flexGrow?: number\n          };\n          eachMedia(val, (value, media, len) => {\n            const newColStyles = getColStyle(+value);\n            if (len) {\n              if (!colStyles) {\n                colStyles = {};\n              }\n              colStyles[`@media ${this.mediaQueries[media]}`] = newColStyles;\n            } else {\n              colStyles = newColStyles;\n            }\n          });\n          return colStyles as any;\n        }\n      }, this.el.nativeElement, this._colClass);\n    }\n  }\n\n\n\n  /** Defines the order style property. */\n  @Input()\n  get order(): string | number {\n    return this._order;\n  }\n  set order(val: string | number) {\n    if (val !== this.order) {\n      this._order = val;\n      this._orderClass = this.theme.addStyle(`lyGrid-order:${val}`, () => {\n        let orderStyles: {\n          order?: string\n        };\n        eachMedia(`${val}`, (value, media, isMedia) => {\n          const newOrderStyles = {\n            order: value\n          };\n          if (isMedia) {\n            if (!orderStyles) {\n              orderStyles = {};\n            }\n            orderStyles[`@media ${this.mediaQueries[media]}`] = newOrderStyles;\n          } else {\n            orderStyles = newOrderStyles;\n          }\n        });\n        return orderStyles as any;\n      }, this.el.nativeElement, this._orderClass);\n    }\n  }\n\n  constructor(\n    @Optional() @Inject(LY_MEDIA_QUERIES) private mediaQueries: any,\n    private gridContainer: LyGrid,\n    private el: ElementRef,\n    private theme: LyTheme2\n  ) {\n    if (!gridContainer) {\n      throw new Error(`Require parent grid`);\n    }\n  }\n\n  ngOnInit() {\n    this._updateSpacing();\n  }\n\n  private _updateSpacing() {\n    if (this.gridContainer.spacingClass) {\n      this.el.nativeElement.classList.add(this.gridContainer.spacingClass);\n    }\n  }\n\n}\n\nfunction getColStyle(val: number) {\n  return {\n    maxWidth: val ? getColVal(val) : '100%',\n    flexBasis: val ? getColVal(val) : 0,\n    flexGrow: val ? 0 : 1\n  };\n}\n\nfunction getColVal(val: string | number): string {\n  return val in COL_VALUES\n              ? COL_VALUES[val]\n              : COL_VALUES[val] = `${+val * 100 / 12}%`;\n}\n","import { NgModule } from '@angular/core';\nimport { LyGrid, LyGridItem } from './grid';\n\n@NgModule({\n  exports: [LyGrid, LyGridItem],\n  declarations: [LyGrid, LyGridItem]\n})\nexport class LyGridModule { }\n"]}