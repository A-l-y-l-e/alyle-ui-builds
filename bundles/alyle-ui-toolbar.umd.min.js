!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@angular/core"),require("@alyle/ui"),require("@angular/common")):"function"==typeof define&&define.amd?define("@alyle/ui/toolbar",["exports","@angular/core","@alyle/ui","@angular/common"],o):o((e.alyle=e.alyle||{},e.alyle.ui=e.alyle.ui||{},e.alyle.ui.toolbar={}),e.ng.core,e.alyle.ui,e.ng.common)}(this,function(e,o,t,i){"use strict";var n=function(e){var o;return{root:(o={padding:"0 16px",display:"flex",boxSizing:"border-box",width:"100%",flexDirection:"row",alignItems:"center",whiteSpace:"nowrap",height:"64px",zIndex:e.zIndex.toolbar},o[e.getBreakpoint("XSmall")]={height:"56px"},o)}},r=function(){function e(e,o,t,i){this._el=o,this.theme=t,this._common=i,this.classes=this.theme.addStyleSheet(n,-2),e.addClass(this._el.nativeElement,this.classes.root),this._common&&this._common.setAutoContrast()}return Object.defineProperty(e.prototype,"position",{get:function(){return this._position},set:function(e){this._position=e,this._positionClass=this.theme.addStyle("ly-toolbar-position:"+e,"position:"+e,this._el.nativeElement,this._positionClass,-2)},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){this.position||(this.position="fixed"),this._common.bg||(this._common.bg="background:tertiary",this._common.ngOnChanges())},e.decorators=[{type:o.Directive,args:[{selector:"ly-toolbar"}]}],e.ctorParameters=function(){return[{type:o.Renderer2},{type:o.ElementRef},{type:t.LyTheme2},{type:t.LyCommon,decorators:[{type:o.Optional}]}]},e.propDecorators={position:[{type:o.Input}]},e}(),s=function(){function e(){}return e.decorators=[{type:o.NgModule,args:[{imports:[i.CommonModule,t.LyCommonModule],exports:[r,t.LyCommonModule],declarations:[r]}]}],e}();e.LyToolbar=r,e.LyToolbarModule=s,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=alyle-ui-toolbar.umd.min.js.map