{"version":3,"sources":["ng://@alyle/ui/radio/radio.service.ts","ng://@alyle/ui/radio/radio.ts"],"names":["styles","root","display","flexWrap","labelContent","padding","LyRadioService","theme","this","addStyleSheet","Injectable","args","providedIn","LyTheme2","LY_RADIO_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","LyRadioGroup","multi","idx","UndefinedValue","label","cursor","whiteSpace","position","alignItems","container","height","width","&>div *","margin","borderRadius","transition","transitionDuration","& div>:nth-child(2)","background","transform","& div>:nth-child(1)","border","color","radio","radioOuterCircle","_radioService","elementRef","_renderer","ngZone","cd","EventEmitter","addClass","nativeElement","classes","Object","defineProperty","prototype","_value","val","_radios","_updateCheckFromValue","_touch","onTouched","writeValue","value","markForCheck","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","setDisabledState","isDisabled","newChecked","_this","forEach","radioButton","updatevalue","checked","change","emit","_radioResetChecked","_","_setCheckedToFalsy","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","OnPush","preserveWhitespaces","exportAs","ElementRef","Renderer2","NgZone","ChangeDetectorRef","Input","Output","ContentChildren","LyRadio","radioGroup","_elementRef","changeDetectorRef","coreStyles","_rippleService","_withColor","checkedClass","_createStyleWithColor","_checked","newCheckedState","toBoolean","before","withColor","_radioContainer","removeClass","_markForCheck","id","_onInputChange","event","stopPropagation","_onInputClick","addStyle","colorOf","ngOnInit","name","_ripple","Ripple","setConfig","centered","radius","ngOnDestroy","removeEvents","decorators","type","Optional","LyCoreStyles","LyRippleService","ViewChild","NgModule","imports","CommonModule","FormsModule","LyRippleModule","LyCommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { LyTheme2 } from '@alyle/ui';\n\nconst STYLE_PRIORITY = -2;\n\nconst styles = ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  labelContent: {\n    padding: '0 0.5em'\n  }\n});\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LyRadioService {\n  classes = this.theme.addStyleSheet(styles, 'lyRadioStatic', STYLE_PRIORITY);\n  constructor(\n    private theme: LyTheme2\n  ) { }\n}\n","import {\n  Component,\n  forwardRef,\n  NgModule,\n  Input,\n  Output,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  ContentChildren,\n  QueryList,\n  Optional,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  NgZone,\n  ViewChild,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\nimport { LyRippleModule, LyRippleService, Ripple } from '@alyle/ui/ripple';\nimport {\n  NG_VALUE_ACCESSOR,\n  ControlValueAccessor,\n  FormsModule,\n} from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { LyCommonModule, LyTheme2, LyCoreStyles, toBoolean } from '@alyle/ui';\nimport { LyRadioService } from './radio.service';\n\nconst STYLE_PRIORITY = -2;\n\nexport const LY_RADIO_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => LyRadioGroup),\n  multi: true\n};\n\nlet idx = 0;\n\nexport class UndefinedValue {\n  constructor() { }\n}\n\nconst styles = theme => ({\n  label: {\n    cursor: 'pointer',\n    whiteSpace: 'nowrap',\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  container: {\n    position: 'relative',\n    height: 'calc(1em * 3)',\n    width: '1.5em',\n    '&>div *': {\n      margin: 'auto',\n      borderRadius: '50%',\n      transition: 'transform cubic-bezier(.1, 1, 0.5, 1)',\n      transitionDuration: '250ms',\n      width: '1em',\n      height: '1em'\n    },\n    '& div>:nth-child(2)': {\n      background: 'currentColor',\n      transform: 'scale(0)'\n    },\n    '& div>:nth-child(1)': {\n      transform: 'scale(1)',\n      border: 'solid .08em currentColor',\n      color: theme.radio.radioOuterCircle\n    }\n  }\n});\n// console.log('module.id', module.id);\n@Component({\n  selector: 'ly-radio-group',\n  template: `<ng-content></ng-content>`,\n  providers: [LY_RADIO_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  exportAs: 'lyRadioGroup'\n})\nexport class LyRadioGroup implements ControlValueAccessor {\n  _value = new UndefinedValue;\n  name = `ly-radio-name-${idx++}`;\n  _color = 'accent';\n\n  classes = this.theme.addStyleSheet(styles, 'lyRadio', STYLE_PRIORITY);\n\n  @Input()\n  set value(val: any) {\n    if (this._value !== val) {\n      // this._value = val;\n      if (this._radios) {\n        this._updateCheckFromValue(val);\n      }\n    }\n  }\n  get value() {\n    return this._value;\n  }\n\n  @Output() readonly change: EventEmitter<void> = new EventEmitter<void>();\n\n  @Input() withColor = 'accent';\n  @ContentChildren(forwardRef(() => LyRadio)) _radios: QueryList<LyRadio>;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  writeValue(value: any) {\n    if (!!this._radios) {\n      this.value = value;\n      this.markForCheck();\n    }\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    // this.disabled = isDisabled;\n    this.markForCheck();\n  }\n\n  constructor(\n    public _radioService: LyRadioService,\n    elementRef: ElementRef,\n    _renderer: Renderer2,\n    public theme: LyTheme2,\n    public ngZone: NgZone,\n    private cd: ChangeDetectorRef\n  ) {\n    _renderer.addClass(elementRef.nativeElement, this._radioService.classes.root);\n  }\n\n  _updateCheckFromValue(val: any) {\n    let newChecked: boolean;\n    this._radios.forEach(radioButton => {\n      if (val === radioButton.value) {\n        this.updatevalue(val);\n        newChecked = true;\n        radioButton.checked = true;\n      } else if (radioButton.checked) {\n        radioButton.checked = false;\n      }\n    });\n    if (!newChecked) {\n      /** when val not exist in radio button !==  */\n      this._controlValueAccessorChangeFn(null);\n      if (this._value !== null) {\n        this._value = null;\n      }\n    }\n  }\n\n  updatevalue(value: any) {\n    this._value = value;\n    this._controlValueAccessorChangeFn(value);\n    this.change.emit();\n    this.markForCheck();\n  }\n\n  markForCheck() {\n    this.cd.markForCheck();\n  }\n\n  _radioResetChecked() {\n    this._radios.forEach(_ => _._setCheckedToFalsy());\n  }\n\n}\n@Component({\n  selector: 'ly-radio',\n  // styleUrls: ['radio.scss'],\n  template: `\n  <label #_labelContainer [attr.for]=\"inputId\" [className]=\"radioGroup.classes.label\">\n    <input\n      [className]=\"coreStyles.classes.visuallyHidden\"\n      [id]=\"inputId\"\n      [checked]=\"checked\"\n      [name]=\"name\"\n      (change)=\"_onInputChange($event)\"\n      (click)=\"_onInputClick($event)\"\n      type=\"radio\"\n      >\n    <div #_radioContainer>\n      <div>\n        <div [className]=\"coreStyles.classes.fill\"></div>\n        <div [className]=\"coreStyles.classes.fill\"></div>\n      </div>\n    </div>\n    <div\n    [className]=\"radioGroup._radioService.classes.labelContent\">\n      <ng-content></ng-content>\n    </div>\n  </label>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class LyRadio implements OnInit, OnDestroy {\n  id = `ly-radio-id-${idx++}`;\n  name = '';\n  _value = null;\n  private _withColor: string;\n  private _ripple: Ripple;\n  private _checked = false;\n  private checkedClass: string;\n  @ViewChild('_radioContainer') private _radioContainer: ElementRef;\n  @ViewChild('_labelContainer') _labelContainer: ElementRef;\n  @Input()\n  set withColor(val: string) {\n    if (this._withColor !== val) {\n      this._withColor = val;\n      if (this.checkedClass) {\n        /** create new class if exist `this.checkedClass` */\n        this.checkedClass = this._createStyleWithColor(val);\n      }\n    }\n  }\n  get withColor() {\n    return this._withColor;\n  }\n  @Output() change = new EventEmitter<boolean>();\n\n  @Input()\n  set value(val) {\n    if (this._value !== val) {\n      this._value = val;\n    }\n  }\n  get value() { return this._value; }\n\n  @Input()\n  set checked(val: boolean) {\n    const newCheckedState = toBoolean(val);\n    const before = this._checked;\n    if (before !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (!before && newCheckedState) {\n        /** Use current checked class or create new class */\n        this.checkedClass = this.checkedClass || this._createStyleWithColor(this.withColor || this.radioGroup.withColor);\n        /** Add class checked */\n        this._renderer.addClass(this._radioContainer.nativeElement, this.checkedClass);\n\n        if (this.value !== this.radioGroup.value) {\n          /** update Value */\n          this.radioGroup.updatevalue(this.value);\n        }\n      } else {\n        /** Remove class checked */\n        this._renderer.removeClass(this._radioContainer.nativeElement, this.checkedClass);\n      }\n      this._markForCheck();\n    }\n  }\n  get checked() {\n    return this._checked;\n  }\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  _onInputChange(event: any) {\n    event.stopPropagation();\n    this.radioGroup._updateCheckFromValue(this.value);\n    // this.radioGroup._radioResetChecked();\n    // this.checked = true;\n    this.radioGroup._touch();\n  }\n\n  _onInputClick(event: Event) { event.stopPropagation(); }\n\n  _setCheckedToFalsy() {\n    this.checked = false;\n  }\n\n  _createStyleWithColor(val: string) {\n    return this.theme.addStyle(\n      `lyRadio-checked:${val}`, theme => ({\n        color: theme.colorOf(val),\n        '& div>:nth-child(1)': {\n          transform: 'scale(1.25)',\n          color: theme.colorOf(val),\n        },\n        '& div>:nth-child(2)': {\n          transform: 'scale(0.8)'\n        },\n      }),\n      this._radioContainer.nativeElement,\n      this.checkedClass,\n      STYLE_PRIORITY\n    );\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n      this._renderer.addClass(this._radioContainer.nativeElement, this.radioGroup.classes.container);\n    }\n    this._ripple = new Ripple(this.ngZone, this._rippleService.classes, this._radioContainer.nativeElement, this._elementRef.nativeElement);\n    this._ripple.setConfig({\n      centered: true,\n      radius: 'containerSize'\n    });\n  }\n\n  _markForCheck() {\n    this.changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy() {\n    this._ripple.removeEvents();\n  }\n\n\n  constructor(\n    @Optional() public radioGroup: LyRadioGroup,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    public theme: LyTheme2,\n    private changeDetectorRef: ChangeDetectorRef,\n    private ngZone: NgZone,\n    public coreStyles: LyCoreStyles,\n    private _rippleService: LyRippleService\n  ) { }\n}\n\n@NgModule({\n  imports: [CommonModule, FormsModule, LyRippleModule, LyCommonModule],\n  exports: [LyRadioGroup, LyRadio],\n  declarations: [LyRadioGroup, LyRadio],\n})\nexport class LyRadioModule { }\n"]}