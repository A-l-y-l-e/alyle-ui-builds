{"version":3,"sources":["ng://@alyle/ui/checkbox/ly-checkbox/ly-checkbox.component.ts","ng://@alyle/ui/checkbox/ly-checkbox.service.ts","ng://@alyle/ui/checkbox/ly-checkbox.module.ts"],"names":["LY_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","LyCheckbox","multi","Init","Checked","Unchecked","Indeterminate","CheckboxState","this","checked","change","EventEmitter","indeterminateChange","onTouched","value","prototype","toggle","_onChangeEvent","event","stopPropagation","_onInputClick","ev","_controlValueAccessorChangeFn","console","log","writeValue","registerOnChange","fn","ngOnChanges","changes","registerOnTouched","ngOnInit","ngAfterContentInit","ngOnDestroy","Component","args","selector","template","providers","Input","Output","LyCheckboxService","Injectable","LyCheckboxModule","forRoot","ngModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"ibAcA,IAAaA,EAA0C,CACrDC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAC,IAC9BC,OAAO,MAIPC,KAAA,EAEAC,QAAA,EAEAC,UAAA,EAEAC,cAAA,OANAH,MAAI,WAEJC,SAAO,cAEPC,WAAS,gBAETC,eAAa,iCA4Bb,SAAAL,4BAlB4CM,EAAcJ,KAY1DK,KAAAC,SAA4B,EAE5BD,KAAAE,OAA8C,IAAIC,EAAAA,aAClDH,KAAAI,oBAA4E,IAAID,EAAAA,aAChFH,KAAAK,UAAuB,gDACuC,SAACC,YAI/Db,EAAAc,UAAAC,OAAA,WACER,KAAKC,SAAWD,KAAKC,SAGvBR,EAAAc,UAAAE,eAAA,SAAeC,GACbA,EAAMC,mBAERlB,EAAAc,UAAAK,cAAA,SAAcF,GACZ,IAAMG,EAAKH,EAAgC,OAC3CV,KAAKC,QAAUY,EAAGZ,QAClBD,KAAKc,8BAA8Bd,KAAKC,SACxCc,QAAQC,IAAI,gBAAiBH,EAAGZ,UAGlCR,EAAAc,UAAAU,WAAA,SAAWX,GACTN,KAAKC,UAAYK,EACjBS,QAAQC,IAAI,QAAShB,KAAKC,UAG5BR,EAAAc,UAAAW,iBAAA,SAAiBC,GACfnB,KAAKc,8BAAgCK,GAEvC1B,EAAAc,UAAAa,YAAA,SAAYC,GACVN,QAAQC,IAAI,UAAWK,GACnBA,EAAa,KAKnB5B,EAAAc,UAAAe,kBAAA,SAAkBH,GAChBnB,KAAKK,UAAYc,GAGnB1B,EAAAc,UAAAgB,SAAA,aAIA9B,EAAAc,UAAAiB,mBAAA,aAGA/B,EAAAc,UAAAkB,YAAA,iCApEDC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,cACVC,SAAA,4hBAEAC,UAAW,CAAC1C,gHAIX2C,EAAAA,MAAKJ,KAAA,CAAC,yBAENI,EAAAA,MAAKJ,KAAA,CAAC,2CAENI,EAAAA,MAAKJ,KAAA,CAAC,0CACNI,EAAAA,MAAKJ,KAAA,CAAC,mCACNI,EAAAA,MAAKJ,KAAA,CAAC,gCACNI,EAAAA,MAAKJ,KAAA,CAAC,wBACNI,EAAAA,MAAKJ,KAAA,CAAC,uBACNI,EAAAA,MAAKJ,KAAA,CAAC,0BACNI,EAAAA,MAAKJ,KAAA,CAAC,6BACNI,EAAAA,MAAKJ,KAAA,CAAC,kCACNI,EAAAA,MAAKJ,KAAA,CAAC,iCACNK,EAAAA,OAAML,KAAA,CAAC,uCACPK,EAAAA,OAAML,KAAA,CAAC,+BCpDVM,EAAA,WAKE,SAAAA,gCAHDC,EAAAA,qDAFD,GCAAC,EAAA,gCAcgBA,EAAAC,mBACZ,MAAO,CACLC,SAAUF,wBAXfG,EAAAA,SAAQX,KAAA,CAAC,CACRY,QAAS,CACPC,EAAAA,cAEFC,QAAS,CAAChD,GACViD,aAAc,CAACjD,GACfqC,UAAW,CAACG,SAXd","sourcesContent":["import {\n  Component,\n  OnInit,\n  AfterContentInit,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  Input,\n  Output,\n  EventEmitter,\n  forwardRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const LY_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => LyCheckbox),\n  multi: true\n};\nexport enum CheckboxState {\n  /** The initial state. */\n  Init,\n  /** Checked state. */\n  Checked,\n  /** Unchecked state. */\n  Unchecked,\n  /** Indeterminate state. */\n  Indeterminate,\n}\n\n@Component({\n  selector: 'ly-checkbox',\n  templateUrl: './ly-checkbox.component.html',\n  styleUrls: ['./ly-checkbox.component.scss'],\n  providers: [LY_CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class LyCheckbox implements OnInit, AfterContentInit, ControlValueAccessor, OnChanges, OnDestroy {\n  private _currentCheckState: CheckboxState = CheckboxState.Init;\n  @Input('id') id: string;\n  // tslint:disable-next-line:no-input-rename\n  @Input('attr.aria-label') ariaLabel: string;\n  // tslint:disable-next-line:no-input-rename\n  @Input('attr.aria-labelledby') ariaLabelledby: string;\n  @Input('required') required: string;\n  @Input('labelPosition') labelPosition: string;\n  @Input('color') color: string;\n  @Input('value') value: string;\n  @Input('name') name: string;\n  @Input('disabled') disabled: string;\n  @Input('checked') checked = false;\n  @Input('indeterminate') indeterminate: string;\n  @Output('change') change: EventEmitter<any> = new EventEmitter<any>();\n  @Output('indeterminateChange') indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n  onTouched: () => any = () => {};\n  private _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n  constructor() { }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  _onChangeEvent(event: Event) {\n    event.stopPropagation();\n  }\n  _onInputClick(event: Event) {\n    const ev = event.target as HTMLInputElement;\n    this.checked = ev.checked;\n    this._controlValueAccessorChangeFn(this.checked);\n    console.log('_onInputClick', ev.checked);\n  }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n    console.log('value', this.checked);\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log('changes', changes);\n    if (changes['src']) {\n      // fn\n    }\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  ngOnInit() {\n\n  }\n\n  ngAfterContentInit() {\n\n  }\n  ngOnDestroy() {\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class LyCheckboxService {\n\n  constructor() { }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LyCheckbox } from './ly-checkbox/ly-checkbox.component';\nimport { LyCheckboxService } from './ly-checkbox.service';\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [LyCheckbox],\n  declarations: [LyCheckbox],\n  providers: [LyCheckboxService]\n})\nexport class LyCheckboxModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: LyCheckboxModule,\n    };\n  }\n}\n"]}