{"version":3,"sources":["ng://@alyle/ui/typography/typography.service.ts","ng://@alyle/ui/typography/typography.directive.ts","ng://@alyle/ui/typography/typography.module.ts"],"names":["LyTypographyClasses","styleCore","this","root","setUpStyleSecondary","Injectable","args","providedIn","CoreTheme","LyTypography","style","elementRef","renderer","classes","addClass","nativeElement","prototype","_lyTyp","val","lyTyp","newClass","_createTypClass","updateClassName","_lyTypClass","_gutter","newVal","toBoolean","gutter","_createGutterClass","Gutter","default","_gutterClass","updateClass","_gutterTop","gutterTop","top","_gutterTopClass","_gutterBottom","gutterBottom","bottom","_gutterBottomClass","ngOnInit","Error","key","newKey","theme","_a","typography","fontSize","fontWeight","letterSpacing","textTransform","lineHeight","pxToRem","name","Directive","selector","LyTheme2","ElementRef","Renderer2","Input","LyTypographyModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CoreTheme } from '@alyle/ui';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LyTypographyClasses {\n  root: string;\n  constructor(\n    styleCore: CoreTheme\n  ) {\n    this.root = styleCore.setUpStyleSecondary(\n      'k-typ',\n      () => (\n        // `margin: 1em 0 0.65em 0;` +\n        `margin: 0;` +\n        `display: block;`\n      )\n    );\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input, isDevMode, OnInit } from '@angular/core';\nimport { LyTheme2, toBoolean } from '@alyle/ui';\n// import { IMinimaTheme } from '../themes';\nimport { LyTypographyClasses } from './typography.service';\n\nenum Gutter {\n  default,\n  top,\n  bottom,\n}\n\n@Directive({\n  selector: `[lyTyp]`\n})\nexport class LyTypography implements OnInit {\n  private _lyTyp: string;\n  private _lyTypClass: string;\n\n  private _gutter: boolean;\n  private _gutterClass: string;\n\n  private _gutterTop: boolean;\n  private _gutterTopClass: string;\n\n  private _gutterBottom: boolean;\n  private _gutterBottomClass: string;\n\n  @Input()\n  set lyTyp(val: string) {\n    if (val !== this.lyTyp) {\n      const newClass = this._createTypClass(val);\n      this.style.updateClassName(this.elementRef.nativeElement, this.renderer, newClass, this._lyTypClass);\n      this._lyTypClass = newClass;\n    }\n  }\n  get lyTyp() {\n    return this._lyTyp;\n  }\n\n  @Input()\n  set gutter(val: boolean) {\n    const newVal = toBoolean(val);\n    if (newVal !== this.gutter) {\n      this._gutter = newVal;\n      const newClass = this._createGutterClass(Gutter.default, newVal);\n      this._gutterClass = this.style.updateClass(this.elementRef.nativeElement, this.renderer, newClass, this._gutterClass);\n    }\n  }\n  get gutter() {\n    return this._gutter;\n  }\n\n  @Input()\n  set gutterTop(val: boolean) {\n    const newVal = toBoolean(val);\n    if (newVal !== this.gutterTop) {\n      this._gutterTop = newVal;\n      const newClass = this._createGutterClass(Gutter.top, newVal);\n      this._gutterTopClass = this.style.updateClass(this.elementRef.nativeElement, this.renderer, newClass, this._gutterTopClass);\n    }\n  }\n  get gutterTop() {\n    return this._gutterTop;\n  }\n\n  @Input()\n  set gutterBottom(val: boolean) {\n    const newVal = toBoolean(val);\n    if (newVal !== this.gutterBottom) {\n      this._gutterBottom = newVal;\n      const newClass = this._createGutterClass(Gutter.bottom, newVal);\n      this._gutterBottomClass = this.style.updateClass(this.elementRef.nativeElement, this.renderer, newClass, this._gutterBottomClass);\n    }\n  }\n  get gutterBottom() {\n    return this._gutterBottom;\n  }\n\n  constructor(\n    private style: LyTheme2,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    classes: LyTypographyClasses\n  ) {\n    this.renderer.addClass(this.elementRef.nativeElement, classes.root);\n  }\n\n  ngOnInit() {\n    if ((this.gutterTop && this.gutterBottom)) {\n      throw new Error(`use '<element lyTyp gutter>' instead of '<element lyTyp gutterTop gutterBottom>'`);\n    }\n  }\n\n  private _createTypClass(key: string) {\n    const newKey = `k-typ:${key}`;\n\n    return this.style.setUpStyleSecondary<any/** IMinimaTheme */>(newKey,\n      theme => {\n        const { typography } = theme;\n        const { fontSize, fontWeight, letterSpacing, textTransform, lineHeight } = typography[key || 'body1'];\n        let style = (\n          `font-size:${theme.pxToRem(fontSize)};` +\n          `font-weight:${fontWeight};` +\n          `letter-spacing:${theme.pxToRem(letterSpacing)};`\n        );\n        if (lineHeight) {\n          style += `line-height:${theme.pxToRem(lineHeight)};`;\n        }\n        if (textTransform) {\n          style += `text-transform:${textTransform};`;\n        }\n        return style;\n      }\n    );\n  }\n\n  private _createGutterClass(name: Gutter, val: boolean) {\n    return this.style.setUpStyleSecondary<any>(\n      `k-typ-gutter:${name}:${val}`,\n      theme => {\n        const gutter = name === Gutter.default;\n        return (\n          `margin-top:${ val && (gutter || name === Gutter.top) ? theme.typography.gutterTop : 0 }em;` +\n          `margin-bottom:${ val && (gutter || name === Gutter.bottom) ? theme.typography.gutterBottom : 0 }em;`\n        );\n      }\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LyTypography } from './typography.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [LyTypography],\n  declarations: [LyTypography]\n})\nexport class LyTypographyModule { }\n"]}