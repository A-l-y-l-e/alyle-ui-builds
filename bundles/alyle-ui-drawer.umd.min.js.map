{"version":3,"sources":["ng://@alyle/ui/drawer/drawer.ts","ng://@alyle/ui/drawer/drawer.module.ts"],"names":["styles","theme","drawerContainer","display","position","overflow","-webkit-overflow-scrolling","drawer","zIndex","drawerContent","drawerOpened","transform","LyDrawerContainer","_theme","_renderer","_el","this","addStyleSheet","addClass","nativeElement","classes","Directive","args","selector","LyTheme2","Renderer2","ElementRef","ContentChild","forwardRef","LyDrawerContent","prototype","_getHostElement","LyDrawer","_drawerContainer","Object","defineProperty","_opened","val","opened","toBoolean","_position","addStyle","_a","getDirection","_positionClass","ngOnChanges","__mode","mode","__opened","__width","width","__height","height","__position","__spacingTop","spacingTop","__spacingBottom","spacingBottom","Error","newKeyDrawerContent","_drawerClass","updateClass","_drawerContentClass","drawerContentStyles","positionVal","eachMedia","media","isMedia","newStyleWidth","toPx","breakPoint","getBreakpoint","createEmptyPropOrUseExisting","drawerContentNOpenStyles","nnn","newTranslateX","newTranslateY","removeClass","_drawerRootClass","stylesDrawerRoot","newStyleHeight","newStyleSpacingTop","top","newStyleSpacingBottom","bottom","left","right","ngOnInit","toggle","exportAs","Input","object","key","_new","LyDrawerModule","NgModule","imports","CommonModule","LyCommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Directive, Input, ElementRef, Renderer2, OnInit, SimpleChanges, OnChanges, ViewChild, forwardRef, ContentChild } from '@angular/core';\nimport { LyTheme2, ThemeVariables, toBoolean, eachMedia } from '@alyle/ui';\n\nconst DEFAULT_MODE = 'side';\nconst DEFAULT_VALUE = '';\nconst STYLE_PRIORITY = -2;\nconst DEFAULT_POSITION = 'start';\n\nconst styles = (theme: ThemeVariables) => ({\n  drawerContainer: {\n    display: 'block',\n    position: 'relative',\n    overflow: 'hidden',\n    '-webkit-overflow-scrolling': 'touch'\n  },\n  drawer: {\n    display: 'block',\n    position: 'fixed',\n    zIndex: theme.zIndex.drawer,\n    overflow: 'auto'\n  },\n  drawerContent: {\n    display: 'block'\n  },\n  drawerOpened: {\n    transform: 'translate3d(0px, 0px, 0)'\n  }\n});\n\ntype position = 'start' | 'end' | 'top' | 'bottom';\ntype mode = 'side' | 'over' | 'push';\n\n@Directive({\n  selector: 'ly-drawer-container'\n})\nexport class LyDrawerContainer {\n  classes = this._theme.addStyleSheet(styles, 'ly-drawer-container', STYLE_PRIORITY);\n  @ContentChild(forwardRef(() => LyDrawerContent)) drawerContent: LyDrawerContent;\n  constructor(\n    private _theme: LyTheme2,\n    private _renderer: Renderer2,\n    private _el: ElementRef\n  ) {\n    this._renderer.addClass(this._el.nativeElement, this.classes.drawerContainer);\n  }\n}\n\n@Directive({\n  selector: 'ly-drawer-content'\n})\nexport class LyDrawerContent {\n  constructor(\n    private _theme: LyTheme2,\n    private _renderer: Renderer2,\n    private _el: ElementRef,\n    drawerContainer: LyDrawerContainer\n  ) {\n    this._renderer.addClass(this._el.nativeElement, drawerContainer.classes.drawerContent);\n  }\n  _getHostElement() {\n    return this._el.nativeElement;\n  }\n}\n\n@Directive({\n  selector: 'ly-drawer',\n  exportAs: 'lyDrawer'\n})\nexport class LyDrawer implements OnChanges, OnInit {\n  private _opened: boolean;\n  private _openedClass: string;\n\n  private _mode: mode;\n  private _modeClass: string;\n\n  private _width: number | string;\n  private _widthClass: string;\n\n  private _height: number | string;\n  private _heightClass: string;\n\n  private _position: position = DEFAULT_POSITION;\n  private _positionClass: string;\n\n  private _drawerRootClass: string;\n  private _drawerClass: string;\n  private _drawerContentClass: string;\n\n  /** @deprecated */\n  @Input() config: any;\n\n  @Input()\n  set opened(val: boolean) {\n    if (val !== this.opened) {\n      this._opened = toBoolean(val);\n    }\n  }\n  get opened() {\n    return this._opened;\n  }\n  @Input() mode: mode;\n  @Input() spacingTop: string | number;\n  @Input() spacingBottom: string | number;\n  @Input() spacingStart: string | number;\n  @Input() spacingRight: string | number;\n  @Input() width: number | string;\n  @Input() height: number | string;\n  @Input()\n  set position(val: position) {\n    if (val !== this.position) {\n      this._position = val;\n      this._theme.addStyle(`drawer.position:${val}`, (theme: ThemeVariables) => {\n        let positionVal: string;\n        if (val === 'start' || val === 'end') {\n          positionVal = theme.getDirection(val);\n        } else {\n          positionVal = val;\n        }\n        return {\n          [positionVal]: 0\n        };\n      }, this._el.nativeElement, this._positionClass, STYLE_PRIORITY);\n    }\n  }\n  get position() {\n    return this._position;\n  }\n\n  constructor(\n    private _theme: LyTheme2,\n    private _renderer: Renderer2,\n    private _el: ElementRef,\n    private _drawerContainer: LyDrawerContainer\n  ) {\n    this._renderer.addClass(this._el.nativeElement, _drawerContainer.classes.drawer);\n  }\n\n  ngOnChanges() {\n    const __mode = this.mode;\n    const __opened = this.opened;\n    let __width = this.width;\n    const __height = this.height;\n    const __position = this.position;\n    const __spacingTop = this.spacingTop;\n    const __spacingBottom = this.spacingBottom;\n    if (__width && __height) {\n      throw new Error(`\\`width\\` and \\`height\\` are defined, you can only define one`);\n    } else if (!__width) {\n      if (!__height) {\n        __width = '230px';\n      }\n    }\n    const newKeyDrawerContent = `ly-drawer-content----:${\n      __mode || DEFAULT_VALUE}Â·${\n        __opened || DEFAULT_VALUE}Â·${\n          __width || DEFAULT_VALUE}Â·${\n            __height || DEFAULT_VALUE}Â·${\n              __position || DEFAULT_VALUE}`;\n    if (__opened) {\n      this._drawerClass = this._theme.updateClass(this._el.nativeElement, this._renderer, this._drawerContainer.classes.drawerOpened, this._drawerClass);\n\n      this._drawerContentClass = this._theme.addStyle(newKeyDrawerContent, (theme: ThemeVariables) => {\n        const drawerContentStyles: {\n          marginLeft?: string\n          marginRight?: string\n          marginTop?: string\n          marginBottom?: string\n        } = {};\n        let positionVal = 'margin-';\n        if (__position === 'start' || __position === 'end') {\n          positionVal += theme.getDirection(__position);\n        } else {\n          positionVal += __position;\n        }\n        if (__width) {\n          eachMedia(__width, (val, media, isMedia) => {\n            const newStyleWidth = toPx(val);\n            if (isMedia) {\n              const breakPoint = theme.getBreakpoint(media);\n              const styleOfBreakPoint = createEmptyPropOrUseExisting(drawerContentStyles, breakPoint);\n              styleOfBreakPoint[positionVal] = newStyleWidth;\n            } else {\n              drawerContentStyles[positionVal] = newStyleWidth;\n            }\n          });\n        }\n        return drawerContentStyles;\n      },\n      this._drawerContainer.drawerContent._getHostElement(),\n      this._drawerContentClass);\n    } else {\n      // this._drawerClass = this._theme.updateClass(this._el.nativeElement, this._renderer, null, this._drawerClass);\n      this._drawerClass = this._theme.addStyle(newKeyDrawerContent, (theme: ThemeVariables) => {\n        const drawerContentNOpenStyles: {\n          transform?: string\n        } = {};\n        let positionVal: string;\n        if (__position === 'start' || __position === 'end') {\n          positionVal = theme.getDirection(__position);\n        } else {\n          positionVal = __position;\n        }\n        const nnn = positionVal === 'left' || positionVal === 'top' ? '-' : '+';\n        if (__width) {\n          eachMedia(__width, (val, media, isMedia) => {\n            const newTranslateX = `translateX(${nnn + toPx(val)})`;\n            if (isMedia) {\n              const breakPoint = theme.getBreakpoint(media);\n              const styleOfBreakPoint = createEmptyPropOrUseExisting(drawerContentNOpenStyles, breakPoint);\n              styleOfBreakPoint.transform = newTranslateX;\n            } else {\n              drawerContentNOpenStyles.transform = newTranslateX;\n            }\n          });\n        }\n        if (__height) {\n          eachMedia(__height, (val, media, isMedia) => {\n            const newTranslateY = `translateY(${nnn + toPx(val)})`;\n            if (isMedia) {\n              const breakPoint = theme.getBreakpoint(media);\n              const styleOfBreakPoint = createEmptyPropOrUseExisting(drawerContentNOpenStyles, breakPoint);\n              styleOfBreakPoint.transform = newTranslateY;\n            } else {\n              drawerContentNOpenStyles.transform = newTranslateY;\n            }\n          });\n        }\n        return drawerContentNOpenStyles;\n      }, this._el.nativeElement, this._drawerClass, STYLE_PRIORITY);\n      this._renderer.removeClass(this._drawerContainer.drawerContent._getHostElement(), this._drawerContentClass);\n      this._drawerContentClass = null;\n    }\n    this._drawerRootClass = this._theme.addStyle(`ly-drawer-root:${__width}Â·${__height}Â·${__spacingTop}Â·${__spacingBottom}`, (theme: ThemeVariables) => {\n      const stylesDrawerRoot: {\n        width?: string\n        height?: string\n        top?: string\n        bottom?: string\n        left?: number\n        right?: number\n      } = { };\n      if (__width) {\n        eachMedia(__width, (val, media, isMedia) => {\n          const newStyleWidth = toPx(val);\n          if (isMedia) {\n            const breakPoint = theme.getBreakpoint(media);\n            const styleOfBreakPoint = createEmptyPropOrUseExisting(stylesDrawerRoot, breakPoint);\n            styleOfBreakPoint.width = newStyleWidth;\n          } else {\n            stylesDrawerRoot.width = newStyleWidth;\n          }\n        });\n      }\n      if (__height) {\n        eachMedia(__height, (val, media, isMedia) => {\n          const newStyleHeight = toPx(val);\n          if (isMedia) {\n            const breakPoint = theme.getBreakpoint(media);\n            const styleOfBreakPoint = createEmptyPropOrUseExisting(stylesDrawerRoot, breakPoint);\n            styleOfBreakPoint.height = newStyleHeight;\n          } else {\n            stylesDrawerRoot.height = newStyleHeight;\n          }\n        });\n      }\n      if (__position === 'start' || __position === 'end') {\n        eachMedia(__spacingTop, (val, media, isMedia) => {\n          const newStyleSpacingTop = toPx(val || 0);\n          if (isMedia) {\n            const breakPoint = theme.getBreakpoint(media);\n            const styleOfBreakPoint = createEmptyPropOrUseExisting(stylesDrawerRoot, breakPoint);\n            styleOfBreakPoint.top = newStyleSpacingTop;\n          } else {\n            stylesDrawerRoot.top = newStyleSpacingTop;\n          }\n        });\n        eachMedia(__spacingBottom, (val, media, isMedia) => {\n          const newStyleSpacingBottom = toPx(val || 0);\n          if (isMedia) {\n            const breakPoint = theme.getBreakpoint(media);\n            const styleOfBreakPoint = createEmptyPropOrUseExisting(stylesDrawerRoot, breakPoint);\n            styleOfBreakPoint.bottom = newStyleSpacingBottom;\n          } else {\n            stylesDrawerRoot.bottom = newStyleSpacingBottom;\n          }\n        });\n      } else {\n        stylesDrawerRoot.left = 0;\n        stylesDrawerRoot.right = 0;\n      }\n      return stylesDrawerRoot;\n    }, this._el.nativeElement, this._drawerRootClass, STYLE_PRIORITY);\n  }\n\n  ngOnInit() {\n    /** Set default position */\n    if (!this.position) {\n      // this.position = DEFAULT_POSITION;\n    }\n  }\n\n  toggle() {\n    this.opened = !this.opened;\n    this.ngOnChanges();\n  }\n}\n\n/**\n * @dddd\n */\nfunction toPx(val: string | number) {\n  if (typeof val === 'number') {\n    return `${val}px`;\n  } else {\n    return val;\n  }\n}\n\nfunction valWithSpacing(spacingTop?: string | number, spacingBottom?: string | number) {\n  if (spacingTop || spacingBottom) {\n    let styl = 'calc(100%';\n    if (spacingTop) {\n      styl += ` - ${toPx(spacingTop)}`;\n    }\n    if (spacingBottom) {\n      styl += ` - ${toPx(spacingBottom)}`;\n    }\n    styl += ')';\n    return styl;\n  } else {\n    return '100%';\n  }\n}\n\nfunction createEmptyPropOrUseExisting(object: object, key: string, _new?: any) {\n  return key in object\n  ? object[key]\n  : object[key] = _new || {};\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LyDrawer, LyDrawerContainer, LyDrawerContent } from './drawer';\nimport { LyCommonModule } from '@alyle/ui';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LyCommonModule\n  ],\n  exports: [LyDrawer, LyDrawerContainer, LyDrawerContent],\n  declarations: [LyDrawer, LyDrawerContainer, LyDrawerContent],\n})\nexport class LyDrawerModule {}\n"]}