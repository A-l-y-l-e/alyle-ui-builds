{"version":3,"sources":["ng://@alyle/ui/ls/minimal-localstorage.ts","ng://@alyle/ui/ls/ls.module.ts"],"names":["MinimalStorage","key$","val","localStorage","setItem","JSON","stringify","MinimalLS","platformId","_this","this","Map","Subject","isPlatformBrowser","storageEvent","fromEvent","window","subscribe","e","storage","next","key","value","newValue","storageObservable","asObservable","prototype","hasItem","_addPrefix","getItem","isPlatformServer","_storage","item","before","Observable","observer","parse","_prefix","_removePrefix","Injectable","Inject","args","PLATFORM_ID","MinimalLSModule","NgModule","providers"],"mappings":"6YAAA,IAaAA,EACE,SAAAA,EAAYC,EAAcC,GACxBC,aAAaC,QAAQH,EAAMI,KAAKC,UAAUJ,KAF9CK,EAAA,WAaE,SAAAA,EAAyCC,GAAzC,IAAAC,EAAAC,KAAyCA,KAAAF,WAAAA,oBALlB,IAAIG,iBACT,oBAEA,IAAIC,EAAAA,QAGhBC,EAAAA,kBAAkBH,KAAKF,cACzBE,KAAKI,aAAeC,EAAAA,UAAUC,OAAQ,WACtCN,KAAKI,aAAaG,UAAU,SAACC,GAC3BT,EAAKU,QAAQC,KAAK,CAChBC,IAAKH,EAAEG,IACPC,MAAOJ,EAAEK,aAGbb,KAAKc,kBAAoBd,KAAKS,QAAQM,uBAO1ClB,EAAAmB,UAAAC,QAAA,SAAQ1B,GACN,IAAMoB,EAAMX,KAAKkB,WAAW3B,GAC5B,OAAIY,EAAAA,kBAAkBH,KAAKF,cAChBL,aAAa0B,QAAQR,IAE5BS,EAAAA,iBAAiBpB,KAAKF,kBAA1B,GAOFD,EAAAmB,UAAAtB,QAAA,SAAQH,EAAcC,EAAU6B,QAAA,IAAAA,IAAAA,GAAA,GAC9B,IAAMV,EAAMX,KAAKkB,WAAW3B,GACxB8B,GACElB,EAAAA,kBAAkBH,KAAKF,aAEzB,IAAIR,EAAeqB,EAAKnB,GAG5BQ,KAAKS,QAAQC,KAAK,CAChBC,IAAKA,EACLC,MAAOZ,KAAKsB,KAAK/B,MAOrBM,EAAAmB,UAAAG,QAAA,SAAQ5B,EAAcgC,GAAtB,IAAAxB,EAAAC,KACQW,EAAMX,KAAKkB,WAAW3B,GAW5B,OAVW,IAAIiC,EAAAA,WAAW,SAACC,GACrB1B,EAAKkB,QAAQ1B,IACfkC,EAASf,KAAKX,EAAKuB,KAAK/B,IAE1BQ,EAAKe,kBAAkBP,UAAU,SAACC,GAC5BG,IAAQH,EAAEG,KACZc,EAASf,KAAKF,EAAEI,YASxBf,EAAAmB,UAAAM,KAAA,SAAK/B,GACH,IAAMoB,EAAMX,KAAKkB,WAAW3B,GAC5B,IACE,OAAOI,KAAK+B,MAAMpB,OAAOb,aAAakB,IACtC,MAAOH,GACP,OAAO,OAIHX,EAAAmB,UAAAE,oBAAW1B,GACjB,MAAO,KAAKQ,KAAK2B,QAAO,MAAMnC,EAAG,MAE3BK,EAAAmB,UAAAY,uBAAcpC,GACpB,IACE,OAAOG,KAAK+B,MAAMlC,GAAKQ,KAAK2B,SAC5B,MAAOnB,GACP,OAAO,2BArFZqB,EAAAA,+EAOcC,EAAAA,OAAMC,KAAA,CAACC,EAAAA,oBAbtB,GCbAC,EAAA,oDAMCC,EAAAA,SAAQH,KAAA,CAAC,CACRI,UAAW,CACTtC,SARJ","sourcesContent":["import {\n  NgModule,\n  ModuleWithProviders,\n  ElementRef,\n  ViewContainerRef,\n  Injectable,\n  Inject\n}                          from '@angular/core';\nimport { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Observable ,  Subject ,  BehaviorSubject ,  Observer ,  fromEvent }      from 'rxjs';\nimport { CommonModule }    from '@angular/common';\n\nexport class MinimalStorage {\n  constructor(key$: string, val: any) {\n    localStorage.setItem(key$, JSON.stringify(val));\n  }\n}\n\n@Injectable()\nexport class MinimalLS {\n  private itemsSubject = new Map<string, BehaviorSubject<string>>();\n  private _prefix = '*ls*';\n  private storageEvent: Observable<any>;\n  private storage = new Subject();\n  private storageObservable: Observable<any>;\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n    if (isPlatformBrowser(this.platformId)) {\n      this.storageEvent = fromEvent(window, 'storage');\n      this.storageEvent.subscribe((e) => {\n        this.storage.next({\n          key: e.key,\n          value: e.newValue\n        });\n      });\n      this.storageObservable = this.storage.asObservable();\n    }\n  }\n\n  /**\n   * get boolean\n   */\n  hasItem(key$: string): boolean {\n    const key = this._addPrefix(key$);\n    if (isPlatformBrowser(this.platformId)) {\n      return !!localStorage.getItem(key);\n    }\n    if (isPlatformServer(this.platformId)) {\n      return false;\n    }\n  }\n  /**\n   * Set new item or replace item\n   */\n  setItem(key$: string, val: any, _storage = true) {\n    const key = this._addPrefix(key$);\n    if (_storage) {\n      if (isPlatformBrowser(this.platformId)) {\n        // tslint:disable-next-line:no-unused-expression\n        new MinimalStorage(key, val);\n      }\n    }\n    this.storage.next({\n      key: key,\n      value: this.item(key$)\n    });\n    // this.itemsSubject.set(key, new BehaviorSubject<string>(val));\n  }\n  /**\n   * Get Observable from localStorage\n   */\n  getItem(key$: string, before?: any): Observable<any> {\n    const key = this._addPrefix(key$);\n    const ob = new Observable((observer) => {\n      if (this.hasItem(key$)) {\n        observer.next(this.item(key$));\n      }\n      this.storageObservable.subscribe((e) => {\n        if (key === e.key) {\n          observer.next(e.value);\n        }\n      });\n    });\n    return ob;\n  }\n  /**\n   * Get value from localstorage\n   */\n  item(key$: string): any {\n    const key = this._addPrefix(key$);\n    try {\n      return JSON.parse(window.localStorage[key]);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  private _addPrefix(val) {\n    return `{\"${this._prefix}\":\"${val}\"}`;\n  }\n  private _removePrefix(val) {\n    try {\n      return JSON.parse(val)[this._prefix];\n    } catch (e) {\n      return null;\n    }\n  }\n}\n\n","import {\n  NgModule, ModuleWithProviders,\n  ViewContainerRef, SkipSelf, Optional,\n  InjectionToken }                       from '@angular/core';\nimport { MinimalLS } from './minimal-localstorage';\n\n@NgModule({\n  providers: [\n    MinimalLS\n  ]\n})\nexport class MinimalLSModule { }\n"]}