{"version":3,"sources":["ng://@alyle/ui/button/button.service.ts","ng://@alyle/ui/button/button.ts","ng://@alyle/ui/button/button.module.ts"],"names":["LyButtonService","coreTheme","this","root","setUpStyleSecondary","","rootStyle","outlined","setUpStyle","buttonContent","Injectable","args","providedIn","CoreTheme","LyButton","elementRef","renderer","theme","rippleStyles","buttonService","_ngZone","bgAndColor","setAutoContrast","Platform","isBrowser","el","nativeElement","_rippleContainer","Ripple","stylesData","prototype","val","classname","toBoolean","classes","updateClassName","_outlinedClassName","_rippleSensitive","value","_disabled","key","raised","bg","_disabledClassName","disableStyle","bind","addClass","removeClass","Object","defineProperty","_this","currentConfig","config","fontFamily","fontSize","default","ngOnInit","focused","focus","ngAfterViewInit","classList","add","style","disabled","ngOnDestroy","removeEvents","Component","selector","changeDetection","ChangeDetectionStrategy","OnPush","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","LyTheme2","LyRippleService","NgZone","LyBgColorAndRaised","decorators","type","Optional","Input","ViewChild","LyButtonModule","NgModule","imports","CommonModule","LyRippleModule","LyCommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {\n  LyTheme2, CoreTheme\n} from '@alyle/ui';\nimport {\n  ElementRef,\n  Inject,\n  Injectable,\n  Renderer2\n} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LyButtonService {\n  private rootClassName: string;\n  private themeClassName: string;\n  classes = {\n    root: this.coreTheme.setUpStyleSecondary(\n      'button', {\n        '': rootStyle\n      }),\n    outlined: this.coreTheme.setUpStyle(\n      'btntlnd',\n      {'': () => (\n        `border: 1px solid currentColor`\n      )}\n    ),\n    buttonContent: this.coreTheme.setUpStyle(\n      'buttonContent',\n      {'': () => (\n        `padding:0;` +\n        `display:flex;` +\n        `justify-content:inherit;` +\n        `align-items:inherit;` +\n        `align-content:inherit;` +\n        `width: 100%;` +\n        `height: 100%;` +\n        `box-sizing: border-box;`\n      )}\n    )\n  };\n  constructor(\n    private coreTheme: CoreTheme\n  ) { }\n}\n\nfunction rootStyle() {\n  return '-webkit-tap-highlight-color:transparent;' +\n  'background-color:rgba(0, 0, 0, 0);' +\n  'border:0;' +\n  'padding:0 16px;' +\n  '-moz-appearance:none;' +\n  'min-height:36px;' +\n  'height:36px;' +\n  'margin:0;' +\n  'border-radius:3px;' +\n  'outline:none;' +\n  'font-weight:500;' +\n  'min-width:88px;' +\n  'box-sizing:border-box;' +\n  'position:relative;' +\n  `justify-content:center;` +\n  `align-items:center;` +\n  `align-content:center;` +\n  'display:inline-flex;' +\n  'cursor:pointer;' +\n  '-webkit-user-select:none;' +\n  '-moz-user-select:none;' +\n  '-ms-user-select:none;' +\n  'user-select:none;' +\n  'text-decoration-line:none;' +\n  '-webkit-text-decoration-line:none;' +\n  'transition:all 375ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;' +\n  `overflow: hidden;`;\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnChanges,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  ViewChild,\n  Inject,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  IsBoolean,\n  Platform,\n  toBoolean,\n  ThemeVariables,\n  LyTheme2,\n  LyBgColorAndRaised\n} from '@alyle/ui';\nimport { LyRipple, Ripple, LyRippleService } from '@alyle/ui/ripple';\nimport { LyButtonService } from './button.service';\n\n@Component({\n  selector: '[ly-button], ly-button',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n  <span #content>\n    <ng-content></ng-content>\n  </span>\n  `,\n  encapsulation: ViewEncapsulation.None\n})\nexport class LyButton implements OnInit, AfterViewInit, OnDestroy {\n  public _disabled = false;\n  private _rippleSensitive = false;\n  private _disabledClassName: string;\n  private _outlinedClassName: string;\n  private _rippleContainer: Ripple;\n  @Input()\n  set outlined(val: boolean) {\n    const classname = toBoolean(val) === true ? this.buttonService.classes.outlined : '';\n    this.theme.updateClassName(this.elementRef.nativeElement, this.renderer, classname, this._outlinedClassName);\n    this._outlinedClassName = classname;\n  }\n  @Input('sensitive')\n  get rippleSensitive(): boolean {\n    return this._rippleSensitive;\n  }\n  set rippleSensitive(value: boolean) {\n    this._rippleSensitive = toBoolean(value);\n  }\n\n  @ViewChild('content') buttonContent: ElementRef;\n\n  @Input()\n  set disabled(value: boolean) {\n    const key = this.bgAndColor && (this.bgAndColor.raised || this.bgAndColor.bg) ? 'r' : 'f';\n    this._disabledClassName = this.theme.setUpStyle(`btn${key}`, {'': this.disableStyle.bind(this)});\n    this._disabled = toBoolean(value);\n    if (this._disabled) {\n      this.renderer.addClass(this.elementRef.nativeElement, this._disabledClassName);\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, this._disabledClassName);\n    }\n  }\n  get disabled() {\n    return this._disabled;\n  }\n\n  get classes() {\n    return {\n      currentConfig: this.theme.setUpStyleSecondary('buttonConfig', {\n        '': () => (\n          `font-family:${this.theme.config.typography.fontFamily};` +\n          `font-size:${this.theme.config.typography.fontSize}px;` +\n          `color:${this.theme.config.text.default};`\n        )\n      })\n    };\n  }\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private theme: LyTheme2,\n    public rippleStyles: LyRippleService,\n    private buttonService: LyButtonService,\n    _ngZone: NgZone,\n    @Optional() private bgAndColor: LyBgColorAndRaised\n  ) {\n    if (bgAndColor) {\n      bgAndColor.setAutoContrast();\n    }\n    if (Platform.isBrowser) {\n      const el = elementRef.nativeElement;\n      this._rippleContainer = new Ripple(_ngZone, rippleStyles.stylesData, el);\n    }\n  }\n\n  ngOnInit() {\n    this.renderer.addClass(this.elementRef.nativeElement, this.classes.currentConfig);\n    this.renderer.addClass(this.elementRef.nativeElement, this.buttonService.classes.root);\n  }\n\n  public focused() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  ngAfterViewInit() {\n    const classes = this.buttonService.classes;\n      (this.buttonContent.nativeElement as HTMLElement).classList.add(\n        classes.buttonContent\n      );\n  }\n\n  private disableStyle() {\n    let style =\n    `box-shadow: 0 0 0 rgba(0, 0, 0, 0) !important;` +\n    `cursor: default;` +\n    `color: ${this.theme.config.text.disabled} !important;` +\n    `pointer-events: none;`;\n    if (this.bgAndColor && (this.bgAndColor.raised || this.bgAndColor.bg)) {\n      style += `background-color: ${this.theme.config.button.disabled} !important;`;\n    }\n    return style;\n  }\n\n  ngOnDestroy() {\n    if (Platform.isBrowser) {\n      this._rippleContainer.removeEvents();\n    }\n  }\n\n}\n","// App\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LyCommonModule } from '@alyle/ui';\nimport { LyButton } from './button';\nimport { LyRippleModule } from '@alyle/ui/ripple';\nimport { LyIconButton } from '@alyle/ui/icon-button';\n\n@NgModule({\n  imports: [CommonModule, LyRippleModule, LyCommonModule],\n  exports: [LyButton],\n  declarations: [LyButton]\n})\nexport class LyButtonModule {}\n"]}