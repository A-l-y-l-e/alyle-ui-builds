{"version":3,"file":"compiler.js","sourceRoot":"","sources":["../../../../lib/style-compiler/compiler.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport { findNode } from './util/util';\nimport { LylParse } from '../src/parse';\n\nconst REGEX_LY = () => /lyl\\s?(`{{*[^]*?}`)/g;\nconst LYL_BAD_REGEX = /^{\\n\\s\\*\\s/;\nconst REPLACE_ID_REGEX = () => /\\[ei([\\w]+)\\]/g;\nconst REPLACE_IMPORT_LYL = () => /import {[^}]*(lyl)[^}]*} from '[^']+';/g;\n\nexport function styleCompiler(content: string) {\n  let simpleStyles = 0;\n  let complexStyles = 0;\n\n  const result = content.replace(REGEX_LY(), (_ex, styleBlock: string) => {\n    if (LYL_BAD_REGEX.test(styleBlock)) {\n      return _ex;\n    }\n\n    simpleStyles++;\n    const source = ts.createSourceFile('', styleBlock, ts.ScriptTarget.Latest, true);\n    const templateExpression = findNode(source, ts.SyntaxKind.TemplateExpression) as ts.TemplateExpression | null;\n    if (!templateExpression) {\n      const cssContent = new LylParse(styleBlock.slice(1, styleBlock.length - 1)).toCss();\n      styleBlock = `(className: string) => \\`${cssContent}\\``;\n      return styleBlock;\n    }\n\n    let nextID = 0;\n    const data: {[key: string]: string} = {};\n    const templates = [\n      templateExpression.head.getFullText(),\n      ...templateExpression.templateSpans\n        .map(prop => {\n          const id = createUniqueID(nextID++);\n          data[id] = prop.expression.getFullText();\n          return `${id}${prop.literal.getFullText().trim()}`;\n        })\n    ];\n\n    const templateString = templates.join('');\n\n    if (templateString.includes('...${')) {\n      complexStyles++;\n    }\n\n    const css = new LylParse(\n      templateString.slice(1, templateString.length - 1)\n    ).toCss().replace(REPLACE_ID_REGEX(), (id: string) => data[id] || id);\n    styleBlock = `(className: string) => \\`${css}\\``;\n    return styleBlock;\n  });\n\n  return updateImport(result, simpleStyles, complexStyles);\n}\n\n\nfunction createUniqueID(count: number) {\n  const ID = `${count}${Date.now().toString(36)}${Math.random().toString(36).slice(2)}`;\n  return `[ei${ID}]`;\n}\n\n/**\n * If a string contains a lyl style\n * For testing purposes only\n * @param str content\n */\nexport function hasLylStyle(str: string) {\n  return REGEX_LY().test(str);\n}\n\nfunction updateImport(content: string, numSimpleStyles: number, numComplexStyles: number) {\n  if (!(numSimpleStyles || numComplexStyles)) {\n    return content;\n  }\n  return content.replace(REPLACE_IMPORT_LYL(), (full: string) => {\n\n    const source = ts.createSourceFile('', full, ts.ScriptTarget.Latest, true);\n    const importDeclaration = findNode(source, ts.SyntaxKind.ImportDeclaration) as ts.ImportDeclaration;\n    let imports = (importDeclaration.importClause!.namedBindings as ts.NamedImports)!\n      .elements.map((imp) => {\n        return imp.getText();\n      });\n    const modulePath = importDeclaration.moduleSpecifier.getFullText();\n    if ((numSimpleStyles && numComplexStyles) || numComplexStyles) {\n      imports = imports.map(\n        imp => imp === 'lyl' ? 'styleTemplateToString' : imp);\n    } else if (numSimpleStyles) {\n      imports = imports.filter(imp => imp !== 'lyl');\n    }\n    return `import {\\n  ${imports.join(`,\\n  `)} } from ${modulePath.trim()};`;\n  });\n}\n"]}