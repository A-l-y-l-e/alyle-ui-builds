{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../lib/style-compiler/main.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport { promises as fs, readFileSync } from 'fs';\nimport * as path from 'path';\nimport * as yargs from 'yargs';\nimport chalk from 'chalk';\nimport { styleCompiler, hasLylStyle } from './compiler';\n\nconst pkg = JSON.parse(readFileSync('package.json', 'utf8'));\n\nconst note = `Note: It is recommended to use git and have saved the changes.\\n`\n  + `Compile the files for production only, this will modify your\\nlyl styles to another format.\\n`;\n\nconst argv = yargs\n  .alias('h', 'help')\n  .alias('v', 'version')\n  .version()\n  .help(false).argv;\nif (argv.help) {\n  console.log(`Version ${pkg.version}\\n`);\n  console.log(chalk.bold.yellowBright(note));\n  console.log(`Examples: lyl dist/lib`);\n  process.exit(0);\n}\n\n\nasync function walk(dir: string, fileList: string[] = []) {\n  const files = await fs.readdir(dir);\n  for (const file of files) {\n    const stat = await fs.stat(path.join(dir, file));\n    if (stat.isDirectory()) {\n      fileList = await walk(path.join(dir, file), fileList);\n    } else {\n      fileList.push(path.join(dir, file));\n    }\n  }\n  return fileList;\n}\n\nconst directory = argv._[0];\n\nif (directory) {\n  console.log(chalk.bold.blueBright(`Directory: ${directory}`));\n} else {\n  console.log(chalk.bold.redBright(`Require directory`));\n  console.log(`Examples: lyl dist/lib`);\n  process.exit(1);\n}\n\nwalk(directory).then(async (res) => {\n  res = res\n    .filter(file => file.endsWith('.ts'));\n\n  res.forEach(async file => {\n    const content = (await fs.readFile(file)).toString('utf8');\n    const hasLyl = hasLylStyle(content);\n    if (hasLyl) {\n      const compiled = styleCompiler(content);\n      await fs.writeFile(file, compiled, 'utf8');\n      console.log(`${chalk.bold.greenBright('Updated: ')}${file}`);\n    }\n  });\n\n});\n"]}