{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../lib/style-compiler/util/util.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAEjC,SAAgB,QAAQ,CAAC,IAAa,EAAE,IAAmB;IACzD,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;QACpB,OAAO,IAAI,CAAC;KACf;IACD,IAAI,SAAS,GAAmB,IAAI,CAAC;IACrC,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE;QAC9B,SAAS,GAAG,SAAS,IAAI,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IACH,OAAO,SAAS,CAAC;AACnB,CAAC;AATD,4BASC;AAED,SAAgB,QAAQ,CAAC,IAAa;IACpC,MAAM,KAAK,GAAc,EAAE,CAAC;IAC5B,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAC1D,OAAO,KAAK,CAAC;AACf,CAAC;AAJD,4BAIC","sourcesContent":["import * as ts from 'typescript';\n\nexport function findNode(node: ts.Node, kind: ts.SyntaxKind) {\n  if (node.kind === kind) {\n      return node;\n  }\n  let foundNode: null | ts.Node = null;\n  ts.forEachChild(node, childNode => {\n      foundNode = foundNode || findNode(childNode, kind);\n  });\n  return foundNode;\n}\n\nexport function getNodes(node: ts.Node) {\n  const nodes: ts.Node[] = [];\n  ts.forEachChild(node, childNode => nodes.push(childNode));\n  return nodes;\n}\n"]}