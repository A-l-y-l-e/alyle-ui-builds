import * as tslib_1 from "tslib";
import { shadowBuilder, StyleCollection, mergeThemes } from '@alyle/ui';
import { MinimaBase } from './base';
import { color, Color } from '@alyle/ui/color';
var contrast = new Color(0xffffff);
var shadow = new Color(0, 0, 0, 1);
var MinimaDark = /** @class */ (function (_super) {
    tslib_1.__extends(MinimaDark, _super);
    function MinimaDark() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'minima-dark';
        _this.primary = {
            default: color(0x1DE9B6),
            contrast: new Color(0, 0, 0, 0.87)
        };
        _this.accent = {
            default: new Color(0x9C27B0),
            contrast: contrast
        };
        _this.warn = {
            default: new Color(0xEA404C),
            contrast: contrast
        };
        _this.disabled = {
            default: new Color(255, 255, 255, 0.3),
            contrast: new Color(255, 255, 255, 0.5)
        };
        _this.action = {
            default: new Color(255, 255, 255, 0.70),
            contrast: new Color(0, 0, 0, 0.87)
        };
        _this.background = {
            default: new Color(0x303030),
            primary: {
                default: new Color(0x242424),
                shadow: shadow
            },
            secondary: new Color(47, 47, 47),
            tertiary: new Color(65, 65, 65),
        };
        _this.hover = new Color(255, 255, 255, 0.04);
        _this.paper = {
            default: new Color(0x242424),
            shadow: shadow
        };
        _this.text = {
            default: new Color(0xffffff),
            primary: new Color(0xffffff),
            secondary: new Color(255, 255, 255, 0.70),
            disabled: new Color(255, 255, 255, 0.50),
            hint: new Color(255, 255, 255, 0.50),
            dark: new Color(0x2b2b2b),
            light: new Color(0xffffff)
        };
        _this.drawer = {
            backdrop: new Color(49, 49, 49, .6)
        };
        _this.bar = new Color(0x212121);
        _this.divider = new Color(255, 255, 255, 0.12);
        _this.colorShadow = shadow;
        _this.shadow = shadow;
        _this.field = mergeThemes(_this.field, {
            root: function (_) { return function (className) { return className + " " + _.container + ":after," + className + " " + _.fieldset + "," + className + " " + _.labelContainer + "{border-color:" + new Color(255, 255, 255, 0.12) + ";}" + className + " " + _.label + "," + className + " " + _.placeholder + "{color:" + new Color(255, 255, 255, 0.4) + ";}"; }; },
            appearance: {
                filled: function (_) { return function (className) { return className + " " + _.container + "{background-color:" + new Color(255, 255, 255, 0.04) + ";}"; }; }
            }
        });
        _this.snackBar = {
            root: new StyleCollection(function (className) { return className + "{background:" + new Color(0xfafafa) + ";color:" + new Color(0, 0, 0, .87) + ";box-shadow:" + shadowBuilder(4, new Color(0xfafafa)) + ";}"; })
        };
        _this.tooltip = {
            root: new StyleCollection(function () { return function (className) { return className + "{background:" + new Color(250, 250, 250, 0.85) + ";color:" + new Color(0, 0, 0, .87) + ";}"; }; })
        };
        return _this;
    }
    return MinimaDark;
}(MinimaBase));
export { MinimaDark };
//# sourceMappingURL=data:application/json;base64,