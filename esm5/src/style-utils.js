import * as tslib_1 from "tslib";
import { Color, hexColorToInt } from '@alyle/ui/color';
import { _STYLE_MAP } from './theme/style';
import { StyleCollection } from './parse';
var LyStyleUtils = /** @class */ (function () {
    function LyStyleUtils() {
        /** Returns top */
        this.above = 'top';
        /** Returns bottom */
        this.below = 'bottom';
    }
    Object.defineProperty(LyStyleUtils.prototype, "before", {
        /** Returns left or right according to the direction */
        get: function () {
            return this.getDirection(DirAlias.before);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyStyleUtils.prototype, "after", {
        /** Returns left or right according to the direction */
        get: function () {
            return this.getDirection(DirAlias.after);
        },
        enumerable: true,
        configurable: true
    });
    LyStyleUtils.prototype.pxToRem = function (value) {
        var size = this.typography.fontSize / 14;
        return value / this.typography.htmlFontSize * size + "rem";
    };
    LyStyleUtils.prototype.colorOf = function (value, optional) {
        if (typeof value === 'number') {
            return new Color(value);
        }
        if (value.includes('#') && value.length === 7) {
            return new Color(hexColorToInt(value));
        }
        var color = get(this, value, optional);
        if (color) {
            return color;
        }
        /** Create invalid color */
        return new Color();
    };
    LyStyleUtils.prototype.getBreakpoint = function (key) {
        return "@media " + (this.breakpoints[key] || key);
    };
    LyStyleUtils.prototype.selectorsOf = function (styles) {
        var styleMap = _STYLE_MAP.get(styles);
        if (styleMap) {
            return styleMap.classes || styleMap[this.name];
        }
        else {
            throw Error('Classes not found');
        }
    };
    LyStyleUtils.prototype.getDirection = function (val) {
        if (val === DirAlias.before) {
            return this.direction === 'rtl' ? 'right' : 'left';
        }
        else if (val === DirAlias.after) {
            return this.direction === 'rtl' ? 'left' : 'right';
        }
        else if (val === 'above') {
            return 'top';
        }
        else if (val === 'below') {
            return 'bottom';
        }
        return val;
    };
    return LyStyleUtils;
}());
export { LyStyleUtils };
export var Dir;
(function (Dir) {
    Dir["rtl"] = "rtl";
    Dir["ltr"] = "ltr";
})(Dir || (Dir = {}));
export var DirAlias;
(function (DirAlias) {
    DirAlias["before"] = "before";
    DirAlias["after"] = "after";
})(DirAlias || (DirAlias = {}));
export var DirPosition;
(function (DirPosition) {
    DirPosition["left"] = "left";
    DirPosition["right"] = "right";
})(DirPosition || (DirPosition = {}));
/**
 * get color of object
 * @param obj object
 * @param path path
 * @param optional get optional value, if not exist return default if not is string
 */
function get(obj, path, optional) {
    if (path === 'transparent') {
        return new Color(0, 0, 0, 0);
    }
    var _path = path instanceof Array ? path : path.split(':');
    for (var i = 0; i < _path.length; i++) {
        var posibleOb = obj[_path[i]];
        if (posibleOb) {
            obj = posibleOb;
        }
        else {
            /** if not exist */
            return new Color();
        }
    }
    if (obj instanceof Color) {
        return obj;
    }
    else if (optional) {
        return obj[optional] || obj['default'];
    }
    else {
        return obj['default'];
    }
    // return typeof obj === 'string' ? obj as string : obj['default'] as string;
}
export function eachMedia(str, fn, withStyleCollection) {
    var styleCollection;
    if (withStyleCollection) {
        styleCollection = new StyleCollection();
    }
    if (typeof str === 'string') {
        var values = str.split(/\ /g);
        for (var index = 0; index < values.length; index++) {
            var valItem = values[index].split(/\@/g);
            var strValue = valItem.shift();
            var len = valItem.length;
            var value = isNaN(+strValue) ? strValue : +strValue;
            if (len) {
                for (var j = 0; j < len; j++) {
                    resolveMediaEachItemStyle(fn, value, valItem[j], index, styleCollection);
                }
            }
            else {
                resolveMediaEachItemStyle(fn, value, null, index, styleCollection);
            }
        }
    }
    else if (Array.isArray(str)) {
        for (var index = 0; index < str.length; index++) {
            var val = str[index];
            if (typeof val === 'number' || typeof val === 'string') {
                resolveMediaEachItemStyle(fn, val, null, index, styleCollection);
            }
            else {
                var medias = val[1].split(/\@/g).filter(function (media) { return media; });
                var strValue = val[0];
                var len = medias.length;
                if (len) {
                    for (var ii = 0; ii < len; ii++) {
                        resolveMediaEachItemStyle(fn, strValue, medias[ii], index, styleCollection);
                    }
                }
                else {
                    resolveMediaEachItemStyle(fn, strValue, null, index, styleCollection);
                }
            }
        }
    }
    else {
        resolveMediaEachItemStyle(fn, str, null, 0, styleCollection);
    }
    if (styleCollection) {
        return styleCollection.css;
    }
}
function resolveMediaEachItemStyle(fn, val, media, index, styleCollection) {
    var styl = fn(val, media, index);
    if (styleCollection && styl) {
        styleCollection.add(styl);
    }
}
/**
 * Simple object check.
 * @param item
 */
function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item));
}
/**
 * Deep merge two objects.
 * @param target
 * @param ...sources
 */
export function mergeDeep(target) {
    var _a, _b;
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    if (!sources.length) {
        return target;
    }
    var source = sources.shift();
    if (isObject(target) && isObject(source)) {
        for (var key in source) {
            if (isObject(source[key])) {
                if (!target[key]) {
                    Object.assign(target, (_a = {}, _a[key] = {}, _a));
                }
                mergeDeep(target[key], source[key]);
            }
            else {
                Object.assign(target, (_b = {}, _b[key] = source[key], _b));
            }
        }
    }
    return mergeDeep.apply(void 0, tslib_1.__spread([target], sources));
}
/**
 * Simple object check.
 * @param item
 */
function isObjectForTheme(item) {
    return (item && typeof item === 'object' && !Array.isArray(item))
        && !(item instanceof StyleCollection)
        && !(item instanceof Color);
}
export function mergeThemes(target) {
    var _a, _b;
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    if (!sources.length) {
        return target;
    }
    var source = sources.shift();
    if (isObjectForTheme(target) && isObjectForTheme(source)) {
        for (var key in source) {
            if (isObjectForTheme(source[key])) {
                if (!target[key]) {
                    Object.assign(target, (_a = {}, _a[key] = {}, _a));
                }
                mergeThemes(target[key], source[key]);
            }
            else {
                var targetKey = target[key];
                var sourceKey = source[key];
                // Merge styles
                if (targetKey instanceof StyleCollection && typeof sourceKey === 'function') {
                    target[key] = target[key].add(sourceKey);
                }
                else if (sourceKey instanceof Color) {
                    target[key] = sourceKey;
                }
                else {
                    Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                }
            }
        }
    }
    return mergeThemes.apply(void 0, tslib_1.__spread([target], sources));
}
//# sourceMappingURL=data:application/json;base64,