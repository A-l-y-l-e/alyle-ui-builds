import * as tslib_1 from "tslib";
import { Injectable, ElementRef, Optional } from '@angular/core';
import { LyTheme2, ThemeRef } from '../theme/theme2.service';
import { LyHostClass } from './host-class';
import { TypeStyle } from '../theme/style';
var StyleRenderer = /** @class */ (function () {
    function StyleRenderer(_el, _theme, _hostClass) {
        this._theme = _theme;
        this._hostClass = _hostClass;
    }
    /**
     * Build multiple styles and render them in the DOM
     */
    StyleRenderer.prototype.addSheet = function (styles) {
        return this._theme._createStyleContent2(styles, null, null, TypeStyle.Multiple);
    };
    StyleRenderer.prototype.add = function (id, style, priority, oldClass) {
        var args = arguments;
        /** Class name or keyframe name */
        var className;
        var len = args.length;
        // clean
        if (len === 4 && args[3] == null) {
            len -= 1;
        }
        if (len === 3 && args[2] == null) {
            len -= 1;
        }
        if (len === 1) {
            className = this._theme._createStyleContent2(id, null, null, TypeStyle.LylStyle);
        }
        else if (len === 2) {
            if (typeof id === 'string') {
                className = this._theme._createStyleContent2(style, id, null, TypeStyle.LylStyle);
            }
            else if (typeof style === 'number') {
                className = this._theme._createStyleContent2(id, null, style, TypeStyle.LylStyle);
            }
            else {
                className = this._theme._createStyleContent2(id, null, null, TypeStyle.LylStyle);
                oldClass = style;
            }
        }
        else if (len === 3) {
            if (typeof id === 'string') {
                if (typeof priority === 'number') {
                    // (id, style, priority)
                    className = this._theme._createStyleContent2(style, id, priority, TypeStyle.LylStyle);
                }
                else {
                    // (id, style, oldClass)
                    className = this._theme._createStyleContent2(style, id, null, TypeStyle.LylStyle);
                    oldClass = priority;
                }
            }
            else {
                // (style, priority, oldClass)
                className = this._theme._createStyleContent2(id, null, style, TypeStyle.LylStyle);
                oldClass = priority;
            }
        }
        else if (len === 4) {
            className = this._theme._createStyleContent2(style, id, priority, TypeStyle.LylStyle);
        }
        if (this._hostClass) {
            return this._hostClass.update(className, oldClass);
        }
        throw new Error("LyHostClass is required "
            + "to update classes.\n\n"
            + "Add LyHostClass to Component or Directive:\n\n"
            + "e.g:\n\n"
            + "@Component({\n"
            + "  providers: [ LyHostClass ]\n"
            + "})\n");
    };
    StyleRenderer.ctorParameters = function () { return [
        { type: ElementRef },
        { type: LyTheme2 },
        { type: LyHostClass, decorators: [{ type: Optional }] }
    ]; };
    StyleRenderer = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(2, Optional())
    ], StyleRenderer);
    return StyleRenderer;
}());
export { StyleRenderer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXItc3R5bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWx5bGUvdWkvIiwic291cmNlcyI6WyJzcmMvbWluaW1hbC9yZW5kZXJlci1zdHlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFN0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUF1QixNQUFNLGdCQUFnQixDQUFDO0FBR2hFO0lBQ0UsdUJBQ0UsR0FBZSxFQUNQLE1BQWdCLEVBQ0osVUFBdUI7UUFEbkMsV0FBTSxHQUFOLE1BQU0sQ0FBVTtRQUNKLGVBQVUsR0FBVixVQUFVLENBQWE7SUFDekMsQ0FBQztJQUVMOztPQUVHO0lBQ0gsZ0NBQVEsR0FBUixVQUFZLE1BQW9CO1FBQzlCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQXlDRCwyQkFBRyxHQUFILFVBQ0UsRUFBMkQsRUFDM0QsS0FBd0UsRUFDeEUsUUFBNkMsRUFDN0MsUUFBb0M7UUFFcEMsSUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3ZCLGtDQUFrQztRQUNsQyxJQUFJLFNBQTZCLENBQUM7UUFDbEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUV0QixRQUFRO1FBQ1IsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDaEMsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUNWO1FBQ0QsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLElB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ZSwgRWxlbWVudFJlZiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEx5VGhlbWUyLCBUaGVtZVJlZiB9IGZyb20gJy4uL3RoZW1lL3RoZW1lMi5zZXJ2aWNlJztcbmltcG9ydCB7IFN0eWxlVGVtcGxhdGUgfSBmcm9tICcuLi9wYXJzZSc7XG5pbXBvcnQgeyBMeUhvc3RDbGFzcyB9IGZyb20gJy4vaG9zdC1jbGFzcyc7XG5pbXBvcnQgeyBUeXBlU3R5bGUsIEx5U3R5bGVzLCBMeUNsYXNzZXMgfSBmcm9tICcuLi90aGVtZS9zdHlsZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdHlsZVJlbmRlcmVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgX2VsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgX3RoZW1lOiBMeVRoZW1lMixcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIF9ob3N0Q2xhc3M6IEx5SG9zdENsYXNzXG4gICkgeyB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIG11bHRpcGxlIHN0eWxlcyBhbmQgcmVuZGVyIHRoZW0gaW4gdGhlIERPTVxuICAgKi9cbiAgYWRkU2hlZXQ8VD4oc3R5bGVzOiBUICYgTHlTdHlsZXMpOiBMeUNsYXNzZXM8VD4ge1xuICAgIHJldHVybiB0aGlzLl90aGVtZS5fY3JlYXRlU3R5bGVDb250ZW50MihzdHlsZXMsIG51bGwsIG51bGwsIFR5cGVTdHlsZS5NdWx0aXBsZSk7XG4gIH1cblxuICBhZGQoXG4gICAgc3R5bGU6ICh0aGVtZTogYW55LCByZWY6IFRoZW1lUmVmKSA9PiBTdHlsZVRlbXBsYXRlXG4gICk6IHN0cmluZztcbiAgYWRkKFxuICAgIHN0eWxlOiAodGhlbWU6IGFueSwgcmVmOiBUaGVtZVJlZikgPT4gU3R5bGVUZW1wbGF0ZSxcbiAgICBwcmlvcml0eTogbnVtYmVyXG4gICk6IHN0cmluZztcbiAgYWRkKFxuICAgIHN0eWxlOiAodGhlbWU6IGFueSwgcmVmOiBUaGVtZVJlZikgPT4gU3R5bGVUZW1wbGF0ZSxcbiAgICBvbGRDbGFzczogc3RyaW5nXG4gICk6IHN0cmluZztcbiAgYWRkKFxuICAgIGlkOiBzdHJpbmcsXG4gICAgc3R5bGU6ICh0aGVtZTogYW55LCByZWY6IFRoZW1lUmVmKSA9PiBTdHlsZVRlbXBsYXRlXG4gICk6IHN0cmluZztcblxuICBhZGQoXG4gICAgc3R5bGU6ICh0aGVtZTogYW55LCByZWY6IFRoZW1lUmVmKSA9PiBTdHlsZVRlbXBsYXRlLFxuICAgIHByaW9yaXR5OiBudW1iZXIsXG4gICAgb2xkQ2xhc3M6IHN0cmluZyB8IG51bGxcbiAgKTogc3RyaW5nO1xuICBhZGQoXG4gICAgaWQ6IHN0cmluZyxcbiAgICBzdHlsZTogKHRoZW1lOiBhbnksIHJlZjogVGhlbWVSZWYpID0+IFN0eWxlVGVtcGxhdGUsXG4gICAgcHJpb3JpdHk6IG51bWJlclxuICApOiBzdHJpbmc7XG4gIGFkZChcbiAgICBpZDogc3RyaW5nLFxuICAgIHN0eWxlOiAodGhlbWU6IGFueSwgcmVmOiBUaGVtZVJlZikgPT4gU3R5bGVUZW1wbGF0ZSxcbiAgICBvbGRDbGFzczogc3RyaW5nIHwgbnVsbFxuICApOiBzdHJpbmc7XG5cbiAgYWRkKFxuICAgIGlkOiBzdHJpbmcsXG4gICAgc3R5bGU6ICh0aGVtZTogYW55LCByZWY6IFRoZW1lUmVmKSA9PiBTdHlsZVRlbXBsYXRlLFxuICAgIHByaW9yaXR5OiBudW1iZXIsXG4gICAgb2xkQ2xhc3M6IHN0cmluZyB8IG51bGxcbiAgKTogc3RyaW5nO1xuXG4gIGFkZChcbiAgICBpZDogc3RyaW5nIHwgKCh0aGVtZTogYW55LCByZWY6IFRoZW1lUmVmKSA9PiBTdHlsZVRlbXBsYXRlKSxcbiAgICBzdHlsZT86ICgodGhlbWU6IGFueSwgcmVmOiBUaGVtZVJlZikgPT4gU3R5bGVUZW1wbGF0ZSkgfCBudW1iZXIgfCBzdHJpbmcsXG4gICAgcHJpb3JpdHk/OiBudW1iZXIgfCBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsLFxuICAgIG9sZENsYXNzPzogc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbFxuICApOiBzdHJpbmcge1xuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgLyoqIENsYXNzIG5hbWUgb3Iga2V5ZnJhbWUgbmFtZSAqL1xuICAgIGxldCBjbGFzc05hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBsZXQgbGVuID0gYXJncy5sZW5ndGg7XG5cbiAgICAvLyBjbGVhblxuICAgIGlmIChsZW4gPT09IDQgJiYgYXJnc1szXSA9PSBudWxsKSB7XG4gICAgICBsZW4gLT0gMTtcbiAgICB9XG4gICAgaWYgKGxlbiA9PT0gMyAmJiBhcmdzWzJdID09IG51bGwpIHtcbiAgICAgIGxlbiAtPSAxO1xuICAgIH1cblxuICAgIGlmIChsZW4gPT09IDEpIHtcbiAgICAgIGNsYXNzTmFtZSA9IHRoaXMuX3RoZW1lLl9jcmVhdGVTdHlsZUNvbnRlbnQyKGlkLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBUeXBlU3R5bGUuTHlsU3R5bGUpO1xuICAgIH0gZWxzZSBpZiAobGVuID09PSAyKSB7XG4gICAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICBjbGFzc05hbWUgPSB0aGlzLl90aGVtZS5fY3JlYXRlU3R5bGVDb250ZW50MihzdHlsZSBhcyAodGhlbWU6IGFueSwgcmVmOiBUaGVtZVJlZikgPT4gU3R5bGVUZW1wbGF0ZSxcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFR5cGVTdHlsZS5MeWxTdHlsZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gdGhpcy5fdGhlbWUuX2NyZWF0ZVN0eWxlQ29udGVudDIoaWQgYXMgKHRoZW1lOiBhbnksIHJlZjogVGhlbWVSZWYpID0+IFN0eWxlVGVtcGxhdGUsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICBUeXBlU3R5bGUuTHlsU3R5bGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xhc3NOYW1lID0gdGhpcy5fdGhlbWUuX2NyZWF0ZVN0eWxlQ29udGVudDIoaWQgYXMgKHRoZW1lOiBhbnksIHJlZjogVGhlbWVSZWYpID0+IFN0eWxlVGVtcGxhdGUsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFR5cGVTdHlsZS5MeWxTdHlsZSk7XG4gICAgICAgICAgb2xkQ2xhc3MgPSBzdHlsZSBhcyBzdHJpbmc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsZW4gPT09IDMpIHtcbiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJpb3JpdHkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgLy8gKGlkLCBzdHlsZSwgcHJpb3JpdHkpXG4gICAgICAgICAgY2xhc3NOYW1lID0gdGhpcy5fdGhlbWUuX2NyZWF0ZVN0eWxlQ29udGVudDIoc3R5bGUgYXMgKHRoZW1lOiBhbnksIHJlZjogVGhlbWVSZWYpID0+IFN0eWxlVGVtcGxhdGUsXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgcHJpb3JpdHksXG4gICAgICAgICAgVHlwZVN0eWxlLkx5bFN0eWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyAoaWQsIHN0eWxlLCBvbGRDbGFzcylcbiAgICAgICAgICBjbGFzc05hbWUgPSB0aGlzLl90aGVtZS5fY3JlYXRlU3R5bGVDb250ZW50MihzdHlsZSBhcyAodGhlbWU6IGFueSwgcmVmOiBUaGVtZVJlZikgPT4gU3R5bGVUZW1wbGF0ZSxcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFR5cGVTdHlsZS5MeWxTdHlsZSk7XG4gICAgICAgICAgb2xkQ2xhc3MgPSBwcmlvcml0eTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gKHN0eWxlLCBwcmlvcml0eSwgb2xkQ2xhc3MpXG4gICAgICAgIGNsYXNzTmFtZSA9IHRoaXMuX3RoZW1lLl9jcmVhdGVTdHlsZUNvbnRlbnQyKGlkIGFzICh0aGVtZTogYW55LCByZWY6IFRoZW1lUmVmKSA9PiBTdHlsZVRlbXBsYXRlLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgc3R5bGUgYXMgbnVtYmVyLFxuICAgICAgICAgIFR5cGVTdHlsZS5MeWxTdHlsZSk7XG4gICAgICAgIG9sZENsYXNzID0gcHJpb3JpdHkgYXMgc3RyaW5nO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobGVuID09PSA0KSB7XG4gICAgICBjbGFzc05hbWUgPSB0aGlzLl90aGVtZS5fY3JlYXRlU3R5bGVDb250ZW50MihzdHlsZSBhcyAodGhlbWU6IGFueSwgcmVmOiBUaGVtZVJlZikgPT4gU3R5bGVUZW1wbGF0ZSxcbiAgICAgICAgaWQgYXMgc3RyaW5nLFxuICAgICAgICBwcmlvcml0eSBhcyBudW1iZXIsXG4gICAgICAgIFR5cGVTdHlsZS5MeWxTdHlsZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9ob3N0Q2xhc3MpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ob3N0Q2xhc3MudXBkYXRlKGNsYXNzTmFtZSEsIG9sZENsYXNzKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEx5SG9zdENsYXNzIGlzIHJlcXVpcmVkIGBcbiAgICAgICsgYHRvIHVwZGF0ZSBjbGFzc2VzLlxcblxcbmBcbiAgICAgICsgYEFkZCBMeUhvc3RDbGFzcyB0byBDb21wb25lbnQgb3IgRGlyZWN0aXZlOlxcblxcbmBcbiAgICAgICsgYGUuZzpcXG5cXG5gXG4gICAgICArIGBAQ29tcG9uZW50KHtcXG5gXG4gICAgICArIGAgIHByb3ZpZGVyczogWyBMeUhvc3RDbGFzcyBdXFxuYFxuICAgICAgKyBgfSlcXG5gXG4gICAgKTtcbiAgfVxufVxuXG4iXX0=