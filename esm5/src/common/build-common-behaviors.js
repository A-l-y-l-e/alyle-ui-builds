import * as tslib_1 from "tslib";
import { Color } from '@alyle/ui/color';
import { shadowBuilder } from '../shadow';
import { getNativeElement } from '../minimal/common';
var DEFAULT_VALUE = '';
var STYLE_PRIORITY = -1;
export function mixinStyleUpdater(base) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(class_1, _super);
        function class_1() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return _super.apply(this, tslib_1.__spread(args)) || this;
        }
        class_1.prototype.setAutoContrast = function () {
            this._autoContrast = true;
        };
        class_1.prototype.updateStyle = function (element) {
            var __bg = this._superHyperInternalPropertyBg;
            var __color = this._superHyperInternalPropertyColor === 'auto'
                ? ''
                : this._superHyperInternalPropertyColor;
            var __raised = this._superHyperInternalPropertyRaised;
            var __elevation = this._superHyperInternalPropertyElevation;
            var __disabled = this._superHyperInternalPropertyDisabled;
            var __outlined = this._superHyperInternalPropertyOutlined;
            var __shadowColor = this._superHyperInternalPropertyShadowColor;
            var __isContrast = this._autoContrast || this._superHyperInternalPropertyColor === 'auto';
            var el = getNativeElement(element);
            var newKey = "c--" + (__bg || DEFAULT_VALUE) + "_" + (__color || DEFAULT_VALUE) + "_" + (__raised || DEFAULT_VALUE) + "_" + (__elevation || DEFAULT_VALUE) + "_" + (__disabled || DEFAULT_VALUE) + "_" + (__outlined || DEFAULT_VALUE) + "_" + (__shadowColor || DEFAULT_VALUE) + "_" + (__isContrast || DEFAULT_VALUE);
            var newClass = this._theme.renderStyle(newKey, function (theme) {
                var sColor;
                var sBackground;
                var sBorder;
                var sPointerEvents;
                var sBoxShadow;
                var sBoxShadowActive;
                if (__outlined) {
                    sBorder = '1px solid currentColor';
                }
                if (__disabled) {
                    sColor = theme.disabled.contrast;
                    sPointerEvents = 'none';
                    if (__bg) {
                        sBackground = theme.disabled.default;
                    }
                }
                else {
                    if (__bg) {
                        sBackground = colorOf(theme, __bg);
                        if (__isContrast && !__color) {
                            sColor = theme.colorOf(__bg + ":contrast");
                            // Generate auto contrast if is necessary
                            if (sColor.css().includes('invalid')) {
                                var lum = (__bg instanceof Color ? __bg : theme.colorOf(__bg)).luminance();
                                sColor = lum < 0.5 ? theme.text.light : theme.text.dark;
                            }
                        }
                    }
                    if (!sColor && __color) {
                        sColor = colorOf(theme, __color);
                    }
                    if (__raised || (__elevation != null)) {
                        if (!__bg) {
                            sBackground = theme.background.primary.default;
                        }
                        var backgroundColorCss = sBackground !== __bg && colorOf(theme, __bg || 'background:primary', 'shadow');
                        var shadowColor = (__shadowColor && colorOf(theme, __shadowColor)) || backgroundColorCss || sBackground || sColor || theme.shadow;
                        if (__elevation != null) {
                            sBoxShadow = shadowBuilder(__elevation, shadowColor);
                        }
                        else {
                            sBoxShadow = shadowBuilder(3, shadowColor);
                            sBoxShadowActive = shadowBuilder(8, shadowColor);
                        }
                    }
                }
                return function (className) { return className + "{" + (sColor ? 'color:' + sColor : '') + ";" + (sBackground ? 'background:' + sBackground : '') + ";" + (sBorder ? 'border:' + sBorder : '') + ";" + (sPointerEvents ? 'pointer-events:' + sPointerEvents : '') + ";" + (sBoxShadow ? 'box-shadow:' + sBoxShadow : '') + ";}" + className + ":active{" + (sBoxShadowActive ? 'box-shadow:' + sBoxShadowActive : '') + ";}"; };
            }, STYLE_PRIORITY);
            el.classList.remove(this._classNameAnonymous);
            el.classList.add(newClass);
            this._classNameAnonymous = newClass;
        };
        return class_1;
    }(base));
}
function colorOf(theme, color, optional) {
    return color instanceof Color ? color : theme.colorOf(color, optional);
}
//# sourceMappingURL=data:application/json;base64,