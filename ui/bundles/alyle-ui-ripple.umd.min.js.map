{"version":3,"sources":["ng://@alyle/ui/ripple/ripple.ts","ng://@alyle/ui/ripple/ripple.service.ts","ng://@alyle/ui/ripple/ripple.directive.ts","ng://@alyle/ui/ripple/ripple.module.ts"],"names":["RippleRef","Date","now","document","createElement","prototype","end","this","state","timestamp","Ripple","_ngZone","stylesData","_containerElement","_triggerElement","Map","passive","Platform","isBrowser","TouchEvent","_eventHandlers","set","onPointerDown","bind","onPointerLeave","setTriggerElement","setConfig","config","rippleConfig","getBoundingClientRect","element","classList","add","runOutsideAngular","_this","forEach","fn","type","addEventListener","_eventOptions","createRipple","styles","_rippleRef","container","key","className","hasOwnProperty","style","appendChild","window","getComputedStyle","getPropertyValue","transform","event","disabled","endRipple","startRipple","containerRect","_rectContainer","x","clientX","y","clientY","centered","left","width","top","height","radius","maxSize","rect","Math","max","rippleRadius","distX","abs","right","distY","bottom","sqrt","percentageToIncrease","transitionDuration","_transitionDuration","runTimeoutOutsideZone","delay","setTimeout","rippleRef","duration","parseFloat","opacity","parentNode","removeChild","removeEvents","removeEventListener","LyRippleService","coreTheme","root","setUpStyleSecondary","","host","setUpStyle","rippleContainer","push","Injectable","args","providedIn","CoreTheme","LyRipple","rippleService","_elementRef","_renderer","nativeElement","Object","defineProperty","toBoolean","lyRippleCentered","lyRippleDisabled","sensitive","lyRippleSensitive","lyRippleRadius","lyRipplePercentageToIncrease","ngOnInit","_updateRipple","ngOnChanges","changes","lyRippleConfig","ngOnDestroy","Directive","selector","exportAs","ElementRef","NgZone","Renderer2","Input","LyRippleModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { ElementRef, NgZone, Renderer2 } from '@angular/core';\nimport { Platform } from '@alyle/ui';\n\nexport interface RippleConfig {\n  centered?: boolean;\n  disabled?: boolean;\n  sensitive?: boolean;\n  radius?: 'containerSize' | number;\n  percentageToIncrease?: number;\n}\n\nexport class RippleRef {\n  state = true;\n  timestamp = -Date.now();\n  readonly container: HTMLElement = document.createElement('span');\n  end() {\n    this.state = false;\n    this.timestamp += Date.now();\n  }\n}\n\nexport class Ripple {\n  private _rippleRef: RippleRef;\n  private _state = true;\n  private _eventHandlers: Map<string, (e: Event) => void> = new Map<string, (e: Event) => void>();\n  private rippleConfig: RippleConfig = {};\n  private _transitionDuration = '950ms';\n  private _eventOptions = {passive: true} as any;\n  constructor(\n    private _ngZone: NgZone,\n    private stylesData: string[],\n    private _containerElement: HTMLElement,\n    private _triggerElement?: HTMLElement\n  ) {\n    if (Platform.isBrowser) {\n      if (typeof TouchEvent === 'function' && !!TouchEvent) {\n        this._eventHandlers.set('pointerdown', this.onPointerDown.bind(this));\n        this._eventHandlers.set('touchend', this.onPointerLeave.bind(this));\n      } else {\n        this._eventHandlers.set('mousedown', this.onPointerDown.bind(this));\n      }\n      this._eventHandlers.set('mouseup', this.onPointerLeave.bind(this));\n      this._eventHandlers.set('mouseleave', this.onPointerLeave.bind(this));\n      if (!_triggerElement) {\n        _triggerElement = _containerElement;\n      }\n      this.setTriggerElement(_triggerElement);\n    }\n  }\n\n  setConfig(config: RippleConfig) {\n    this.rippleConfig = config;\n  }\n\n  private get _rectContainer(): ClientRect {\n    return this._containerElement.getBoundingClientRect();\n  }\n\n  private setTriggerElement(element: HTMLElement | null) {\n    if (element) {\n      element.classList.add(this.stylesData[0]);\n      // this._renderer.addClass(element, this.stylesData[0].id);\n      this._ngZone.runOutsideAngular(() => {\n        this._eventHandlers.forEach((fn, type) => element.addEventListener(type, fn, this._eventOptions));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n\n  private createRipple(styles: {[key: string]: number | string}) {\n    this._rippleRef = new RippleRef();\n    const container = this._rippleRef.container;\n    container.className = this.stylesData[1];\n    for (const key in styles) {\n      if (styles.hasOwnProperty(key)) {\n        const element = styles[key];\n        if (typeof element === 'number') {\n          container.style[key] = `${element}px`;\n        } else {\n          container.style[key] = element;\n        }\n      }\n    }\n    this._containerElement.appendChild(container);\n    window.getComputedStyle(container).getPropertyValue('opacity');\n    container.style.transform = `scale(1)`;\n  }\n\n  private onPointerDown(event: MouseEvent) {\n    if (!this.rippleConfig.disabled) {\n      /**Destroy previous ripple if exist */\n      this.endRipple();\n      this.startRipple(event, this.rippleConfig);\n    }\n  }\n  private onPointerLeave(event: MouseEvent) {\n    if (!this.rippleConfig.disabled) {\n      this.endRipple();\n    }\n  }\n\n  startRipple(event: MouseEvent | PointerEvent, rippleConfig: RippleConfig) {\n    const containerRect = this._rectContainer;\n    let x = event.clientX,\n    y = event.clientY;\n    if (rippleConfig.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n    const left = x - containerRect.left;\n    const top = y - containerRect.top;\n    let radius = rippleConfig.radius === 'containerSize' ? maxSize(containerRect) / 2 : rippleConfig.radius || rippleRadius(x, y, containerRect);\n    if (rippleConfig.percentageToIncrease) {\n      radius += radius * rippleConfig.percentageToIncrease / 100;\n    }\n    const ripple = this.createRipple({\n      left: left - radius,\n      top: top - radius,\n      width: radius * 2,\n      height: radius * 2,\n      transitionDuration: this._transitionDuration\n    });\n  }\n\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  endRipple() {\n    const rippleRef: RippleRef = this._rippleRef || null;\n    const duration = parseFloat(this._transitionDuration);\n    if (rippleRef && rippleRef.state) {\n      rippleRef.end();\n      this.runTimeoutOutsideZone(() => {\n        rippleRef.container.style.opacity = '0';\n        rippleRef.container.style.transitionDuration = '200ms';\n      // }, rippleRef.timestamp < duration ? duration : 0);\n      // }, rippleRef.timestamp < duration ? duration / (duration * .001 + 1) : 0);\n      }, rippleRef.timestamp < duration ? duration * .15 : 0);\n      this.runTimeoutOutsideZone(() => {\n        rippleRef.container.parentNode.removeChild(rippleRef.container);\n      // }, rippleRef.timestamp < duration ? duration * 2 : duration);\n      // }, rippleRef.timestamp < duration ? duration / (duration * .001 + 1) * 2 : duration);\n      }, rippleRef.timestamp < duration ? duration * 2 : duration);\n    }\n  }\n  removeEvents() {\n    if (this._triggerElement) {\n      this._eventHandlers.forEach((fn, type) => {\n        this._triggerElement.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n\n}\n\nfunction rippleRadius(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n\nfunction maxSize(rect: ClientRect) {\n  return Math.max(rect.width, rect.height);\n}\n","import { Injectable, Inject, Renderer2, ElementRef } from '@angular/core';\nimport { CoreTheme } from '@alyle/ui';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LyRippleService {\n  stylesData: string[] = [];\n  classes = {\n    root: this.coreTheme.setUpStyleSecondary(\n      'ripple', {\n        '': () => (\n          `z-index: 0;` +\n          `border-radius: inherit;`\n        )\n      }\n    )\n  };\n  constructor(\n    private coreTheme: CoreTheme\n  ) {\n    const host = this.coreTheme.setUpStyle('ripple', {\n      '': () => ( 'position: relative;' )\n    });\n    const rippleContainer = this.coreTheme.setUpStyle('ripple-cont', {'': () => (\n      `position: absolute;` +\n      `width: 5px;` +\n      `height: 5px;` +\n      `background: currentColor;` +\n      `opacity: .19;` +\n      `border-radius: 100%;` +\n      `-webkit-transform: scale(0);` +\n      `transform: scale(0);` +\n      `-webkit-transition: opacity ease,-webkit-transform cubic-bezier(.1, 1, 0.5, 1);` +\n      `transition: opacity ease,-webkit-transform cubic-bezier(.1, 1, 0.5, 1);` +\n      `transition: opacity ease,transform cubic-bezier(.1, 1, 0.5, 1);` +\n      `transition: opacity ease,transform cubic-bezier(.1, 1, 0.5, 1);` +\n      `pointer-events: none;`\n    )});\n    this.stylesData.push(host, rippleContainer);\n  }\n\n}\n","import {\n  ElementRef,\n  forwardRef,\n  Input,\n  Directive,\n  ChangeDetectionStrategy,\n  NgZone,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding,\n  HostListener,\n  AfterViewInit,\n  Renderer2,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { toBoolean, LyFocusState, Platform } from '@alyle/ui';\nimport { Ripple, RippleConfig } from './ripple';\nimport { LyRippleService } from './ripple.service';\n\n@Directive({\n  selector: '[lyRipple], [ly-ripple]',\n  exportAs: 'lyRipple'\n})\nexport class LyRipple implements OnInit, OnChanges, OnDestroy {\n  rippleContainer: Ripple;\n  private _containerElement: HTMLElement | null;\n  @Input() lyRippleCentered: boolean;\n  @Input() lyRippleDisabled: boolean;\n  @Input() lyRippleSensitive: boolean;\n  @Input() lyRippleRadius: 'containerSize' | number;\n  @Input() lyRipplePercentageToIncrease: number;\n  get lyRippleConfig(): RippleConfig {\n    return {\n      centered: toBoolean(this.lyRippleCentered),\n      disabled: toBoolean(this.lyRippleDisabled),\n      sensitive: toBoolean(this.lyRippleSensitive),\n      radius: this.lyRippleRadius,\n      percentageToIncrease: this.lyRipplePercentageToIncrease,\n    };\n  }\n  constructor(\n    private rippleService: LyRippleService,\n    public _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    private _renderer: Renderer2\n  ) {\n    if (Platform.isBrowser) {\n      this.rippleContainer = new Ripple(this._ngZone, this.rippleService.stylesData, this._elementRef.nativeElement);\n    }\n  }\n\n  ngOnInit() {\n    this._updateRipple();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._updateRipple();\n  }\n\n  private _updateRipple() {\n    if (Platform.isBrowser) {\n      this.rippleContainer.setConfig(this.lyRippleConfig);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.rippleContainer) {\n      this.rippleContainer.removeEvents();\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LyRipple } from './ripple.directive';\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [LyRipple],\n  exports: [LyRipple]\n})\nexport class LyRippleModule { }\n"]}