{"version":3,"sources":["ng://@alyle/ui/radio/radio.service.ts","ng://@alyle/ui/radio/radio.ts"],"names":["LyRadioService","coreTheme","this","root","setUpStyle","","labelContent","Injectable","args","providedIn","CoreTheme","LY_RADIO_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","LyRadioGroup","multi","idx","UndefinedValue","_radioService","elementRef","_renderer","theme","ngZone","cd","EventEmitter","addClass","nativeElement","classes","Object","defineProperty","prototype","_this","label","container","setUpStyleSecondary",">div",">div *"," div>:nth-child(1)","config","radioOuterCircle"," div>:nth-child(2)","_value","val","_radios","_updateCheckFromValue","_touch","onTouched","writeValue","value","markForCheck","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","setDisabledState","isDisabled","newChecked","forEach","radioButton","updatevalue","checked","change","emit","_radioResetChecked","_","_setCheckedToFalsy","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","OnPush","preserveWhitespaces","exportAs","ElementRef","Renderer2","LyTheme2","NgZone","ChangeDetectorRef","Input","Output","ContentChildren","LyRadio","radioGroup","_elementRef","changeDetectorRef","coreStyles","_rippleService","_withColor","checkedClass","beforeClass","_createStyleWithColor","updateClassName","_radioContainer","_checked","newCheckedState","toBoolean","before","withColor","removeClass","_markForCheck","id","_onInputChange","event","stopPropagation","_onInputClick","colorOf","ngOnInit","name","_rippleContainer","Ripple","stylesData","setConfig","centered","radius","ngOnDestroy","removeEvents","decorators","type","Optional","LyCoreStyles","LyRippleService","ViewChild","NgModule","imports","CommonModule","FormsModule","LyRippleModule","LyCommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CoreTheme } from '@alyle/ui';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LyRadioService {\n  classes = {\n    root: this.coreTheme.setUpStyle(\n      'k-radio-group', {\n        '': () => (\n          `display: flex;` +\n          `flex-wrap: wrap;`\n        )\n      }\n    ),\n    labelContent: this.coreTheme.setUpStyle(\n      'k-radio-label-content', {\n        '': () => (\n          `padding: 0 0.5em;`\n        )\n      }\n    )\n  };\n  constructor(\n    private coreTheme: CoreTheme\n  ) { }\n}\n","import {\n  Component,\n  forwardRef,\n  NgModule,\n  Input,\n  Directive,\n  Output,\n  SimpleChange,\n  ChangeDetectorRef,\n  OnChanges,\n  ModuleWithProviders,\n  AfterViewInit,\n  OnInit,\n  OnDestroy,\n  ContentChildren,\n  QueryList,\n  Optional,\n  HostBinding,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  SimpleChanges,\n  NgZone,\n  ViewChild,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\nimport { LyRippleModule, LyRipple, LyRippleService, Ripple } from '@alyle/ui/ripple';\nimport { Subscription , Subject , BehaviorSubject , Observable } from 'rxjs';\nimport {\n  NgModel,\n  NG_VALUE_ACCESSOR,\n  ControlValueAccessor,\n  FormsModule,\n} from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { LyCommonModule, Platform, IsBoolean, LyTheme2, LyCoreStyles, toBoolean } from '@alyle/ui';\nimport { LyRadioService } from './radio.service';\nexport const LY_RADIO_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => LyRadioGroup),\n  multi: true\n};\n\nlet idx = 0;\n\nexport class UndefinedValue {\n  constructor() { }\n}\n\n@Component({\n  selector: 'ly-radio-group',\n  template: `<ng-content></ng-content>`,\n  providers: [LY_RADIO_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  exportAs: 'lyRadioGroup'\n})\nexport class LyRadioGroup implements ControlValueAccessor {\n  _value = new UndefinedValue;\n  name = `ly-radio-name-${idx++}`;\n  _color = 'accent';\n  private _classes;\n\n  get classes() {\n    return {\n      label: this.theme.setUpStyle(\n        `k-radio-label`, {\n          '': () => (\n            `cursor: pointer;` +\n            `white-space: nowrap;` +\n            `position: relative;` +\n            `display: flex;` +\n            `align-items: center;`\n          )\n        }\n      ),\n      container: this.theme.setUpStyleSecondary(\n        `k-radio-container`, {\n          '': () => (\n            `position: relative;` +\n            `height: calc(1em * 3);` +\n            `width: 1.5em;`\n          ),\n          '>div': () => (\n            `box-sizing: border-box;`\n          ),\n          '>div *': () => (\n            `box-sizing: border-box;` +\n            `margin:auto;` +\n            `border-radius: 50%;` +\n            `transition: transform cubic-bezier(.1, 1, 0.5, 1);` +\n            `transition-duration: 250ms;` +\n            `width: 1em;` +\n            `height: 1em;`\n          ),\n          ' div>:nth-child(1)': () => (\n            `transform: scale(1);` +\n            `border: solid .08em currentColor;` +\n            `color:${this.theme.config.radio.radioOuterCircle}`\n          ),\n          ' div>:nth-child(2)': () => (\n            `background: currentColor;` +\n            `transform: scale(0);`\n          )\n        }\n      )\n    };\n  }\n\n  @Input()\n  set value(val: any) {\n    if (this._value !== val) {\n      // this._value = val;\n      if (this._radios) {\n        this._updateCheckFromValue(val);\n      }\n    }\n  }\n  get value() {\n    return this._value;\n  }\n\n  @Output() readonly change: EventEmitter<void> = new EventEmitter<void>();\n\n  /** @deprecated use withColor */\n  @Input() radioColor = 'accent';\n  @Input() withColor = 'accent';\n  @ContentChildren(forwardRef(() => LyRadio)) _radios: QueryList<LyRadio>;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  writeValue(value: any) {\n    if (!!this._radios) {\n      this.value = value;\n      this.markForCheck();\n    }\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    // this.disabled = isDisabled;\n    this.markForCheck();\n  }\n\n  constructor(\n    public _radioService: LyRadioService,\n    private elementRef: ElementRef,\n    private _renderer: Renderer2,\n    public theme: LyTheme2,\n    public ngZone: NgZone,\n    private cd: ChangeDetectorRef\n  ) {\n    _renderer.addClass(elementRef.nativeElement, this._radioService.classes.root);\n  }\n\n  _updateCheckFromValue(val: any) {\n    let newChecked: boolean;\n    this._radios.forEach(radioButton => {\n      if (val === radioButton.value) {\n        this.updatevalue(val);\n        newChecked = true;\n        radioButton.checked = true;\n      } else if (radioButton.checked) {\n        radioButton.checked = false;\n      }\n    });\n    if (!newChecked) {\n      /** when val not exist in radio button !==  */\n      this._controlValueAccessorChangeFn(null);\n      if (this._value !== null) {\n        this._value = null;\n      }\n    }\n  }\n\n  updatevalue(value: any) {\n    this._value = value;\n    this._controlValueAccessorChangeFn(value);\n    this.change.emit();\n    this.markForCheck();\n  }\n\n  markForCheck() {\n    this.cd.markForCheck();\n  }\n\n  _radioResetChecked() {\n    this._radios.forEach(_ => _._setCheckedToFalsy());\n  }\n\n}\n@Component({\n  selector: 'ly-radio',\n  // styleUrls: ['radio.scss'],\n  template: `\n  <label #_labelContainer [attr.for]=\"inputId\" [className]=\"radioGroup.classes.label\">\n    <input\n      [className]=\"coreStyles.classes.VisuallyHidden\"\n      [id]=\"inputId\"\n      [checked]=\"checked\"\n      [name]=\"name\"\n      (change)=\"_onInputChange($event)\"\n      (click)=\"_onInputClick($event)\"\n      type=\"radio\"\n      >\n    <div #_radioContainer>\n      <div>\n      <div [className]=\"coreStyles.classes.Fill\"></div>\n      <div [className]=\"coreStyles.classes.Fill\"></div>\n      </div>\n    </div>\n    <div\n    [className]=\"radioGroup._radioService.classes.labelContent\">\n      <ng-content></ng-content>\n    </div>\n  </label>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class LyRadio implements OnInit, OnDestroy {\n  id = `ly-radio-id-${idx++}`;\n  name = '';\n  _value = null;\n  private _withColor: string;\n  private _rippleContainer: Ripple;\n  private _checked = false;\n  private checkedClass: string;\n  @ViewChild('_radioContainer') private _radioContainer: ElementRef;\n  @ViewChild('_labelContainer') _labelContainer: ElementRef;\n  @Input()\n  set withColor(val: string) {\n    if (this._withColor !== val) {\n      this._withColor = val;\n      if (this.checkedClass) {\n        /** create new class if exist `this.checkedClass` */\n        const beforeClass = this.checkedClass;\n        this.checkedClass = this._createStyleWithColor(val);\n        this.theme.updateClassName(this._radioContainer.nativeElement, this._renderer, this.checkedClass, beforeClass);\n      }\n    }\n  }\n  get withColor() {\n    return this._withColor;\n  }\n  @Output() onCheckedState = new EventEmitter<boolean>();\n\n  @Input()\n  set value(val) {\n    if (this._value !== val) {\n      this._value = val;\n    }\n  }\n  get value() { return this._value; }\n\n  @Input()\n  set checked(val: boolean) {\n    const newCheckedState = toBoolean(val);\n    const before = this._checked;\n    if (before !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (!before && newCheckedState) {\n        /** Use current checked class or create new class */\n        this.checkedClass = this.checkedClass || this._createStyleWithColor(this.withColor || this.radioGroup.withColor);\n        /** Add class checked */\n        this._renderer.addClass(this._radioContainer.nativeElement, this.checkedClass);\n\n        if (this.value !== this.radioGroup.value) {\n          /** update Value */\n          this.radioGroup.updatevalue(this.value);\n        }\n      } else {\n        /** Remove class checked */\n        this._renderer.removeClass(this._radioContainer.nativeElement, this.checkedClass);\n      }\n      this._markForCheck();\n    }\n  }\n  get checked() {\n    return this._checked;\n  }\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  _onInputChange(event: any) {\n    event.stopPropagation();\n    this.radioGroup._updateCheckFromValue(this.value);\n    // this.radioGroup._radioResetChecked();\n    // this.checked = true;\n    this.radioGroup._touch();\n  }\n\n  _onInputClick(event: Event) { event.stopPropagation(); }\n\n  _setCheckedToFalsy() {\n    this.checked = false;\n  }\n\n  _createStyleWithColor(val: string) {\n    return this.theme.setUpStyle(\n      `k-radio-checked-${val}`, {\n        '': () => (\n          `color:${this.theme.colorOf(val)};`\n        ),\n        ' div>:nth-child(1)': () => (\n          `transform: scale(1.25);` +\n          `color:${this.theme.colorOf(val)};`\n        ),\n        ' div>:nth-child(2)': () => (\n          `transform: scale(0.7);`\n        ),\n      }\n    );\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n      this._renderer.addClass(this._radioContainer.nativeElement, this.radioGroup.classes.container);\n    }\n    this._rippleContainer = new Ripple(this.ngZone, this._rippleService.stylesData, this._radioContainer.nativeElement, this._elementRef.nativeElement);\n    this._rippleContainer.setConfig({\n      centered: true,\n      radius: 'containerSize'\n    });\n  }\n\n  _markForCheck() {\n    this.changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy() {\n    this._rippleContainer.removeEvents();\n  }\n\n\n  constructor(\n    @Optional() public radioGroup: LyRadioGroup,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    public theme: LyTheme2,\n    private changeDetectorRef: ChangeDetectorRef,\n    private ngZone: NgZone,\n    public coreStyles: LyCoreStyles,\n    private _rippleService: LyRippleService\n  ) { }\n}\n\n@NgModule({\n  imports: [CommonModule, FormsModule, LyRippleModule, LyCommonModule],\n  exports: [LyRadioGroup, LyRadio],\n  declarations: [LyRadioGroup, LyRadio],\n})\nexport class LyRadioModule { }\n"]}